Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = if list_eq (getStn (lambda1)) ((Nil)) then true else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:5.)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = if list_eq (getStn (lambda1)) ((Nil)) then true else false

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 5.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = if list_eq (getStn (V (string1))) ((Nil)) then true else false

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = if list_eq (getStn (V (string1))) ((Nil)) then true else false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = if list_eq (getStn (P (string1) (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = if list_eq (getStn (P (string1) (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))(rank:5.)
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
>>> case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))(rank : 5.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = true

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:5.)
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = true

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 5.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("daf")) (("wwd"::(Nil))) = list_eq (filter (aux ("wwd")) (getStn (V ("daf")))) ((Nil))
Prop: sub_check_ta1 (V ("zqq")) (("lfi"::(Nil))) = list_eq (filter (aux ("lfi")) (getStn (V ("zqq")))) ((Nil))
Prop: sub_check_ta1 (V ("zdz")) (("ttm"::(Nil))) = list_eq (filter (aux ("ttm")) (getStn (V ("zdz")))) ((Nil))
previous tactics
simpl in goal
case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
parent
(string1::(Nil))
lower
Cons(_, Nil())
upper
sub_check_ta1(lambda2, _)
remove upper
Nil()
remove lower
Nil()
remove upper
Cons(string1, Nil())
remove lower
Cons(string1, Nil())
remove upper
Cons(string2, Cons(string1, Nil()))
remove lower
Cons(string2, Cons(string1, Nil()))
remove upper
Cons(string3, Cons(string2, Cons(string1, Nil())))
remove lower
Cons(string3, Cons(string2, Cons(string1, Nil())))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (C (V ("mvw")) (V ("lot"))) (("uci"::(Nil))) = true
Prop: sub_check_ta1 (V ("pke")) (("udz"::(Nil))) = true
Prop: sub_check_ta1 (V ("rae")) (("ncl"::(Nil))) = true
Lemma List
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
End of Lemma List


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = true

2 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 8


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = true

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:5.)
intro string1(rank:5.)
induction lambda1(rank:15.)
=================================================
Progress: 9


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:5.)
intro string1(rank:5.)
induction lambda1(rank:15.)
=================================================
Progress: 10


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
>>> intro lambda1(rank : 5.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:5.)
=================================================
Progress: 11


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 5.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:7.)
=================================================
Progress: 12


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro lambda1(rank : 5.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:5.)
=================================================
Progress: 13


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 5.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:7.)
=================================================
Progress: 14


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 5.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5.)
=================================================
Progress: 15


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 5.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5.)
=================================================
Progress: 16


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:5.)
=================================================
Progress: 17


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:5.)
=================================================
Progress: 18


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 5.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (P ("jtg") (V ("apf"))) (("avt"::(Nil))) = list_eq (filter (aux ("avt")) (getStn (P ("jtg") (V ("apf"))))) ((Nil))
Prop: sub_check_ta1 (V ("dhc")) (("lue"::(Nil))) = list_eq (filter (aux ("lue")) (getStn (V ("dhc")))) ((Nil))
Prop: sub_check_ta1 (C (C (V ("uuo")) (V ("nos"))) (V ("bbj"))) (("pfk"::(Nil))) = list_eq (filter (aux ("pfk")) (getStn (C (C (V ("uuo")) (V ("nos"))) (V ("bbj"))))) ((Nil))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (C (C (V ("lsn")) (V ("bjj"))) (V ("kgw"))) (("tip"::(Nil))) = true
Prop: sub_check_ta1 (C (V ("xsr")) (C (P ("kzj") (V ("xul"))) (V ("lxh")))) (("gmg"::(Nil))) = true
Prop: sub_check_ta1 (V ("xkh")) (("zve"::(Nil))) = true
Lemma List
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 19


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:7.)
intro string1(rank:7.)
induction lambda1(rank:17.)
=================================================
Progress: 20


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:7.)
intro string1(rank:7.)
induction lambda1(rank:17.)
=================================================
Progress: 21


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 5.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("nij")) (("icr"::(Nil))) = true
Prop: sub_check_ta1 (V ("czq")) (("qbz"::(Nil))) = true
Prop: sub_check_ta1 (V ("fwz")) (("hss"::(Nil))) = true
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("giy")) (("qzo"::(Nil))) = list_eq (filter (aux ("qzo")) (getStn (V ("giy")))) ((Nil))
Prop: sub_check_ta1 (V ("hzi")) (("ful"::(Nil))) = list_eq (filter (aux ("ful")) (getStn (V ("hzi")))) ((Nil))
Prop: sub_check_ta1 (V ("lfc")) (("gnp"::(Nil))) = list_eq (filter (aux ("gnp")) (getStn (V ("lfc")))) ((Nil))
Lemma List
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 22


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:7.)
intro string1(rank:7.)
induction lambda1(rank:17.)
=================================================
Progress: 23


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:7.)
intro string1(rank:7.)
induction lambda1(rank:17.)
=================================================
Progress: 24


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 25


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 26


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro lambda1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 27


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9.)
=================================================
Progress: 28


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro lambda1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 29


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9.)
=================================================
Progress: 30


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro lambda1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 31


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9.)
=================================================
Progress: 32


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro lambda1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 33


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9.)
=================================================
Progress: 34


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 35


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 36


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 37


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 38


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 39


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 40


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 41


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case string_eq (string1) (string2)(rank:8.)
rewrite Cond1 in goal at 0(rank:15.)
case any_eq (string2) (string1)(rank:8.)
=================================================
Progress: 42


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:7.)
=================================================
Progress: 43


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:7.)
=================================================
Progress: 44


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:7.)
=================================================
Progress: 45


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:7.)
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("fot")) (("hxx"::(Nil))) = list_eq (filter (aux ("hxx")) (getStn (V ("fot")))) ((Nil))
Prop: sub_check_ta1 (V ("chw")) (("ijs"::(Nil))) = list_eq (filter (aux ("ijs")) (getStn (V ("chw")))) ((Nil))
Prop: sub_check_ta1 (V ("dja")) (("mwl"::(Nil))) = list_eq (filter (aux ("mwl")) (getStn (V ("dja")))) ((Nil))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("myw")) (("teb"::(Nil))) = true
Prop: sub_check_ta1 (C (V ("gsl")) (C (V ("jnc")) (V ("cvx")))) (("yen"::(Nil))) = true
Prop: sub_check_ta1 (V ("yzj")) (("yho"::(Nil))) = true
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("izf")) (("vsr"::(Nil))) = true
Prop: sub_check_ta1 (C (V ("gae")) (V ("evl"))) (("mhv"::(Nil))) = true
Prop: sub_check_ta1 (P ("bwk") (V ("hfe"))) (("iig"::(Nil))) = true
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("akd")) (("yxm"::(Nil))) = list_eq (filter (aux ("yxm")) (getStn (V ("akd")))) ((Nil))
Prop: sub_check_ta1 (C (V ("rxb")) (V ("lfx"))) (("bhz"::(Nil))) = list_eq (filter (aux ("bhz")) (getStn (C (V ("rxb")) (V ("lfx"))))) ((Nil))
Prop: sub_check_ta1 (V ("nsp")) (("fie"::(Nil))) = list_eq (filter (aux ("fie")) (getStn (V ("nsp")))) ((Nil))
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("kqt")) (("wjo"::(Nil))) = true
Prop: sub_check_ta1 (V ("rse")) (("pvf"::(Nil))) = true
Prop: sub_check_ta1 (C (V ("qrg")) (V ("xkc"))) (("efc"::(Nil))) = true
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("iyk")) (("gsf"::(Nil))) = list_eq (filter (aux ("gsf")) (getStn (V ("iyk")))) ((Nil))
Prop: sub_check_ta1 (V ("lfv")) (("trb"::(Nil))) = list_eq (filter (aux ("trb")) (getStn (V ("lfv")))) ((Nil))
Prop: sub_check_ta1 (V ("izl")) (("xmy"::(Nil))) = list_eq (filter (aux ("xmy")) (getStn (V ("izl")))) ((Nil))
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("thm")) (("tjh"::(Nil))) = list_eq (filter (aux ("tjh")) (getStn (V ("thm")))) ((Nil))
Prop: sub_check_ta1 (P ("vua") (V ("nim"))) (("jsp"::(Nil))) = list_eq (filter (aux ("jsp")) (getStn (P ("vua") (V ("nim"))))) ((Nil))
Prop: sub_check_ta1 (C (V ("dtf")) (C (V ("ppy")) (V ("uzm")))) (("jky"::(Nil))) = list_eq (filter (aux ("jky")) (getStn (C (V ("dtf")) (C (V ("ppy")) (V ("uzm")))))) ((Nil))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("spi")) (("hpj"::(Nil))) = true
Prop: sub_check_ta1 (V ("chp")) (("twz"::(Nil))) = true
Prop: sub_check_ta1 (V ("kgr")) (("nsw"::(Nil))) = true
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 51


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7.)
=================================================
Progress: 52


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("yqd") ("zmq") = true
Prop: string_eq ("roq") ("ybh") = true
Prop: string_eq ("ezx") ("nup") = true
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
reflexivity
Lemma List
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 53


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true(rank : 0.)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 54


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8.)
=================================================
Progress: 55


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (string2) (string1)(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : any_eq (string2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string2)(rank:9.)
rewrite <- Case1 in goal at 2(rank:16.)
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Case1 in goal at 1(rank:24.)
=================================================
Progress: 56


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:8.)
rewrite <- Case1 in goal at 1(rank:8.)
rewrite Case1 in goal at 0(rank:24.)
rewrite Case1 in goal at 1(rank:24.)
rewrite Case1 in goal at 2(rank:24.)
rewrite Case1 in goal at 3(rank:24.)
rewrite <- Case1 in goal at 2(rank:8.)
case string_eq (string2) (string1)(rank:9.)
rewrite Cond1 in goal at 0(rank:16.)
=================================================
Progress: 57


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 58


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 59


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("qpr") ("srw") then false else true then ("srw"::filter (aux ("srw")) ((Nil))) else filter (aux ("srw")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("wjh") ("mxi") then false else true then ("mxi"::filter (aux ("mxi")) ((Nil))) else filter (aux ("mxi")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("egs") ("ftf") then false else true then ("ftf"::filter (aux ("ftf")) ((Nil))) else filter (aux ("ftf")) ((Nil))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("yrh") ("hbl") then false else true then ("yrh"::filter (aux ("hbl")) ((Nil))) else filter (aux ("hbl")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("cnb") ("oyx") then false else true then ("cnb"::filter (aux ("oyx")) ((Nil))) else filter (aux ("oyx")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("slc") ("xdy") then false else true then ("slc"::filter (aux ("xdy")) ((Nil))) else filter (aux ("xdy")) ((Nil))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("dge") ("dvp") then false else true then ("dge"::filter (aux ("dvp")) ((Nil))) else filter (aux ("dvp")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("sfv") ("hkm") then false else true then ("sfv"::filter (aux ("hkm")) ((Nil))) else filter (aux ("hkm")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("nwz") ("gpy") then false else true then ("nwz"::filter (aux ("gpy")) ((Nil))) else filter (aux ("gpy")) ((Nil))) ((Nil))
Lemma List
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = true -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 60


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = true -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = true -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = true -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 61


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 62


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 63


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 64


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 10
Tactic List : 5
case string_eq (string2) (string1)(rank:8.)
rewrite Cond1 in goal at 0(rank:15.)
rewrite <- Case1 in goal at 0(rank:23.)
rewrite <- Case1 in goal at 1(rank:15.)
rewrite <- Case1 in goal at 2(rank:23.)
=================================================
Progress: 65


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 66


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:8.)
=================================================
Progress: 67


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite Case2 in goal at 0(rank:24.)
=================================================
Progress: 68


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 69


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 70


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = false
---------------------------------------
false = false

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 71


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = false
---------------------------------------
false = false

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 9
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 72


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6.)
=================================================
Progress: 73


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6.)
=================================================
Progress: 74


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("otv")) (("rua"::("qls"::(Nil)))) = true
Prop: sub_check_ta1 (P ("odc") (V ("ltt"))) (("uet"::("mrr"::(Nil)))) = true
Prop: sub_check_ta1 (P ("ghj") (V ("ebm"))) (("qiu"::("efi"::(Nil)))) = true
previous tactics
simpl in goal
intro Cond1
parent
(string2::(string1::(Nil)))
lower
Cons(_, Cons(string1, Nil()))
upper
sub_check_ta1(lambda2, _)
remove upper
Cons(string1, Nil())
remove lower
Cons(string1, Nil())
remove upper
Cons(string2, Cons(string1, Nil()))
remove lower
Cons(string2, Cons(string1, Nil()))
remove upper
Cons(string3, Cons(string2, Cons(string1, Nil())))
remove lower
Cons(string3, Cons(string2, Cons(string1, Nil())))
remove upper
Cons(string4, Cons(string3, Cons(string2, Cons(string1, Nil()))))
remove lower
Cons(string4, Cons(string3, Cons(string2, Cons(string1, Nil()))))
parent
aux (string2)
lower
aux(_)
upper
list_eq(filter(aux(string1), filter(_, getStn(lambda2))), Nil())
remove upper
aux(string2)
remove lower
aux(string2)
remove upper
aux(string2)
remove lower
aux(string2)
remove upper
aux(string2)
remove lower
aux(string2)
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("jux")) (("acb"::("ppa"::(Nil)))) = list_eq (filter (aux ("ppa")) (filter (aux ("acb")) (getStn (V ("jux"))))) ((Nil))
Prop: sub_check_ta1 (V ("aum")) (("ijy"::("vuh"::(Nil)))) = list_eq (filter (aux ("vuh")) (filter (aux ("ijy")) (getStn (V ("aum"))))) ((Nil))
Prop: sub_check_ta1 (C (V ("rsb")) (V ("brg"))) (("uje"::("jci"::(Nil)))) = list_eq (filter (aux ("jci")) (filter (aux ("uje")) (getStn (C (V ("rsb")) (V ("brg")))))) ((Nil))
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 75


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:7.)
intro string1(rank:7.)
intro string2(rank:7.)
induction lambda1(rank:17.)
=================================================
Progress: 76


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:7.)
intro string1(rank:7.)
intro string2(rank:7.)
induction lambda1(rank:17.)
=================================================
Progress: 77


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro lambda1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 78


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:7.)
induction lambda1(rank:17.)
=================================================
Progress: 79


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9.)
=================================================
Progress: 80


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro lambda1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 81


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:7.)
induction lambda1(rank:17.)
=================================================
Progress: 82


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9.)
=================================================
Progress: 83


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 84


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9.)
=================================================
Progress: 85


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 86


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9.)
=================================================
Progress: 87


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 88


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 89


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:7.)
=================================================
Progress: 90


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:7.)
=================================================
Progress: 91


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("coc")) (("ogw"::("nme"::(Nil)))) = true
Prop: sub_check_ta1 (P ("huc") (C (P ("lig") (V ("lbj"))) (P ("crg") (V ("oof"))))) (("joy"::("zkb"::(Nil)))) = true
Prop: sub_check_ta1 (C (C (V ("rzy")) (V ("tuf"))) (V ("cko"))) (("ctb"::("gpo"::(Nil)))) = true
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("asp")) (("xiw"::("gui"::(Nil)))) = list_eq (filter (aux ("gui")) (filter (aux ("xiw")) (getStn (V ("asp"))))) ((Nil))
Prop: sub_check_ta1 (P ("fyz") (V ("qkw"))) (("qdq"::("yww"::(Nil)))) = list_eq (filter (aux ("yww")) (filter (aux ("qdq")) (getStn (P ("fyz") (V ("qkw")))))) ((Nil))
Prop: sub_check_ta1 (V ("zrs")) (("djy"::("hjl"::(Nil)))) = list_eq (filter (aux ("hjl")) (filter (aux ("djy")) (getStn (V ("zrs"))))) ((Nil))
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 92


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:9.)
intro string1(rank:9.)
intro string2(rank:9.)
induction lambda1(rank:19.)
=================================================
Progress: 93


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:9.)
intro string1(rank:9.)
intro string2(rank:9.)
induction lambda1(rank:19.)
=================================================
Progress: 94


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (C (V ("sui")) (V ("kvo"))) (("wrt"::("nnx"::(Nil)))) = list_eq (filter (aux ("nnx")) (filter (aux ("wrt")) (getStn (C (V ("sui")) (V ("kvo")))))) ((Nil))
Prop: sub_check_ta1 (V ("knu")) (("lbl"::("vwd"::(Nil)))) = list_eq (filter (aux ("vwd")) (filter (aux ("lbl")) (getStn (V ("knu"))))) ((Nil))
Prop: sub_check_ta1 (V ("qfd")) (("ret"::("iiu"::(Nil)))) = list_eq (filter (aux ("iiu")) (filter (aux ("ret")) (getStn (V ("qfd"))))) ((Nil))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("ora")) (("gax"::("qde"::(Nil)))) = true
Prop: sub_check_ta1 (V ("jml")) (("ans"::("yao"::(Nil)))) = true
Prop: sub_check_ta1 (C (V ("gwp")) (V ("kod"))) (("riu"::("day"::(Nil)))) = true
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 95


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:9.)
intro string1(rank:9.)
intro string2(rank:9.)
induction lambda1(rank:19.)
=================================================
Progress: 96


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:9.)
intro string1(rank:9.)
intro string2(rank:9.)
induction lambda1(rank:19.)
=================================================
Progress: 97


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 98


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 99


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 100


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 101


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 102


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 103


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 104


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 105


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 106


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string2(rank:9.)
induction lambda1(rank:19.)
=================================================
Progress: 107


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11.)
=================================================
Progress: 108


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 109


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string2(rank:9.)
induction lambda1(rank:19.)
=================================================
Progress: 110


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11.)
=================================================
Progress: 111


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 112


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string2(rank:9.)
induction lambda1(rank:19.)
=================================================
Progress: 113


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11.)
=================================================
Progress: 114


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 115


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string2(rank:9.)
induction lambda1(rank:19.)
=================================================
Progress: 116


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11.)
=================================================
Progress: 117


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 118


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 119


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 120


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 121


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 122


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 123


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 124


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 125


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 126


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11.)
=================================================
Progress: 127


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 128


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11.)
=================================================
Progress: 129


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 130


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11.)
=================================================
Progress: 131


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 132


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11.)
=================================================
Progress: 133


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:10.)
=================================================
Progress: 134


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case string_eq (string1) (string2)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
case any_eq (string2) (string1)(rank:10.)
=================================================
Progress: 135


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case string_eq (string1) (string2)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
case any_eq (string2) (string1)(rank:10.)
=================================================
Progress: 136


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:10.)
=================================================
Progress: 137


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 138


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 139


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case string_eq (string2) (string3)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
case any_eq (string3) (string2)(rank:10.)
=================================================
Progress: 140


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10.)
=================================================
Progress: 141


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 142


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 143


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 144


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 145


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case string_eq (string2) (string3)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
case any_eq (string3) (string2)(rank:10.)
=================================================
Progress: 146


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10.)
=================================================
Progress: 147


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9.)
=================================================
Progress: 148


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:9.)
=================================================
Progress: 149


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:9.)
=================================================
Progress: 150


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9.)
=================================================
Progress: 151


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("nja")) (("plf"::("xba"::(Nil)))) = true
Prop: sub_check_ta1 (C (C (C (V ("hlu")) (V ("mgn"))) (V ("cma"))) (V ("phb"))) (("xzs"::("mvv"::(Nil)))) = true
Prop: sub_check_ta1 (P ("fjd") (V ("ysp"))) (("yde"::("tat"::(Nil)))) = true
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("sze")) (("uae"::("qnt"::(Nil)))) = list_eq (filter (aux ("qnt")) (filter (aux ("uae")) (getStn (V ("sze"))))) ((Nil))
Prop: sub_check_ta1 (V ("sct")) (("zro"::("gsj"::(Nil)))) = list_eq (filter (aux ("gsj")) (filter (aux ("zro")) (getStn (V ("sct"))))) ((Nil))
Prop: sub_check_ta1 (V ("mbg")) (("jew"::("fza"::(Nil)))) = list_eq (filter (aux ("fza")) (filter (aux ("jew")) (getStn (V ("mbg"))))) ((Nil))
=================================================
Progress: 152


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("hyh")) (("jea"::("aps"::(Nil)))) = list_eq (filter (aux ("aps")) (filter (aux ("jea")) (getStn (V ("hyh"))))) ((Nil))
Prop: sub_check_ta1 (V ("hla")) (("whu"::("uoz"::(Nil)))) = list_eq (filter (aux ("uoz")) (filter (aux ("whu")) (getStn (V ("hla"))))) ((Nil))
Prop: sub_check_ta1 (C (V ("biy")) (V ("flk"))) (("yjk"::("oaw"::(Nil)))) = list_eq (filter (aux ("oaw")) (filter (aux ("yjk")) (getStn (C (V ("biy")) (V ("flk")))))) ((Nil))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("zuj")) (("eyv"::("eez"::(Nil)))) = true
Prop: sub_check_ta1 (V ("jfz")) (("qae"::("hqd"::(Nil)))) = true
Prop: sub_check_ta1 (V ("dxh")) (("gkw"::("zri"::(Nil)))) = true
=================================================
Progress: 153


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("rud")) (("czh"::("tow"::(Nil)))) = list_eq (filter (aux ("tow")) (filter (aux ("czh")) (getStn (V ("rud"))))) ((Nil))
Prop: sub_check_ta1 (V ("cpv")) (("ltx"::("mzu"::(Nil)))) = list_eq (filter (aux ("mzu")) (filter (aux ("ltx")) (getStn (V ("cpv"))))) ((Nil))
Prop: sub_check_ta1 (V ("ebt")) (("zbn"::("ryc"::(Nil)))) = list_eq (filter (aux ("ryc")) (filter (aux ("zbn")) (getStn (V ("ebt"))))) ((Nil))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (P ("ufl") (V ("mqr"))) (("uqi"::("cgd"::(Nil)))) = true
Prop: sub_check_ta1 (C (V ("eto")) (C (V ("wby")) (C (P ("jku") (C (C (P ("gnr") (V ("bqw"))) (V ("qml"))) (V ("xpc")))) (C (V ("vph")) (V ("npj")))))) (("bvw"::("pxc"::(Nil)))) = true
Prop: sub_check_ta1 (V ("ppd")) (("shm"::("cqf"::(Nil)))) = true
=================================================
Progress: 154


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("bgi")) (("fge"::("zct"::(Nil)))) = true
Prop: sub_check_ta1 (V ("yho")) (("oqs"::("oob"::(Nil)))) = true
Prop: sub_check_ta1 (V ("pea")) (("fiv"::("yng"::(Nil)))) = true
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("vdy")) (("eqr"::("dbu"::(Nil)))) = list_eq (filter (aux ("dbu")) (filter (aux ("eqr")) (getStn (V ("vdy"))))) ((Nil))
Prop: sub_check_ta1 (V ("mwe")) (("wvs"::("lcq"::(Nil)))) = list_eq (filter (aux ("lcq")) (filter (aux ("wvs")) (getStn (V ("mwe"))))) ((Nil))
Prop: sub_check_ta1 (V ("xea")) (("olt"::("wuk"::(Nil)))) = list_eq (filter (aux ("wuk")) (filter (aux ("olt")) (getStn (V ("xea"))))) ((Nil))
=================================================
Progress: 155


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 156


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9.)
=================================================
Progress: 157


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("adl") ("rzz") = true
Prop: string_eq ("dpq") ("hyh") = true
Prop: string_eq ("qhu") ("rwv") = true
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
reflexivity
=================================================
Progress: 158


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 159


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string2) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : any_eq (string2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string2)(rank:11.)
rewrite <- Case1 in goal at 2(rank:18.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 1(rank:26.)
=================================================
Progress: 160


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 161


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string2) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : any_eq (string2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string2)(rank:11.)
rewrite <- Case1 in goal at 2(rank:18.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 1(rank:26.)
=================================================
Progress: 162


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 163


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9.)
=================================================
Progress: 164


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("kcc") ("vpg") = true
Prop: string_eq ("kwl") ("btf") = true
Prop: string_eq ("knp") ("rth") = true
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
reflexivity
=================================================
Progress: 165


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 166


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string3)(rank:11.)
rewrite <- Case1 in goal at 2(rank:18.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 1(rank:26.)
=================================================
Progress: 167


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 168


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10.)
=================================================
Progress: 169


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 170


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string3)(rank:11.)
rewrite <- Case1 in goal at 2(rank:18.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 1(rank:26.)
=================================================
Progress: 171


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 172


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10.)
=================================================
Progress: 173


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Case1 in goal at 1(rank:10.)
rewrite Case1 in goal at 0(rank:26.)
rewrite Case1 in goal at 1(rank:26.)
rewrite Case1 in goal at 2(rank:26.)
rewrite Case1 in goal at 3(rank:26.)
rewrite <- Case1 in goal at 2(rank:10.)
case string_eq (string2) (string1)(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
=================================================
Progress: 174


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Case1 in goal at 1(rank:10.)
rewrite Case1 in goal at 0(rank:26.)
rewrite Case1 in goal at 1(rank:26.)
rewrite Case1 in goal at 2(rank:26.)
rewrite Case1 in goal at 3(rank:26.)
rewrite <- Case1 in goal at 2(rank:10.)
case string_eq (string2) (string1)(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
=================================================
Progress: 175


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Case1 in goal at 1(rank:10.)
rewrite Case1 in goal at 0(rank:26.)
rewrite Case1 in goal at 1(rank:26.)
rewrite Case1 in goal at 2(rank:26.)
rewrite Case1 in goal at 3(rank:26.)
rewrite <- Case1 in goal at 2(rank:10.)
case string_eq (string3) (string2)(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
=================================================
Progress: 176


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 177


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 178


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Case1 in goal at 1(rank:10.)
rewrite Case1 in goal at 0(rank:26.)
rewrite Case1 in goal at 1(rank:26.)
rewrite Case1 in goal at 2(rank:26.)
rewrite Case1 in goal at 3(rank:26.)
rewrite <- Case1 in goal at 2(rank:10.)
case string_eq (string3) (string2)(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
=================================================
Progress: 179


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 180


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 181


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 182


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 183


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("igx") ("ywr") then false else true then ("ywr"::filter (aux ("ywr")) ((Nil))) else filter (aux ("ywr")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("wwv") ("ree") then false else true then ("ree"::filter (aux ("ree")) ((Nil))) else filter (aux ("ree")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("amt") ("nuv") then false else true then ("nuv"::filter (aux ("nuv")) ((Nil))) else filter (aux ("nuv")) ((Nil))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("zbu") ("ret") then false else true then ("zbu"::filter (aux ("ret")) ((Nil))) else filter (aux ("ret")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("nxs") ("jsv") then false else true then ("nxs"::filter (aux ("jsv")) ((Nil))) else filter (aux ("jsv")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("jhj") ("whs") then false else true then ("jhj"::filter (aux ("whs")) ((Nil))) else filter (aux ("whs")) ((Nil))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("hti") ("dkp") then false else true then ("hti"::filter (aux ("dkp")) ((Nil))) else filter (aux ("dkp")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("qli") ("igr") then false else true then ("qli"::filter (aux ("igr")) ((Nil))) else filter (aux ("igr")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("tin") ("nsb") then false else true then ("tin"::filter (aux ("nsb")) ((Nil))) else filter (aux ("nsb")) ((Nil))) ((Nil))
=================================================
Progress: 184


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 185


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 186


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("yyt") ("shn") then false else true then ("shn"::filter (aux ("shn")) ((Nil))) else filter (aux ("shn")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("vrz") ("buy") then false else true then ("buy"::filter (aux ("buy")) ((Nil))) else filter (aux ("buy")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("tri") ("ziz") then false else true then ("ziz"::filter (aux ("ziz")) ((Nil))) else filter (aux ("ziz")) ((Nil))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("fma") ("qfk") then false else true then ("fma"::filter (aux ("qfk")) ((Nil))) else filter (aux ("qfk")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("uro") ("gtk") then false else true then ("uro"::filter (aux ("gtk")) ((Nil))) else filter (aux ("gtk")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("ocb") ("gek") then false else true then ("ocb"::filter (aux ("gek")) ((Nil))) else filter (aux ("gek")) ((Nil))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("htz") ("rjl") then false else true then ("htz"::filter (aux ("rjl")) ((Nil))) else filter (aux ("rjl")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("anh") ("efd") then false else true then ("anh"::filter (aux ("efd")) ((Nil))) else filter (aux ("efd")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("whs") ("zhs") then false else true then ("whs"::filter (aux ("zhs")) ((Nil))) else filter (aux ("zhs")) ((Nil))) ((Nil))
=================================================
Progress: 187


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 188


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 189


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:11.)
=================================================
Progress: 190


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 191


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 192


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:11.)
=================================================
Progress: 193


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 194


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case string_eq (string2) (string1)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:17.)
rewrite <- Case1 in goal at 2(rank:25.)
=================================================
Progress: 195


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 196


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case string_eq (string2) (string1)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:17.)
rewrite <- Case1 in goal at 2(rank:25.)
=================================================
Progress: 197


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 198


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case string_eq (string3) (string2)(rank:10.)
case string_eq (string1) (string3)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:25.)
=================================================
Progress: 199


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 200


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case string_eq (string3) (string2)(rank:10.)
case string_eq (string1) (string3)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:25.)
=================================================
Progress: 201


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 202


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 203


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 204


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 205


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 206


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 207


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:10.)
=================================================
Progress: 208


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:10.)
=================================================
Progress: 209


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:11.)
rewrite Case2 in goal at 2(rank:26.)
rewrite Case2 in goal at 0(rank:26.)
rewrite Case2 in goal at 1(rank:26.)
=================================================
Progress: 210


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:10.)
rewrite <- Case2 in goal at 1(rank:10.)
rewrite <- Case2 in goal at 2(rank:10.)
case string_eq (string3) (string2)(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
rewrite Case2 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 211


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:11.)
rewrite Case2 in goal at 2(rank:26.)
rewrite Case2 in goal at 0(rank:26.)
rewrite Case2 in goal at 1(rank:26.)
=================================================
Progress: 212


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:10.)
rewrite <- Case2 in goal at 1(rank:10.)
rewrite <- Case2 in goal at 2(rank:10.)
case string_eq (string3) (string2)(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
rewrite Case2 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 213


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:10.)
rewrite Case2 in goal at 0(rank:26.)
=================================================
Progress: 214


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:10.)
rewrite Case2 in goal at 0(rank:26.)
=================================================
Progress: 215


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 216


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 217


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 218


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 219


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 220


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 221


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 222


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 223


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 224


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = false
---------------------------------------
false = false

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 1
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 225


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = false
---------------------------------------
false = false

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 9
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 226


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 227


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:8.)
=================================================
Progress: 228


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (C (V ("vyj")) (V ("hma"))) (("dgx"::("ocr"::(Nil)))) = true
Prop: sub_check_ta1 (V ("lpk")) (("okl"::("pow"::(Nil)))) = true
Prop: sub_check_ta1 (V ("ggp")) (("xhn"::("dqb"::(Nil)))) = true
previous tactics
simpl in goal
intro Cond1
parent
(string2::(string1::(Nil)))
lower
Cons(_, Cons(string1, Nil()))
upper
sub_check_ta1(lambda2, _)
remove upper
Cons(string1, Nil())
remove lower
Cons(string1, Nil())
remove upper
Cons(string2, Cons(string1, Nil()))
remove lower
Cons(string2, Cons(string1, Nil()))
remove upper
Cons(string3, Cons(string2, Cons(string1, Nil())))
remove lower
Cons(string3, Cons(string2, Cons(string1, Nil())))
remove upper
Cons(string4, Cons(string3, Cons(string2, Cons(string1, Nil()))))
remove lower
Cons(string4, Cons(string3, Cons(string2, Cons(string1, Nil()))))
parent
aux (string2)
lower
aux(_)
upper
list_eq(filter(aux(string1), filter(_, getStn(lambda2))), Nil())
remove upper
aux(string2)
remove lower
aux(string2)
remove upper
aux(string2)
remove lower
aux(string2)
remove upper
aux(string2)
remove lower
aux(string2)
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("xhl")) (("ijz"::("ail"::(Nil)))) = list_eq (filter (aux ("ail")) (filter (aux ("ijz")) (getStn (V ("xhl"))))) ((Nil))
Prop: sub_check_ta1 (P ("pta") (V ("onx"))) (("avz"::("mcq"::(Nil)))) = list_eq (filter (aux ("mcq")) (filter (aux ("avz")) (getStn (P ("pta") (V ("onx")))))) ((Nil))
Prop: sub_check_ta1 (P ("rvk") (V ("kwc"))) (("ujd"::("kiz"::(Nil)))) = list_eq (filter (aux ("kiz")) (filter (aux ("ujd")) (getStn (P ("rvk") (V ("kwc")))))) ((Nil))
=================================================
Progress: 229


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 230


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = false
---------------------------------------
false = false

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 1
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 231


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = false
---------------------------------------
false = false

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 9
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 232


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 233


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:8.)
=================================================
Progress: 234


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("ivb")) (("ncv"::("zsd"::(Nil)))) = true
Prop: sub_check_ta1 (V ("zij")) (("eme"::("btq"::(Nil)))) = true
Prop: sub_check_ta1 (V ("mfl")) (("vmn"::("oas"::(Nil)))) = true
previous tactics
simpl in goal
intro Cond1
parent
(string2::(string1::(Nil)))
lower
Cons(_, Cons(string1, Nil()))
upper
sub_check_ta1(lambda2, _)
remove upper
Cons(string1, Nil())
remove lower
Cons(string1, Nil())
remove upper
Cons(string2, Cons(string1, Nil()))
remove lower
Cons(string2, Cons(string1, Nil()))
remove upper
Cons(string3, Cons(string2, Cons(string1, Nil())))
remove lower
Cons(string3, Cons(string2, Cons(string1, Nil())))
remove upper
Cons(string4, Cons(string3, Cons(string2, Cons(string1, Nil()))))
remove lower
Cons(string4, Cons(string3, Cons(string2, Cons(string1, Nil()))))
parent
aux (string2)
lower
aux(_)
upper
list_eq(filter(aux(string1), filter(_, getStn(lambda2))), Nil())
remove upper
aux(string2)
remove lower
aux(string2)
remove upper
aux(string2)
remove lower
aux(string2)
remove upper
aux(string2)
remove lower
aux(string2)
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("lxo")) (("zjy"::("rlz"::(Nil)))) = list_eq (filter (aux ("rlz")) (filter (aux ("zjy")) (getStn (V ("lxo"))))) ((Nil))
Prop: sub_check_ta1 (V ("zhf")) (("xvu"::("ehg"::(Nil)))) = list_eq (filter (aux ("ehg")) (filter (aux ("xvu")) (getStn (V ("zhf"))))) ((Nil))
Prop: sub_check_ta1 (V ("jbf")) (("ofn"::("dlx"::(Nil)))) = list_eq (filter (aux ("dlx")) (filter (aux ("ofn")) (getStn (V ("jbf"))))) ((Nil))
=================================================
Progress: 235


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:11.)
=================================================
Progress: 236


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 237


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 238


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 239


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 240


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 241


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 242


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 243


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 244


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 245


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 246


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:11.)
rewrite Case1 in goal at 2(rank:26.)
rewrite Case1 in goal at 0(rank:26.)
rewrite Case1 in goal at 1(rank:26.)
=================================================
Progress: 247


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 248


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 249


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:11.)
rewrite Case1 in goal at 2(rank:26.)
rewrite Case1 in goal at 0(rank:26.)
rewrite Case1 in goal at 1(rank:26.)
=================================================
Progress: 250


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 251


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 252


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 253


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 11
rewrite <- Case2 in goal at 0(rank:10.)
rewrite Cond1 in goal at 0(rank:18.)
rewrite Case2 in goal at 0(rank:26.)
rewrite Case2 in goal at 1(rank:26.)
rewrite Case2 in goal at 2(rank:26.)
rewrite Case2 in goal at 3(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 1(rank:10.)
rewrite <- Case2 in goal at 2(rank:10.)
rewrite <- Case3 in goal at 0(rank:26.)
case any_eq (string3) (string1)(rank:11.)
=================================================
Progress: 254


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 255


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 256


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case string_eq (string3) (string1)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 257


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 258


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 21
Tactic List : 8
case string_eq (string3) (string2)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 1(rank:17.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Case2 in goal at 1(rank:17.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 2(rank:25.)
=================================================
Progress: 259


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:10.)
=================================================
Progress: 260


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 261


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 262


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 263


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 264


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 11
rewrite <- Case2 in goal at 0(rank:10.)
rewrite Cond1 in goal at 0(rank:18.)
rewrite Case2 in goal at 0(rank:26.)
rewrite Case2 in goal at 1(rank:26.)
rewrite Case2 in goal at 2(rank:26.)
rewrite Case2 in goal at 3(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 1(rank:10.)
rewrite <- Case2 in goal at 2(rank:10.)
rewrite <- Case3 in goal at 0(rank:26.)
case any_eq (string3) (string1)(rank:11.)
=================================================
Progress: 265


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 266


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 267


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case string_eq (string3) (string1)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 268


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 269


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 21
Tactic List : 8
case string_eq (string3) (string2)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 1(rank:17.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Case2 in goal at 1(rank:17.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 2(rank:25.)
=================================================
Progress: 270


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:10.)
=================================================
Progress: 271


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 272


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 11.)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 273


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 274


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 275


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 276


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 277


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 278


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 279


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 280


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 281


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 282


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 283


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 284


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 285


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11.)
=================================================
Progress: 286


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 287


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 288


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 289


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 290


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string2) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
case any_eq (string3) (string2)(rank:12.)
=================================================
Progress: 291


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 292


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 293


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string2) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
case any_eq (string3) (string2)(rank:12.)
=================================================
Progress: 294


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 11.)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:11.)
=================================================
Progress: 295


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string2) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
case any_eq (string3) (string2)(rank:12.)
=================================================
Progress: 296


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 297


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 298


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string2) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
case any_eq (string3) (string2)(rank:12.)
=================================================
Progress: 299


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 11.)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: string_eq ("boi") ("atn") = true
Prop: string_eq ("fcz") ("reh") = true
Prop: string_eq ("rlb") ("jux") = true
Lemma List
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
End of Lemma List


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 300


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true(rank : 0.)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:13.)
=================================================
Progress: 301


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 302


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string3)(rank:13.)
rewrite <- Case1 in goal at 2(rank:20.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 1(rank:28.)
=================================================
Progress: 303


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 304


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 305


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 306


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 307


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 308


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string3)(rank:13.)
rewrite <- Case1 in goal at 2(rank:20.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 1(rank:28.)
=================================================
Progress: 309


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 310


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string3)(rank:13.)
rewrite <- Case1 in goal at 2(rank:20.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 1(rank:28.)
=================================================
Progress: 311


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 312


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 313


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 314


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 315


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 316


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string3)(rank:13.)
rewrite <- Case1 in goal at 2(rank:20.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 1(rank:28.)
=================================================
Progress: 317


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12.)
rewrite <- Case1 in goal at 1(rank:12.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 318


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 319


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 320


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 321


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 322


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12.)
rewrite <- Case1 in goal at 1(rank:12.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 323


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12.)
rewrite <- Case1 in goal at 1(rank:12.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 324


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 325


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 326


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 327


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 328


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12.)
rewrite <- Case1 in goal at 1(rank:12.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 329


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 330


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 331


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:13.)
=================================================
Progress: 332


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 333


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 334


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:13.)
=================================================
Progress: 335


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 336


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 337


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:13.)
=================================================
Progress: 338


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 339


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 340


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:13.)
=================================================
Progress: 341


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 342


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case string_eq (string3) (string2)(rank:12.)
case string_eq (string1) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 343


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 344


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case string_eq (string3) (string2)(rank:12.)
case string_eq (string1) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 345


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 346


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case string_eq (string3) (string2)(rank:12.)
case string_eq (string1) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 347


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 348


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case string_eq (string3) (string2)(rank:12.)
case string_eq (string1) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 349


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 350


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 351


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 352


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 353


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 354


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 355


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 356


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 357


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
=================================================
Progress: 358


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 359


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
=================================================
Progress: 360


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 361


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
=================================================
Progress: 362


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 363


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
=================================================
Progress: 364


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 365


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 366


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 367


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 368


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 369


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 370


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 371


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 372


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 373


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 374


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 375


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 376


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 377


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 13.)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:13.)
=================================================
Progress: 378


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 379


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 380


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
=================================================
Progress: 381


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 382


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 383


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
=================================================
Progress: 384


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 385


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 386


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
=================================================
Progress: 387


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 388


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 389


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
=================================================
Progress: 390


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 391


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 392


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 393


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 11
rewrite <- Case2 in goal at 0(rank:12.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
rewrite <- Case3 in goal at 0(rank:28.)
case any_eq (string3) (string1)(rank:13.)
=================================================
Progress: 394


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 395


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 396


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string3) (string1)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 397


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 398


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 21
Tactic List : 8
case string_eq (string3) (string2)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 1(rank:19.)
rewrite <- Case1 in goal at 2(rank:27.)
rewrite <- Case2 in goal at 1(rank:19.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 2(rank:27.)
=================================================
Progress: 399


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 400


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
=================================================
Progress: 401


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 402


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 403


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 404


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 11
rewrite <- Case2 in goal at 0(rank:12.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
rewrite <- Case3 in goal at 0(rank:28.)
case any_eq (string3) (string1)(rank:13.)
=================================================
Progress: 405


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 406


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 407


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string3) (string1)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 408


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 409


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 21
Tactic List : 8
case string_eq (string3) (string2)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 1(rank:19.)
rewrite <- Case1 in goal at 2(rank:27.)
rewrite <- Case2 in goal at 1(rank:19.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 2(rank:27.)
=================================================
Progress: 410


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 411


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
=================================================
Progress: 412


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 413


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 414


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 415


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 11
rewrite <- Case2 in goal at 0(rank:12.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
rewrite <- Case3 in goal at 0(rank:28.)
case any_eq (string3) (string1)(rank:13.)
=================================================
Progress: 416


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 417


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 418


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string3) (string1)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 419


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 420


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 21
Tactic List : 8
case string_eq (string3) (string2)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 1(rank:19.)
rewrite <- Case1 in goal at 2(rank:27.)
rewrite <- Case2 in goal at 1(rank:19.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 2(rank:27.)
=================================================
Progress: 421


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 422


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
=================================================
Progress: 423


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 424


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 425


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 426


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 11
rewrite <- Case2 in goal at 0(rank:12.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
rewrite <- Case3 in goal at 0(rank:28.)
case any_eq (string3) (string1)(rank:13.)
=================================================
Progress: 427


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 428


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 429


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string3) (string1)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 430


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 431


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 21
Tactic List : 8
case string_eq (string3) (string2)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 1(rank:19.)
rewrite <- Case1 in goal at 2(rank:27.)
rewrite <- Case2 in goal at 1(rank:19.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 2(rank:27.)
=================================================
Progress: 432


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 433


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
=================================================
Progress: 434


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 13.)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 435


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 436


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 437


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 438


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 439


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 440


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 441


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 442


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 443


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 444


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:13.)
=================================================
Progress: 445


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 13.)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: string_eq ("iog") ("lyj") = true
Prop: string_eq ("hlm") ("ccv") = true
Prop: string_eq ("ixj") ("ckf") = true
=================================================
Progress: 446


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 447


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 448


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 449


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 450


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 451


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7.)
=================================================
Progress: 452


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("fdo") ("rnb") = true
Prop: string_eq ("cco") ("abs") = true
Prop: string_eq ("cke") ("syp") = true
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
reflexivity
=================================================
Progress: 453


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 454


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 455


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 456


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case string_eq (string1) (string2)(rank:8.)
rewrite Cond1 in goal at 0(rank:15.)
case any_eq (string2) (string1)(rank:8.)
=================================================
Progress: 457


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8.)
=================================================
Progress: 458


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (string2) (string1)(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : any_eq (string2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string2)(rank:9.)
rewrite <- Case1 in goal at 2(rank:16.)
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Case1 in goal at 1(rank:24.)
=================================================
Progress: 459


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:8.)
rewrite <- Case1 in goal at 1(rank:8.)
rewrite Case1 in goal at 0(rank:24.)
rewrite Case1 in goal at 1(rank:24.)
rewrite Case1 in goal at 2(rank:24.)
rewrite Case1 in goal at 3(rank:24.)
rewrite <- Case1 in goal at 2(rank:8.)
case string_eq (string2) (string1)(rank:9.)
rewrite Cond1 in goal at 0(rank:16.)
=================================================
Progress: 460


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 461


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 462


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("baz") ("gpk") then false else true then ("gpk"::filter (aux ("gpk")) ((Nil))) else filter (aux ("gpk")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("cmc") ("lix") then false else true then ("lix"::filter (aux ("lix")) ((Nil))) else filter (aux ("lix")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("olc") ("dsv") then false else true then ("dsv"::filter (aux ("dsv")) ((Nil))) else filter (aux ("dsv")) ((Nil))) ((Nil))
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("dfd") ("adb") then false else true then ("dfd"::filter (aux ("adb")) ((Nil))) else filter (aux ("adb")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("zye") ("hus") then false else true then ("zye"::filter (aux ("hus")) ((Nil))) else filter (aux ("hus")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("nei") ("paa") then false else true then ("nei"::filter (aux ("paa")) ((Nil))) else filter (aux ("paa")) ((Nil))) ((Nil))
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("nlx") ("zdw") then false else true then ("nlx"::filter (aux ("zdw")) ((Nil))) else filter (aux ("zdw")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("zeo") ("zkj") then false else true then ("zeo"::filter (aux ("zkj")) ((Nil))) else filter (aux ("zkj")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("czq") ("gfd") then false else true then ("czq"::filter (aux ("gfd")) ((Nil))) else filter (aux ("gfd")) ((Nil))) ((Nil))
=================================================
Progress: 463


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 464


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case string_eq (string2) (string1)(rank:8.)
rewrite Cond1 in goal at 0(rank:15.)
rewrite <- Case1 in goal at 0(rank:23.)
rewrite <- Case1 in goal at 1(rank:15.)
rewrite <- Case1 in goal at 2(rank:23.)
=================================================
Progress: 465


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 466


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:8.)
=================================================
Progress: 467


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite Case2 in goal at 0(rank:24.)
=================================================
Progress: 468


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 469


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 470


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = false
---------------------------------------
false = false

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 471


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = false
---------------------------------------
false = false

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 9
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 472


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:6.)
=================================================
Progress: 473


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 6.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6.)
=================================================
Progress: 474


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6.)
=================================================
Progress: 475


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("gfa")) (("llc"::("nhd"::(Nil)))) = true
Prop: sub_check_ta1 (P ("ttc") (V ("ypy"))) (("ynh"::("amb"::(Nil)))) = true
Prop: sub_check_ta1 (P ("pza") (C (C (V ("baq")) (V ("rqd"))) (P ("mlp") (P ("nkr") (V ("pgw")))))) (("fwt"::("zpl"::(Nil)))) = true
previous tactics
simpl in goal
intro string1
intro Cond1
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("bqt")) (("uqd"::("ncb"::(Nil)))) = list_eq (filter (aux ("ncb")) (filter (aux ("uqd")) (getStn (V ("bqt"))))) ((Nil))
Prop: sub_check_ta1 (V ("hzb")) (("aty"::("gip"::(Nil)))) = list_eq (filter (aux ("gip")) (filter (aux ("aty")) (getStn (V ("hzb"))))) ((Nil))
Prop: sub_check_ta1 (P ("fzs") (V ("oaa"))) (("kko"::("mew"::(Nil)))) = list_eq (filter (aux ("mew")) (filter (aux ("kko")) (getStn (P ("fzs") (V ("oaa")))))) ((Nil))
=================================================
Progress: 476


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 477


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 478


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 479


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:10.)
=================================================
Progress: 480


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 481


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9.)
=================================================
Progress: 482


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("wsf") ("qee") = true
Prop: string_eq ("iji") ("aca") = true
Prop: string_eq ("vtg") ("trz") = true
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
reflexivity
=================================================
Progress: 483


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 484


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 485


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 486


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case string_eq (string1) (string2)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
case any_eq (string2) (string1)(rank:10.)
=================================================
Progress: 487


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 488


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string2) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : any_eq (string2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string2)(rank:11.)
rewrite <- Case1 in goal at 2(rank:18.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 1(rank:26.)
=================================================
Progress: 489


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Case1 in goal at 1(rank:10.)
rewrite Case1 in goal at 0(rank:26.)
rewrite Case1 in goal at 1(rank:26.)
rewrite Case1 in goal at 2(rank:26.)
rewrite Case1 in goal at 3(rank:26.)
rewrite <- Case1 in goal at 2(rank:10.)
case string_eq (string2) (string1)(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
=================================================
Progress: 490


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 491


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 492


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("aky") ("muf") then false else true then ("muf"::filter (aux ("muf")) ((Nil))) else filter (aux ("muf")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("lnz") ("odz") then false else true then ("odz"::filter (aux ("odz")) ((Nil))) else filter (aux ("odz")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("bsd") ("arv") then false else true then ("arv"::filter (aux ("arv")) ((Nil))) else filter (aux ("arv")) ((Nil))) ((Nil))
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("bnr") ("vjq") then false else true then ("bnr"::filter (aux ("vjq")) ((Nil))) else filter (aux ("vjq")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("jns") ("niu") then false else true then ("jns"::filter (aux ("niu")) ((Nil))) else filter (aux ("niu")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("ytm") ("bpa") then false else true then ("ytm"::filter (aux ("bpa")) ((Nil))) else filter (aux ("bpa")) ((Nil))) ((Nil))
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("tya") ("rof") then false else true then ("tya"::filter (aux ("rof")) ((Nil))) else filter (aux ("rof")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("ldg") ("ujd") then false else true then ("ldg"::filter (aux ("ujd")) ((Nil))) else filter (aux ("ujd")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("ynr") ("mra") then false else true then ("ynr"::filter (aux ("mra")) ((Nil))) else filter (aux ("mra")) ((Nil))) ((Nil))
=================================================
Progress: 493


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 494


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case string_eq (string2) (string1)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:17.)
rewrite <- Case1 in goal at 2(rank:25.)
=================================================
Progress: 495


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 496


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:10.)
=================================================
Progress: 497


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:10.)
rewrite Case2 in goal at 0(rank:26.)
=================================================
Progress: 498


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 499


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 500


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = false
---------------------------------------
false = false

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 1
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 501


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = false
---------------------------------------
false = false

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 9
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 502


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:8.)
=================================================
Progress: 503


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 504


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:8.)
=================================================
Progress: 505


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("jvh")) (("pmr"::("bdt"::(Nil)))) = true
Prop: sub_check_ta1 (P ("cwn") (V ("fws"))) (("awv"::("nkv"::(Nil)))) = true
Prop: sub_check_ta1 (V ("qke")) (("mbr"::("log"::(Nil)))) = true
previous tactics
simpl in goal
intro string1
intro Cond1
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("oyo")) (("agf"::("vyj"::(Nil)))) = list_eq (filter (aux ("vyj")) (filter (aux ("agf")) (getStn (V ("oyo"))))) ((Nil))
Prop: sub_check_ta1 (V ("fmx")) (("ysv"::("din"::(Nil)))) = list_eq (filter (aux ("din")) (filter (aux ("ysv")) (getStn (V ("fmx"))))) ((Nil))
Prop: sub_check_ta1 (V ("max")) (("nkb"::("efn"::(Nil)))) = list_eq (filter (aux ("efn")) (filter (aux ("nkb")) (getStn (V ("max"))))) ((Nil))
=================================================
Progress: 506


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 507


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 508


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 509


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case string_eq (string1) (string2)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
case any_eq (string2) (string1)(rank:10.)
=================================================
Progress: 510


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 511


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string2) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : any_eq (string2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string2)(rank:11.)
rewrite <- Case1 in goal at 2(rank:18.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 1(rank:26.)
=================================================
Progress: 512


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Case1 in goal at 1(rank:10.)
rewrite Case1 in goal at 0(rank:26.)
rewrite Case1 in goal at 1(rank:26.)
rewrite Case1 in goal at 2(rank:26.)
rewrite Case1 in goal at 3(rank:26.)
rewrite <- Case1 in goal at 2(rank:10.)
case string_eq (string2) (string1)(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
=================================================
Progress: 513


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 514


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 515


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("nuk") ("ocl") then false else true then ("ocl"::filter (aux ("ocl")) ((Nil))) else filter (aux ("ocl")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("lra") ("syj") then false else true then ("syj"::filter (aux ("syj")) ((Nil))) else filter (aux ("syj")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("dyq") ("qif") then false else true then ("qif"::filter (aux ("qif")) ((Nil))) else filter (aux ("qif")) ((Nil))) ((Nil))
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("xof") ("gyb") then false else true then ("xof"::filter (aux ("gyb")) ((Nil))) else filter (aux ("gyb")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("qhh") ("sfe") then false else true then ("qhh"::filter (aux ("sfe")) ((Nil))) else filter (aux ("sfe")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("kkq") ("ooo") then false else true then ("kkq"::filter (aux ("ooo")) ((Nil))) else filter (aux ("ooo")) ((Nil))) ((Nil))
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (if if string_eq ("nnj") ("emn") then false else true then ("nnj"::filter (aux ("emn")) ((Nil))) else filter (aux ("emn")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("wsw") ("vmn") then false else true then ("wsw"::filter (aux ("vmn")) ((Nil))) else filter (aux ("vmn")) ((Nil))) ((Nil))
Prop: true = list_eq (if if string_eq ("akv") ("nbq") then false else true then ("akv"::filter (aux ("nbq")) ((Nil))) else filter (aux ("nbq")) ((Nil))) ((Nil))
=================================================
Progress: 516


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 517


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case string_eq (string2) (string1)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:17.)
rewrite <- Case1 in goal at 2(rank:25.)
=================================================
Progress: 518


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 519


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:10.)
=================================================
Progress: 520


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:10.)
rewrite Case2 in goal at 0(rank:26.)
=================================================
Progress: 521


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 522


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 523


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = false
---------------------------------------
false = false

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 1
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 524


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = false
---------------------------------------
false = false

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 9
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 525


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:8.)
=================================================
Progress: 526


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 527


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:8.)
=================================================
Progress: 528


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("goy")) (("aqh"::("cna"::(Nil)))) = true
Prop: sub_check_ta1 (C (V ("frg")) (V ("goe"))) (("mna"::("ysj"::(Nil)))) = true
Prop: sub_check_ta1 (V ("qjv")) (("hpv"::("xlw"::(Nil)))) = true
previous tactics
simpl in goal
intro string1
intro Cond1
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("quv")) (("fmx"::("dzb"::(Nil)))) = list_eq (filter (aux ("dzb")) (filter (aux ("fmx")) (getStn (V ("quv"))))) ((Nil))
Prop: sub_check_ta1 (V ("fre")) (("zve"::("ioz"::(Nil)))) = list_eq (filter (aux ("ioz")) (filter (aux ("zve")) (getStn (V ("fre"))))) ((Nil))
Prop: sub_check_ta1 (V ("kbc")) (("izv"::("vzo"::(Nil)))) = list_eq (filter (aux ("vzo")) (filter (aux ("izv")) (getStn (V ("kbc"))))) ((Nil))
=================================================
Progress: 529


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 530


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 531


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 532


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:10.)
=================================================
Progress: 533


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 534


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9.)
=================================================
Progress: 535


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("gzp") ("hjj") = true
Prop: string_eq ("kis") ("oxt") = true
Prop: string_eq ("bla") ("lue") = true
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
reflexivity
=================================================
Progress: 536


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 537


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 538


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 539


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 540


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case string_eq (string2) (string3)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
case any_eq (string3) (string2)(rank:10.)
=================================================
Progress: 541


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 542


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string3)(rank:11.)
rewrite <- Case1 in goal at 2(rank:18.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 1(rank:26.)
=================================================
Progress: 543


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Case1 in goal at 1(rank:10.)
rewrite Case1 in goal at 0(rank:26.)
rewrite Case1 in goal at 1(rank:26.)
rewrite Case1 in goal at 2(rank:26.)
rewrite Case1 in goal at 3(rank:26.)
rewrite <- Case1 in goal at 2(rank:10.)
case string_eq (string3) (string2)(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
=================================================
Progress: 544


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 545


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 546


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:11.)
=================================================
Progress: 547


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 548


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case string_eq (string3) (string2)(rank:10.)
case string_eq (string1) (string3)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:25.)
=================================================
Progress: 549


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 550


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 551


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:11.)
rewrite Case2 in goal at 2(rank:26.)
rewrite Case2 in goal at 0(rank:26.)
rewrite Case2 in goal at 1(rank:26.)
=================================================
Progress: 552


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:10.)
rewrite <- Case2 in goal at 1(rank:10.)
rewrite <- Case2 in goal at 2(rank:10.)
case string_eq (string3) (string2)(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
rewrite Case2 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 553


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 554


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 555


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 556


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 557


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 558


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:11.)
rewrite Case1 in goal at 2(rank:26.)
rewrite Case1 in goal at 0(rank:26.)
rewrite Case1 in goal at 1(rank:26.)
=================================================
Progress: 559


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 560


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 561


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 562


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 11
rewrite <- Case2 in goal at 0(rank:10.)
rewrite Cond1 in goal at 0(rank:18.)
rewrite Case2 in goal at 0(rank:26.)
rewrite Case2 in goal at 1(rank:26.)
rewrite Case2 in goal at 2(rank:26.)
rewrite Case2 in goal at 3(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 1(rank:10.)
rewrite <- Case2 in goal at 2(rank:10.)
rewrite <- Case3 in goal at 0(rank:26.)
case any_eq (string3) (string1)(rank:11.)
=================================================
Progress: 563


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 564


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 565


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case string_eq (string3) (string1)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 566


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 567


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 21
Tactic List : 8
case string_eq (string3) (string2)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 1(rank:17.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Case2 in goal at 1(rank:17.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 2(rank:25.)
=================================================
Progress: 568


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:10.)
=================================================
Progress: 569


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 570


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 571


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 572


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 573


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 574


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 575


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 576


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10.)
=================================================
Progress: 577


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 578


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10.)
=================================================
Progress: 579


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 580


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 581


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 582


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 583


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 584


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case string_eq (string2) (string3)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
case any_eq (string3) (string2)(rank:10.)
=================================================
Progress: 585


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 586


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string3)(rank:11.)
rewrite <- Case1 in goal at 2(rank:18.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 1(rank:26.)
=================================================
Progress: 587


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Case1 in goal at 1(rank:10.)
rewrite Case1 in goal at 0(rank:26.)
rewrite Case1 in goal at 1(rank:26.)
rewrite Case1 in goal at 2(rank:26.)
rewrite Case1 in goal at 3(rank:26.)
rewrite <- Case1 in goal at 2(rank:10.)
case string_eq (string3) (string2)(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
=================================================
Progress: 588


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 589


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 590


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:11.)
=================================================
Progress: 591


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 592


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case string_eq (string3) (string2)(rank:10.)
case string_eq (string1) (string3)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:25.)
=================================================
Progress: 593


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 594


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 595


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:11.)
rewrite Case2 in goal at 2(rank:26.)
rewrite Case2 in goal at 0(rank:26.)
rewrite Case2 in goal at 1(rank:26.)
=================================================
Progress: 596


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:10.)
rewrite <- Case2 in goal at 1(rank:10.)
rewrite <- Case2 in goal at 2(rank:10.)
case string_eq (string3) (string2)(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
rewrite Case2 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 597


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 598


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 599


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 600


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 601


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 602


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:11.)
rewrite Case1 in goal at 2(rank:26.)
rewrite Case1 in goal at 0(rank:26.)
rewrite Case1 in goal at 1(rank:26.)
=================================================
Progress: 603


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 604


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 605


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 606


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 11
rewrite <- Case2 in goal at 0(rank:10.)
rewrite Cond1 in goal at 0(rank:18.)
rewrite Case2 in goal at 0(rank:26.)
rewrite Case2 in goal at 1(rank:26.)
rewrite Case2 in goal at 2(rank:26.)
rewrite Case2 in goal at 3(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 1(rank:10.)
rewrite <- Case2 in goal at 2(rank:10.)
rewrite <- Case3 in goal at 0(rank:26.)
case any_eq (string3) (string1)(rank:11.)
=================================================
Progress: 607


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 608


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 609


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case string_eq (string3) (string1)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 610


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 611


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 21
Tactic List : 8
case string_eq (string3) (string2)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 1(rank:17.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Case2 in goal at 1(rank:17.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 2(rank:25.)
=================================================
Progress: 612


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:10.)
=================================================
Progress: 613


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 614


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 615


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 616


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 617


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 618


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 619


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10.)
=================================================
Progress: 620


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 621


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10.)
=================================================
Progress: 622


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 623


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 624


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10.)
=================================================
Progress: 625


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 626


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 627


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10.)
=================================================
Progress: 628


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 629


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 630


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:10.)
=================================================
Progress: 631


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 632


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 633


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:10.)
=================================================
Progress: 634


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 635


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 636


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 637


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:10.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 638


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:10.)
=================================================
Progress: 639


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:10.)
rewrite Case1 in goal at 0(rank:18.)
rewrite Case3 in goal at 0(rank:26.)
=================================================
Progress: 640


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 641


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 642


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 7
case any_eq (string3) (string1)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite Case1 in goal at 0(rank:25.)
rewrite Case1 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
=================================================
Progress: 643


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:18.)
rewrite <- Case4 in goal at 0(rank:18.)
=================================================
Progress: 644


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
=================================================
Progress: 645


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:10.)
=================================================
Progress: 646


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:18.)
rewrite Case3 in goal at 0(rank:26.)
=================================================
Progress: 647


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 648


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:10.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 649


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:10.)
=================================================
Progress: 650


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:10.)
rewrite Case1 in goal at 0(rank:18.)
rewrite Case3 in goal at 0(rank:26.)
=================================================
Progress: 651


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 652


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 653


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 7
case any_eq (string3) (string1)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite Case1 in goal at 0(rank:25.)
rewrite Case1 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
=================================================
Progress: 654


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:18.)
rewrite <- Case4 in goal at 0(rank:18.)
=================================================
Progress: 655


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
=================================================
Progress: 656


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:10.)
=================================================
Progress: 657


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:18.)
rewrite Case3 in goal at 0(rank:26.)
=================================================
Progress: 658


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10.)
=================================================
Progress: 659


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 660


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 661


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:10.)
=================================================
Progress: 662


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 663


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 664


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 665


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:10.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 666


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:10.)
=================================================
Progress: 667


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:10.)
rewrite Case1 in goal at 0(rank:18.)
rewrite Case3 in goal at 0(rank:26.)
=================================================
Progress: 668


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 669


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 670


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 7
case any_eq (string3) (string1)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite Case1 in goal at 0(rank:25.)
rewrite Case1 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
=================================================
Progress: 671


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:18.)
rewrite <- Case4 in goal at 0(rank:18.)
=================================================
Progress: 672


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
=================================================
Progress: 673


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:10.)
=================================================
Progress: 674


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:18.)
rewrite Case3 in goal at 0(rank:26.)
=================================================
Progress: 675


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10.)
=================================================
Progress: 676


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 677


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 678


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:10.)
=================================================
Progress: 679


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 680


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 681


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 682


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:10.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 683


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:10.)
=================================================
Progress: 684


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:10.)
rewrite Case1 in goal at 0(rank:18.)
rewrite Case3 in goal at 0(rank:26.)
=================================================
Progress: 685


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 686


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 687


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 7
case any_eq (string3) (string1)(rank:10.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite Case1 in goal at 0(rank:25.)
rewrite Case1 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
=================================================
Progress: 688


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:18.)
rewrite <- Case4 in goal at 0(rank:18.)
=================================================
Progress: 689


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
=================================================
Progress: 690


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:10.)
=================================================
Progress: 691


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:18.)
rewrite Case3 in goal at 0(rank:26.)
=================================================
Progress: 692


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:9.)
=================================================
Progress: 693


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
=================================================
Progress: 694


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:9.)
=================================================
Progress: 695


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
=================================================
Progress: 696


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:9.)
=================================================
Progress: 697


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
=================================================
Progress: 698


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:9.)
=================================================
Progress: 699


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
=================================================
Progress: 700


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:11.)
=================================================
Progress: 701


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:11.)
=================================================
Progress: 702


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:11.)
=================================================
Progress: 703


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string2 = string3
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:27.)
rewrite Case2 in goal at 0(rank:27.)
=================================================
Progress: 704


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:11.)
=================================================
Progress: 705


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:11.)
=================================================
Progress: 706


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:11.)
=================================================
Progress: 707


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string2 = string3
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:27.)
rewrite Case2 in goal at 0(rank:27.)
=================================================
Progress: 708


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:11.)
=================================================
Progress: 709


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:11.)
=================================================
Progress: 710


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:11.)
=================================================
Progress: 711


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string2 = string3
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:27.)
rewrite Case2 in goal at 0(rank:27.)
=================================================
Progress: 712


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:11.)
=================================================
Progress: 713


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:11.)
=================================================
Progress: 714


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:11.)
=================================================
Progress: 715


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string2 = string3
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:27.)
rewrite Case2 in goal at 0(rank:27.)
=================================================
Progress: 716


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
=================================================
Progress: 717


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:10.)
=================================================
Progress: 718


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:18.)
rewrite <- Case3 in goal at 0(rank:18.)
=================================================
Progress: 719


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:10.)
=================================================
Progress: 720


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:10.)
rewrite Case3 in goal at 0(rank:26.)
=================================================
Progress: 721


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 722


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 723


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case any_eq (string3) (string1)(rank:10.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 724


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:18.)
rewrite <- Case4 in goal at 0(rank:18.)
=================================================
Progress: 725


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
=================================================
Progress: 726


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:10.)
=================================================
Progress: 727


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:18.)
rewrite <- Case3 in goal at 0(rank:18.)
=================================================
Progress: 728


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:10.)
=================================================
Progress: 729


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:10.)
rewrite Case3 in goal at 0(rank:26.)
=================================================
Progress: 730


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 731


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 732


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case any_eq (string3) (string1)(rank:10.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 733


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:18.)
rewrite <- Case4 in goal at 0(rank:18.)
=================================================
Progress: 734


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
=================================================
Progress: 735


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:10.)
=================================================
Progress: 736


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:18.)
rewrite <- Case3 in goal at 0(rank:18.)
=================================================
Progress: 737


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:10.)
=================================================
Progress: 738


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:10.)
rewrite Case3 in goal at 0(rank:26.)
=================================================
Progress: 739


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 740


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 741


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case any_eq (string3) (string1)(rank:10.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 742


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:18.)
rewrite <- Case4 in goal at 0(rank:18.)
=================================================
Progress: 743


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
=================================================
Progress: 744


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:10.)
=================================================
Progress: 745


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:18.)
rewrite <- Case3 in goal at 0(rank:18.)
=================================================
Progress: 746


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:10.)
=================================================
Progress: 747


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:10.)
rewrite Case3 in goal at 0(rank:26.)
=================================================
Progress: 748


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 749


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 750


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case any_eq (string3) (string1)(rank:10.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
=================================================
Progress: 751


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:18.)
rewrite <- Case4 in goal at 0(rank:18.)
=================================================
Progress: 752


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("ksx") ("try") = string_eq ("try") ("ksx")
Prop: string_eq ("eli") ("ywf") = string_eq ("ywf") ("eli")
Prop: string_eq ("kzu") ("sef") = string_eq ("sef") ("kzu")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("cav") ("cca")
Prop: false = string_eq ("wrw") ("eso")
Prop: false = string_eq ("usk") ("okr")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("mux") ("six") = string_eq ("six") ("nlm")
Prop: string_eq ("hzv") ("bhm") = string_eq ("bhm") ("ycq")
Prop: string_eq ("sbq") ("eql") = string_eq ("eql") ("hgm")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("iep") ("jxp") = true
Prop: string_eq ("xde") ("hty") = true
Prop: string_eq ("kzt") ("jth") = true
asdf
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->string_eq (string3) (string2) = false->string_eq (string3) (string1) = true -> string_eq (string2) (string3) = string_eq (string3) (string1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 753


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->string_eq (string3) (string2) = false->string_eq (string3) (string1) = true -> string_eq (string2) (string3) = string_eq (string3) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->string_eq (string3) (string2) = false->string_eq (string3) (string1) = true -> string_eq (string2) (string3) = string_eq (string3) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->string_eq (string3) (string2) = false->string_eq (string3) (string1) = true -> string_eq (string2) (string3) = string_eq (string3) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:25.)
=================================================
Progress: 754


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:17.)
=================================================
Progress: 755


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:17.)
=================================================
Progress: 756


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:17.)
=================================================
Progress: 757


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:17.)
=================================================
Progress: 758


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:17.)
=================================================
Progress: 759


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:17.)
=================================================
Progress: 760


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:17.)
=================================================
Progress: 761


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:17.)
=================================================
Progress: 762


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:17.)
=================================================
Progress: 763


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:17.)
=================================================
Progress: 764


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : string_eq (string2) (string1) = true
---------------------------------------
false = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Cond3 at 0(rank:17.)
=================================================
Progress: 765


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Cond3 at 0(rank:17.)
=================================================
Progress: 766


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : string_eq (string2) (string1) = true
---------------------------------------
false = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Cond3 at 0(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> false = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : string2 = string1
---------------------------------------
false = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Cond2 in goal at 0(rank:25.)
rewrite Cond3 in goal at 0(rank:33.)
rewrite <- Cond3 in goal at 0(rank:33.)
=================================================
Progress: 767


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Cond3 at 0(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = string_eq (string2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite Cond3 in goal at 0(rank:25.)
rewrite Cond3 in goal at 1(rank:25.)
rewrite <- Cond3 in goal at 0(rank:25.)
rewrite <- Cond3 in goal at 1(rank:25.)
rewrite <- Cond3 in goal at 2(rank:25.)
rewrite Cond3 in goal at 2(rank:25.)
rewrite Cond2 in goal at 0(rank:33.)
=================================================
Progress: 768


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("btn") ("uip") = string_eq ("btn") ("spd")
Prop: string_eq ("ovm") ("ynm") = string_eq ("ovm") ("rzi")
Prop: string_eq ("cxi") ("udo") = string_eq ("cxi") ("tjw")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("kby") ("jtb")
Prop: false = string_eq ("aro") ("ymg")
Prop: false = string_eq ("egj") ("dch")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("cot") ("gdw") = string_eq ("gdw") ("pjh")
Prop: string_eq ("zmo") ("ctd") = string_eq ("ctd") ("sgc")
Prop: string_eq ("viv") ("uer") = string_eq ("uer") ("iwu")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("xxq") ("gep") = true
Prop: string_eq ("dvi") ("fhz") = true
Prop: string_eq ("ixd") ("yoz") = true
asdf
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->string_eq (string3) (string2) = false->string_eq (string3) (string1) = true -> string_eq (string3) (string2) = string_eq (string3) (string1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 769


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->string_eq (string3) (string2) = false->string_eq (string3) (string1) = true -> string_eq (string3) (string2) = string_eq (string3) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->string_eq (string3) (string2) = false->string_eq (string3) (string1) = true -> string_eq (string3) (string2) = string_eq (string3) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->string_eq (string3) (string2) = false->string_eq (string3) (string1) = true -> string_eq (string3) (string2) = string_eq (string3) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:25.)
=================================================
Progress: 770


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
=================================================
Progress: 771


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:10.)
=================================================
Progress: 772


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Case3 in goal at 0(rank:18.)
=================================================
Progress: 773


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("vdl") ("rlj") = string_eq ("rlj") ("vdl")
Prop: string_eq ("rnd") ("tid") = string_eq ("tid") ("rnd")
Prop: string_eq ("hnp") ("fcd") = string_eq ("fcd") ("hnp")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("ksl") ("qwg")
Prop: false = string_eq ("ihg") ("ucn")
Prop: false = string_eq ("nyb") ("cwd")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("cnr") ("vlg") = string_eq ("vlg") ("lrw")
Prop: string_eq ("qfu") ("lws") = string_eq ("lws") ("qfv")
Prop: string_eq ("tcg") ("ogj") = string_eq ("ogj") ("qxk")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("mzq") ("gjw") = true
Prop: string_eq ("itd") ("hil") = true
Prop: string_eq ("mnp") ("syq") = true
asdf
=================================================
Progress: 774


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("fxd") ("sql") = string_eq ("fxd") ("huw")
Prop: string_eq ("ctf") ("yme") = string_eq ("ctf") ("vhw")
Prop: string_eq ("aoi") ("pnd") = string_eq ("aoi") ("hbz")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("gbm") ("unx")
Prop: false = string_eq ("dip") ("efx")
Prop: false = string_eq ("djq") ("dxn")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("bns") ("avg") = string_eq ("avg") ("kbz")
Prop: string_eq ("cfi") ("hmv") = string_eq ("hmv") ("gak")
Prop: string_eq ("sds") ("qsu") = string_eq ("qsu") ("gjd")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("lpq") ("qly") = true
Prop: string_eq ("qgj") ("nfj") = true
Prop: string_eq ("gvg") ("nrm") = true
asdf
=================================================
Progress: 775


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
=================================================
Progress: 776


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:10.)
=================================================
Progress: 777


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Case3 in goal at 0(rank:18.)
=================================================
Progress: 778


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("aoi") ("qsb") = string_eq ("qsb") ("aoi")
Prop: string_eq ("raq") ("oav") = string_eq ("oav") ("raq")
Prop: string_eq ("das") ("tnm") = string_eq ("tnm") ("das")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("spr") ("bvf")
Prop: false = string_eq ("fwy") ("ycr")
Prop: false = string_eq ("rpy") ("jvr")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("xpz") ("bjk") = string_eq ("bjk") ("syd")
Prop: string_eq ("cpm") ("qbk") = string_eq ("qbk") ("kyo")
Prop: string_eq ("ucj") ("drq") = string_eq ("drq") ("iuh")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("fco") ("dll") = true
Prop: string_eq ("qpy") ("nhb") = true
Prop: string_eq ("dwz") ("qhn") = true
asdf
=================================================
Progress: 779


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("qpc") ("jzv") = string_eq ("qpc") ("cfw")
Prop: string_eq ("mmd") ("ywe") = string_eq ("mmd") ("ceg")
Prop: string_eq ("guu") ("ipx") = string_eq ("guu") ("hlg")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("kwt") ("fei")
Prop: false = string_eq ("lxi") ("wme")
Prop: false = string_eq ("emc") ("ahj")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("fkh") ("cmj") = string_eq ("cmj") ("vww")
Prop: string_eq ("asw") ("ify") = string_eq ("ify") ("qky")
Prop: string_eq ("lma") ("qei") = string_eq ("qei") ("dwa")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("xyo") ("lyx") = true
Prop: string_eq ("onl") ("frj") = true
Prop: string_eq ("qbh") ("eih") = true
asdf
=================================================
Progress: 780


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
=================================================
Progress: 781


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:10.)
=================================================
Progress: 782


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Case3 in goal at 0(rank:18.)
=================================================
Progress: 783


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("svv") ("tox") = string_eq ("tox") ("svv")
Prop: string_eq ("zeu") ("ukc") = string_eq ("ukc") ("zeu")
Prop: string_eq ("oba") ("wvc") = string_eq ("wvc") ("oba")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("pvw") ("azf")
Prop: false = string_eq ("uuf") ("jxa")
Prop: false = string_eq ("ijw") ("fzu")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("ngg") ("eep") = string_eq ("eep") ("tag")
Prop: string_eq ("uec") ("sdn") = string_eq ("sdn") ("upj")
Prop: string_eq ("ygo") ("nzz") = string_eq ("nzz") ("ebo")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("nhy") ("mhg") = true
Prop: string_eq ("fzs") ("yxs") = true
Prop: string_eq ("ugc") ("pxs") = true
asdf
=================================================
Progress: 784


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("dmh") ("pka") = string_eq ("dmh") ("lyf")
Prop: string_eq ("xbr") ("ntw") = string_eq ("xbr") ("ast")
Prop: string_eq ("jha") ("uzr") = string_eq ("jha") ("hxv")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("gxa") ("cqy")
Prop: false = string_eq ("art") ("axi")
Prop: false = string_eq ("aqd") ("tii")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("kiy") ("kkc") = string_eq ("kkc") ("rju")
Prop: string_eq ("vph") ("znq") = string_eq ("znq") ("spj")
Prop: string_eq ("txl") ("wto") = string_eq ("wto") ("wbt")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("tjh") ("jly") = true
Prop: string_eq ("cwc") ("edg") = true
Prop: string_eq ("tzf") ("njs") = true
asdf
=================================================
Progress: 785


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
=================================================
Progress: 786


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:10.)
=================================================
Progress: 787


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Case3 in goal at 0(rank:18.)
=================================================
Progress: 788


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("lru") ("atr") = string_eq ("atr") ("xex")
Prop: string_eq ("rre") ("pif") = string_eq ("pif") ("wfk")
Prop: string_eq ("mkh") ("rfh") = string_eq ("rfh") ("avt")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("muc") ("wdg")
Prop: false = string_eq ("nmm") ("kgy")
Prop: false = string_eq ("jyh") ("jfw")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("ccr") ("vyg") = string_eq ("vyg") ("ccr")
Prop: string_eq ("qgm") ("nyv") = string_eq ("nyv") ("qgm")
Prop: string_eq ("jua") ("llx") = string_eq ("llx") ("jua")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("rci") ("hxr") = true
Prop: string_eq ("luy") ("fap") = true
Prop: string_eq ("glz") ("cpq") = true
Lemma List
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 789


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true(rank : 0.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:17.)
=================================================
Progress: 790


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:17.)
=================================================
Progress: 791


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:17.)
=================================================
Progress: 792


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:17.)
=================================================
Progress: 793


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:17.)
=================================================
Progress: 794


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Cond3 at 0(rank:17.)
=================================================
Progress: 795


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Cond3 at 0(rank : 17.)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->string_eq (string2) (string1) = true -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Cond2 in goal at 0(rank:25.)
rewrite Cond3 in goal at 0(rank:33.)
rewrite <- Cond3 in goal at 0(rank:33.)
=================================================
Progress: 796


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("agr") ("jnu") = string_eq ("agr") ("ddk")
Prop: string_eq ("slw") ("oxo") = string_eq ("slw") ("dnh")
Prop: string_eq ("mqe") ("jqv") = string_eq ("mqe") ("ynd")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("dom") ("tpt")
Prop: false = string_eq ("rdu") ("wxv")
Prop: false = string_eq ("cpo") ("rdd")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("fya") ("jai") = string_eq ("jai") ("fya")
Prop: string_eq ("zjo") ("hxd") = string_eq ("hxd") ("zjo")
Prop: string_eq ("wbu") ("xhy") = string_eq ("xhy") ("wbu")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("ppb") ("mps") = true
Prop: string_eq ("rzu") ("eou") = true
Prop: string_eq ("gai") ("gai") = true
=================================================
Progress: 797


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("hwp") ("pkc") = string_eq ("pkc") ("xbg")
Prop: string_eq ("xex") ("lfl") = string_eq ("lfl") ("uak")
Prop: string_eq ("kch") ("ppd") = string_eq ("ppd") ("qkx")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("jkl") ("jhv")
Prop: false = string_eq ("ety") ("tqz")
Prop: false = string_eq ("pll") ("vkk")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("rzq") ("mtp") = string_eq ("mtp") ("rzq")
Prop: string_eq ("yro") ("jtw") = string_eq ("jtw") ("yro")
Prop: string_eq ("tte") ("oxu") = string_eq ("oxu") ("tte")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("nhc") ("dvm") = true
Prop: string_eq ("ykb") ("ejr") = true
Prop: string_eq ("aep") ("hdp") = true
=================================================
Progress: 798


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("ilm") ("sno") = string_eq ("ilm") ("qvy")
Prop: string_eq ("vag") ("fri") = string_eq ("vag") ("yfh")
Prop: string_eq ("sjt") ("oow") = string_eq ("sjt") ("psl")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("gdy") ("uvc")
Prop: false = string_eq ("ufk") ("jgu")
Prop: false = string_eq ("sqg") ("fbx")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("mth") ("nrm") = string_eq ("nrm") ("mth")
Prop: string_eq ("ghm") ("ydf") = string_eq ("ydf") ("ghm")
Prop: string_eq ("ias") ("hbp") = string_eq ("hbp") ("ias")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("jqf") ("ssg") = true
Prop: string_eq ("vwk") ("kny") = true
Prop: string_eq ("xtm") ("ujr") = true
=================================================
Progress: 799


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("upl") ("sea") = string_eq ("sea") ("qvi")
Prop: string_eq ("ytn") ("fjv") = string_eq ("fjv") ("zfv")
Prop: string_eq ("wsb") ("hvg") = string_eq ("hvg") ("neo")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("viz") ("xiy")
Prop: false = string_eq ("vrp") ("jfk")
Prop: false = string_eq ("emb") ("llk")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("ngt") ("zdl") = string_eq ("zdl") ("ngt")
Prop: string_eq ("sjx") ("wnc") = string_eq ("wnc") ("sjx")
Prop: string_eq ("lfa") ("gvk") = string_eq ("gvk") ("lfa")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("qqu") ("isx") = true
Prop: string_eq ("ccu") ("ubp") = true
Prop: string_eq ("zaw") ("ajn") = true
=================================================
Progress: 800


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("ytq") ("bxa") = string_eq ("ytq") ("flf")
Prop: string_eq ("gpe") ("tdd") = string_eq ("gpe") ("fxb")
Prop: string_eq ("jvu") ("hgb") = string_eq ("jvu") ("igz")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("yij") ("jza")
Prop: false = string_eq ("smv") ("nje")
Prop: false = string_eq ("ukt") ("hja")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("qgs") ("qqv") = string_eq ("qqv") ("qgs")
Prop: string_eq ("ahh") ("epk") = string_eq ("epk") ("ahh")
Prop: string_eq ("oke") ("gge") = string_eq ("gge") ("oke")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("qmb") ("usv") = true
Prop: string_eq ("lcl") ("zck") = true
Prop: string_eq ("svc") ("ogo") = true
=================================================
Progress: 801


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("uzf") ("rux") = string_eq ("rux") ("ddt")
Prop: string_eq ("fjt") ("whl") = string_eq ("whl") ("rsj")
Prop: string_eq ("rzg") ("nyr") = string_eq ("nyr") ("dee")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("fdy") ("pff")
Prop: false = string_eq ("uyw") ("zea")
Prop: false = string_eq ("kip") ("gct")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("abp") ("pve") = string_eq ("pve") ("abp")
Prop: string_eq ("udk") ("wdd") = string_eq ("wdd") ("udk")
Prop: string_eq ("wsw") ("txb") = string_eq ("txb") ("wsw")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("ssh") ("kkz") = true
Prop: string_eq ("jtr") ("mxg") = true
Prop: string_eq ("ocl") ("rvf") = true
=================================================
Progress: 802


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("amx") ("pae") = string_eq ("amx") ("gjl")
Prop: string_eq ("bmz") ("txr") = string_eq ("bmz") ("bhf")
Prop: string_eq ("acl") ("cmx") = string_eq ("acl") ("yao")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("xxj") ("jsv")
Prop: false = string_eq ("evn") ("ifp")
Prop: false = string_eq ("odu") ("mfg")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("scj") ("ntn") = string_eq ("ntn") ("scj")
Prop: string_eq ("jux") ("cic") = string_eq ("cic") ("jux")
Prop: string_eq ("jsn") ("ljt") = string_eq ("ljt") ("jsn")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("yhc") ("qrx") = true
Prop: string_eq ("mmv") ("izt") = true
Prop: string_eq ("nnq") ("tpv") = true
=================================================
Progress: 803


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 804


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 805


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11.)
=================================================
Progress: 806


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 807


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string2) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
case any_eq (string3) (string2)(rank:12.)
=================================================
Progress: 808


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 809


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string3)(rank:13.)
rewrite <- Case1 in goal at 2(rank:20.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 1(rank:28.)
=================================================
Progress: 810


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12.)
rewrite <- Case1 in goal at 1(rank:12.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 811


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 812


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 813


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:13.)
=================================================
Progress: 814


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 815


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case string_eq (string3) (string2)(rank:12.)
case string_eq (string1) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 816


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 817


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 818


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
=================================================
Progress: 819


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 820


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 821


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 822


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 823


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 824


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 825


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
=================================================
Progress: 826


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 827


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 828


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 829


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 11
rewrite <- Case2 in goal at 0(rank:12.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
rewrite <- Case3 in goal at 0(rank:28.)
case any_eq (string3) (string1)(rank:13.)
=================================================
Progress: 830


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 831


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 832


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string3) (string1)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 833


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 834


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 21
Tactic List : 8
case string_eq (string3) (string2)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 1(rank:19.)
rewrite <- Case1 in goal at 2(rank:27.)
rewrite <- Case2 in goal at 1(rank:19.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 2(rank:27.)
=================================================
Progress: 835


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 836


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
=================================================
Progress: 837


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 838


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 839


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 840


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 841


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11.)
=================================================
Progress: 842


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 843


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 844


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 845


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 846


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 847


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 848


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 849


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 850


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11.)
=================================================
Progress: 851


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 852


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 853


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 854


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 855


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 856


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 857


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 858


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 859


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11.)
=================================================
Progress: 860


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 861


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string2) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
case any_eq (string3) (string2)(rank:12.)
=================================================
Progress: 862


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 863


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string3)(rank:13.)
rewrite <- Case1 in goal at 2(rank:20.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 1(rank:28.)
=================================================
Progress: 864


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12.)
rewrite <- Case1 in goal at 1(rank:12.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 865


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 866


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 867


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:13.)
=================================================
Progress: 868


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 869


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case string_eq (string3) (string2)(rank:12.)
case string_eq (string1) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 870


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 871


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 872


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
=================================================
Progress: 873


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 874


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 875


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 876


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 877


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 878


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 879


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
=================================================
Progress: 880


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 881


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 882


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 883


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 11
rewrite <- Case2 in goal at 0(rank:12.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
rewrite <- Case3 in goal at 0(rank:28.)
case any_eq (string3) (string1)(rank:13.)
=================================================
Progress: 884


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 885


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 886


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string3) (string1)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 887


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 888


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 21
Tactic List : 8
case string_eq (string3) (string2)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 1(rank:19.)
rewrite <- Case1 in goal at 2(rank:27.)
rewrite <- Case2 in goal at 1(rank:19.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 2(rank:27.)
=================================================
Progress: 889


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 890


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
=================================================
Progress: 891


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 892


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 893


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 894


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11.)
=================================================
Progress: 895


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 896


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string2) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
case any_eq (string3) (string2)(rank:12.)
=================================================
Progress: 897


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 898


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string3)(rank:13.)
rewrite <- Case1 in goal at 2(rank:20.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 1(rank:28.)
=================================================
Progress: 899


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12.)
rewrite <- Case1 in goal at 1(rank:12.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 900


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 901


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 902


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:13.)
=================================================
Progress: 903


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 904


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case string_eq (string3) (string2)(rank:12.)
case string_eq (string1) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 905


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 906


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 907


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
=================================================
Progress: 908


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 909


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 910


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 911


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 912


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 913


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 914


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
=================================================
Progress: 915


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 916


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 917


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 918


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 11
rewrite <- Case2 in goal at 0(rank:12.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
rewrite <- Case3 in goal at 0(rank:28.)
case any_eq (string3) (string1)(rank:13.)
=================================================
Progress: 919


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 920


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 921


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string3) (string1)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 922


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 923


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 21
Tactic List : 8
case string_eq (string3) (string2)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 1(rank:19.)
rewrite <- Case1 in goal at 2(rank:27.)
rewrite <- Case2 in goal at 1(rank:19.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 2(rank:27.)
=================================================
Progress: 924


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 925


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
=================================================
Progress: 926


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 927


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 928


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 929


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11.)
=================================================
Progress: 930


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 931


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 932


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 933


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 934


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 935


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 936


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 937


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11.)
=================================================
Progress: 938


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 939


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 940


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 941


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 942


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 943


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 944


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 945


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11.)
=================================================
Progress: 946


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 947


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string2) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
case any_eq (string3) (string2)(rank:12.)
=================================================
Progress: 948


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 949


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string3)(rank:13.)
rewrite <- Case1 in goal at 2(rank:20.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 1(rank:28.)
=================================================
Progress: 950


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12.)
rewrite <- Case1 in goal at 1(rank:12.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 951


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 952


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 953


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:13.)
=================================================
Progress: 954


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 955


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case string_eq (string3) (string2)(rank:12.)
case string_eq (string1) (string3)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 956


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 957


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 958


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
=================================================
Progress: 959


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
case string_eq (string3) (string2)(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 960


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 961


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 962


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 963


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 964


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 965


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string3)(rank:13.)
rewrite Case1 in goal at 2(rank:28.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
=================================================
Progress: 966


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 967


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 968


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 969


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 11
rewrite <- Case2 in goal at 0(rank:12.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
rewrite Case2 in goal at 2(rank:28.)
rewrite Case2 in goal at 3(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 1(rank:12.)
rewrite <- Case2 in goal at 2(rank:12.)
rewrite <- Case3 in goal at 0(rank:28.)
case any_eq (string3) (string1)(rank:13.)
=================================================
Progress: 970


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 971


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 972


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string3) (string1)(rank:13.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 973


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 974


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 21
Tactic List : 8
case string_eq (string3) (string2)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 1(rank:19.)
rewrite <- Case1 in goal at 2(rank:27.)
rewrite <- Case2 in goal at 1(rank:19.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 2(rank:27.)
=================================================
Progress: 975


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 976


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
=================================================
Progress: 977


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 978


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
=================================================
Progress: 979


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 980


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 981


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 982


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 983


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 984


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 985


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 986


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 987


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 988


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 989


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 990


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 991


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 992


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 993


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 994


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 995


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 996


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 997


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 998


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 999


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1000


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 1001


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 1002


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1003


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1004


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1005


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1006


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case1 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1007


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1008


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1009


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 7
case any_eq (string3) (string1)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 1(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1010


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1011


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 1012


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1013


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1014


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1015


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1016


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1017


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case1 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1018


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1019


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1020


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 7
case any_eq (string3) (string1)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 1(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1021


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1022


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 1023


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1024


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1025


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1026


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1027


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1028


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case1 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1029


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1030


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1031


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 7
case any_eq (string3) (string1)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 1(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1032


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1033


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 1034


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1035


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1036


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1037


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1038


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1039


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case1 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1040


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1041


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1042


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 7
case any_eq (string3) (string1)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 1(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1043


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1044


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 1045


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1046


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1047


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 1048


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 1049


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1050


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 1051


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 1052


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1053


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1054


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1055


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1056


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case1 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1057


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1058


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1059


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 7
case any_eq (string3) (string1)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 1(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1060


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1061


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 1062


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1063


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1064


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 1065


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 1066


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1067


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 1068


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 1069


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1070


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1071


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1072


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1073


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case1 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1074


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1075


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1076


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 7
case any_eq (string3) (string1)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 1(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1077


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1078


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 1079


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1080


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1081


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 1082


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 1083


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1084


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 1085


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 1086


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1087


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1088


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1089


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1090


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case1 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1091


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1092


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1093


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 7
case any_eq (string3) (string1)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 1(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1094


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1095


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 1096


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1097


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1098


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 1099


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12.)
=================================================
Progress: 1100


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1101


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 1102


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12.)
=================================================
Progress: 1103


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1104


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1105


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1106


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1107


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case1 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1108


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1109


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1110


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 7
case any_eq (string3) (string1)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 1(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1111


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1112


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:12.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 1113


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12.)
=================================================
Progress: 1114


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1115


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1116


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1117


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1118


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1119


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1120


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1121


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1122


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1123


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1124


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1125


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1126


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1127


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1128


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1129


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1130


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
=================================================
Progress: 1131


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13.)
=================================================
Progress: 1132


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:13.)
=================================================
Progress: 1133


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13.)
=================================================
Progress: 1134


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string2 = string3
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:29.)
rewrite Case2 in goal at 0(rank:29.)
=================================================
Progress: 1135


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13.)
=================================================
Progress: 1136


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:13.)
=================================================
Progress: 1137


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13.)
=================================================
Progress: 1138


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string3 = string2
Case2 : string2 = string3
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:29.)
rewrite Case2 in goal at 0(rank:29.)
=================================================
Progress: 1139


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13.)
=================================================
Progress: 1140


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:13.)
=================================================
Progress: 1141


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13.)
=================================================
Progress: 1142


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string2 = string3
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:29.)
rewrite Case2 in goal at 0(rank:29.)
=================================================
Progress: 1143


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13.)
=================================================
Progress: 1144


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:13.)
=================================================
Progress: 1145


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13.)
=================================================
Progress: 1146


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string2 = string3
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:29.)
rewrite Case2 in goal at 0(rank:29.)
=================================================
Progress: 1147


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13.)
=================================================
Progress: 1148


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:13.)
=================================================
Progress: 1149


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13.)
=================================================
Progress: 1150


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string2 = string3
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:29.)
rewrite Case2 in goal at 0(rank:29.)
=================================================
Progress: 1151


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13.)
=================================================
Progress: 1152


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:13.)
=================================================
Progress: 1153


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13.)
=================================================
Progress: 1154


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string2 = string3
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:29.)
rewrite Case2 in goal at 0(rank:29.)
=================================================
Progress: 1155


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13.)
=================================================
Progress: 1156


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:13.)
=================================================
Progress: 1157


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13.)
=================================================
Progress: 1158


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string2 = string3
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:29.)
rewrite Case2 in goal at 0(rank:29.)
=================================================
Progress: 1159


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13.)
=================================================
Progress: 1160


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : any_eq (string3) (string2) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = any_eq (string3) (string2)

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:13.)
=================================================
Progress: 1161


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string3) (string2) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13.)
=================================================
Progress: 1162


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string3 = string2
Case2 : string2 = string3
---------------------------------------
true = string_eq (string3) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:29.)
rewrite Case2 in goal at 0(rank:29.)
=================================================
Progress: 1163


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1164


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12.)
=================================================
Progress: 1165


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1166


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12.)
=================================================
Progress: 1167


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1168


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1169


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1170


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case any_eq (string3) (string1)(rank:12.)
rewrite <- Case3 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1171


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1172


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1173


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12.)
=================================================
Progress: 1174


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1175


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12.)
=================================================
Progress: 1176


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1177


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1178


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1179


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case any_eq (string3) (string1)(rank:12.)
rewrite <- Case3 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1180


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1181


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1182


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12.)
=================================================
Progress: 1183


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1184


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12.)
=================================================
Progress: 1185


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1186


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1187


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1188


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case any_eq (string3) (string1)(rank:12.)
rewrite <- Case3 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1189


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1190


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1191


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12.)
=================================================
Progress: 1192


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1193


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12.)
=================================================
Progress: 1194


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1195


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1196


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1197


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case any_eq (string3) (string1)(rank:12.)
rewrite <- Case3 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1198


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1199


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1200


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12.)
=================================================
Progress: 1201


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1202


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12.)
=================================================
Progress: 1203


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1204


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1205


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1206


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case any_eq (string3) (string1)(rank:12.)
rewrite <- Case3 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1207


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1208


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1209


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12.)
=================================================
Progress: 1210


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1211


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12.)
=================================================
Progress: 1212


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1213


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1214


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1215


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case any_eq (string3) (string1)(rank:12.)
rewrite <- Case3 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1216


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1217


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1218


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12.)
=================================================
Progress: 1219


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1220


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12.)
=================================================
Progress: 1221


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1222


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1223


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1224


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case any_eq (string3) (string1)(rank:12.)
rewrite <- Case3 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1225


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1226


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1227


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12.)
=================================================
Progress: 1228


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1229


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12.)
=================================================
Progress: 1230


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:12.)
rewrite Case3 in goal at 0(rank:28.)
=================================================
Progress: 1231


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12.)
=================================================
Progress: 1232


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
string_eq (string3) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1233


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string3 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case any_eq (string3) (string1)(rank:12.)
rewrite <- Case3 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 0(rank:27.)
=================================================
Progress: 1234


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:20.)
rewrite <- Case4 in goal at 0(rank:20.)
=================================================
Progress: 1235


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("ryy") ("rxt") = string_eq ("rxt") ("ryy")
Prop: string_eq ("zqj") ("hro") = string_eq ("hro") ("zqj")
Prop: string_eq ("ede") ("kdc") = string_eq ("kdc") ("ede")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("ccb") ("hre")
Prop: false = string_eq ("dze") ("nvw")
Prop: false = string_eq ("dcv") ("oen")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("rsq") ("feu") = string_eq ("feu") ("taj")
Prop: string_eq ("nmf") ("huu") = string_eq ("huu") ("rtr")
Prop: string_eq ("ied") ("wcd") = string_eq ("wcd") ("jrv")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("mtz") ("sse") = true
Prop: string_eq ("vlw") ("fzh") = true
Prop: string_eq ("sqx") ("che") = true
asdf
=================================================
Progress: 1236


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("lvr") ("gua") = string_eq ("lvr") ("aqi")
Prop: string_eq ("ecw") ("fir") = string_eq ("ecw") ("owo")
Prop: string_eq ("tkz") ("gmh") = string_eq ("tkz") ("fms")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("pzn") ("ues")
Prop: false = string_eq ("rty") ("maz")
Prop: false = string_eq ("kmh") ("bch")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("zfj") ("upg") = string_eq ("upg") ("dzb")
Prop: string_eq ("beu") ("bxr") = string_eq ("bxr") ("vla")
Prop: string_eq ("bwl") ("cvq") = string_eq ("cvq") ("nks")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("mhg") ("kpb") = true
Prop: string_eq ("mbn") ("bzq") = true
Prop: string_eq ("hap") ("tkh") = true
asdf
=================================================
Progress: 1237


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1238


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12.)
=================================================
Progress: 1239


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1240


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("myl") ("etp") = string_eq ("etp") ("myl")
Prop: string_eq ("fve") ("kdq") = string_eq ("kdq") ("fve")
Prop: string_eq ("gss") ("qxy") = string_eq ("qxy") ("gss")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("hgv") ("voe")
Prop: false = string_eq ("uhh") ("yqf")
Prop: false = string_eq ("efn") ("rsw")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("rhf") ("naz") = string_eq ("naz") ("cck")
Prop: string_eq ("ztn") ("oue") = string_eq ("oue") ("akz")
Prop: string_eq ("rvs") ("zfm") = string_eq ("zfm") ("ytm")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("ypw") ("wzs") = true
Prop: string_eq ("qat") ("cra") = true
Prop: string_eq ("qvq") ("lgf") = true
asdf
=================================================
Progress: 1241


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("kji") ("waf") = string_eq ("kji") ("jyt")
Prop: string_eq ("hgw") ("wyu") = string_eq ("hgw") ("rqk")
Prop: string_eq ("lav") ("shr") = string_eq ("lav") ("sxf")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("oor") ("mbk")
Prop: false = string_eq ("whr") ("kdh")
Prop: false = string_eq ("aag") ("eal")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("ovv") ("dey") = string_eq ("dey") ("znh")
Prop: string_eq ("txb") ("fqi") = string_eq ("fqi") ("aen")
Prop: string_eq ("nlz") ("wjw") = string_eq ("wjw") ("zsz")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("irz") ("szh") = true
Prop: string_eq ("ymv") ("zbv") = true
Prop: string_eq ("ljn") ("ktu") = true
asdf
=================================================
Progress: 1242


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1243


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12.)
=================================================
Progress: 1244


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1245


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("uxb") ("sza") = string_eq ("sza") ("uxb")
Prop: string_eq ("usk") ("zyb") = string_eq ("zyb") ("usk")
Prop: string_eq ("wfp") ("nur") = string_eq ("nur") ("wfp")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("txu") ("cjm")
Prop: false = string_eq ("qky") ("jlv")
Prop: false = string_eq ("pqy") ("kig")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("lkt") ("oec") = string_eq ("oec") ("act")
Prop: string_eq ("sup") ("ouy") = string_eq ("ouy") ("jvg")
Prop: string_eq ("xht") ("qrv") = string_eq ("qrv") ("rgx")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("ygr") ("fmq") = true
Prop: string_eq ("uxu") ("teh") = true
Prop: string_eq ("vko") ("lwp") = true
asdf
=================================================
Progress: 1246


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("hxk") ("fnn") = string_eq ("hxk") ("wlu")
Prop: string_eq ("dpc") ("pjj") = string_eq ("dpc") ("epv")
Prop: string_eq ("tko") ("ebq") = string_eq ("tko") ("ifq")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("prf") ("wml")
Prop: false = string_eq ("fqn") ("jyw")
Prop: false = string_eq ("yqp") ("kkd")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("gvo") ("aby") = string_eq ("aby") ("nom")
Prop: string_eq ("qsr") ("saf") = string_eq ("saf") ("lgr")
Prop: string_eq ("scf") ("cpz") = string_eq ("cpz") ("djh")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("zyf") ("phn") = true
Prop: string_eq ("skq") ("lbt") = true
Prop: string_eq ("caj") ("jff") = true
asdf
=================================================
Progress: 1247


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1248


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12.)
=================================================
Progress: 1249


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1250


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("pxy") ("ftn") = string_eq ("ftn") ("pxy")
Prop: string_eq ("afp") ("pqz") = string_eq ("pqz") ("afp")
Prop: string_eq ("vzc") ("cyt") = string_eq ("cyt") ("vzc")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("mll") ("rjy")
Prop: false = string_eq ("bje") ("mgo")
Prop: false = string_eq ("ggh") ("kww")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("bjd") ("whm") = string_eq ("whm") ("cqs")
Prop: string_eq ("com") ("szw") = string_eq ("szw") ("spd")
Prop: string_eq ("and") ("kiu") = string_eq ("kiu") ("ohz")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("ekd") ("urw") = true
Prop: string_eq ("kim") ("zbc") = true
Prop: string_eq ("tlc") ("uvx") = true
asdf
=================================================
Progress: 1251


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("wzv") ("vmr") = string_eq ("wzv") ("tgw")
Prop: string_eq ("nwt") ("zjh") = string_eq ("nwt") ("pgk")
Prop: string_eq ("oeg") ("ytp") = string_eq ("oeg") ("gue")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("elc") ("mzu")
Prop: false = string_eq ("lls") ("mxm")
Prop: false = string_eq ("zqt") ("ptm")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("hwd") ("fqa") = string_eq ("fqa") ("uhy")
Prop: string_eq ("buf") ("jwv") = string_eq ("jwv") ("obe")
Prop: string_eq ("eub") ("fmu") = string_eq ("fmu") ("tec")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("yao") ("icl") = true
Prop: string_eq ("xff") ("ysz") = true
Prop: string_eq ("tug") ("sks") = true
asdf
=================================================
Progress: 1252


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1253


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12.)
=================================================
Progress: 1254


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1255


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("ssg") ("umu") = string_eq ("umu") ("ssg")
Prop: string_eq ("kmq") ("bkt") = string_eq ("bkt") ("kmq")
Prop: string_eq ("tqj") ("rtk") = string_eq ("rtk") ("tqj")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("nry") ("vuj")
Prop: false = string_eq ("xtu") ("skw")
Prop: false = string_eq ("fsc") ("gkr")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("rrq") ("ztx") = string_eq ("ztx") ("iea")
Prop: string_eq ("ftt") ("grz") = string_eq ("grz") ("zin")
Prop: string_eq ("vdo") ("qxk") = string_eq ("qxk") ("zni")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("vth") ("bdf") = true
Prop: string_eq ("liz") ("ukg") = true
Prop: string_eq ("ymv") ("oyx") = true
asdf
=================================================
Progress: 1256


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("vzx") ("oni") = string_eq ("vzx") ("viz")
Prop: string_eq ("yaf") ("tdk") = string_eq ("yaf") ("dby")
Prop: string_eq ("euk") ("emb") = string_eq ("euk") ("qzc")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("zvx") ("uls")
Prop: false = string_eq ("kfa") ("xjz")
Prop: false = string_eq ("nyw") ("bhc")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("iad") ("nbb") = string_eq ("nbb") ("idy")
Prop: string_eq ("jds") ("sxe") = string_eq ("sxe") ("awq")
Prop: string_eq ("agf") ("iqp") = string_eq ("iqp") ("lpm")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("iwk") ("uze") = true
Prop: string_eq ("qdy") ("hfa") = true
Prop: string_eq ("yup") ("aha") = true
asdf
=================================================
Progress: 1257


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1258


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12.)
=================================================
Progress: 1259


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1260


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("qqv") ("yst") = string_eq ("yst") ("qqv")
Prop: string_eq ("ycb") ("xtg") = string_eq ("xtg") ("ycb")
Prop: string_eq ("fpx") ("cyk") = string_eq ("cyk") ("fpx")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("pgq") ("oyx")
Prop: false = string_eq ("flh") ("gfl")
Prop: false = string_eq ("zki") ("qxj")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("nnq") ("vmy") = string_eq ("vmy") ("osl")
Prop: string_eq ("pvy") ("jgl") = string_eq ("jgl") ("ddc")
Prop: string_eq ("gax") ("eqa") = string_eq ("eqa") ("raf")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("hwf") ("lmi") = true
Prop: string_eq ("mwh") ("dfj") = true
Prop: string_eq ("out") ("hze") = true
asdf
=================================================
Progress: 1261


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("pdj") ("pvt") = string_eq ("pdj") ("rmp")
Prop: string_eq ("gtn") ("elr") = string_eq ("gtn") ("mbn")
Prop: string_eq ("hwk") ("ypf") = string_eq ("hwk") ("vzc")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("rcx") ("efl")
Prop: false = string_eq ("nan") ("bxd")
Prop: false = string_eq ("gvk") ("ubk")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("jut") ("sry") = string_eq ("sry") ("vwi")
Prop: string_eq ("mvx") ("xlk") = string_eq ("xlk") ("nby")
Prop: string_eq ("wpd") ("jti") = string_eq ("jti") ("mkj")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("yiy") ("ypd") = true
Prop: string_eq ("ikh") ("bpl") = true
Prop: string_eq ("rof") ("zff") = true
asdf
=================================================
Progress: 1262


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1263


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12.)
=================================================
Progress: 1264


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1265


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("vdl") ("rbs") = string_eq ("rbs") ("vdl")
Prop: string_eq ("qsy") ("wee") = string_eq ("wee") ("qsy")
Prop: string_eq ("aty") ("suj") = string_eq ("suj") ("aty")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("ujw") ("sum")
Prop: false = string_eq ("mpn") ("bav")
Prop: false = string_eq ("uoh") ("ohd")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("ypg") ("vxl") = string_eq ("vxl") ("iaj")
Prop: string_eq ("tdx") ("frq") = string_eq ("frq") ("ehk")
Prop: string_eq ("sqq") ("smn") = string_eq ("smn") ("srq")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("exu") ("qif") = true
Prop: string_eq ("otz") ("jjw") = true
Prop: string_eq ("kep") ("thb") = true
asdf
=================================================
Progress: 1266


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("igh") ("zfn") = string_eq ("igh") ("grv")
Prop: string_eq ("kzr") ("zbc") = string_eq ("kzr") ("lsa")
Prop: string_eq ("sht") ("rah") = string_eq ("sht") ("kci")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("wvm") ("jau")
Prop: false = string_eq ("uwq") ("qwx")
Prop: false = string_eq ("ypz") ("hei")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("hem") ("gha") = string_eq ("gha") ("htk")
Prop: string_eq ("slc") ("prj") = string_eq ("prj") ("sks")
Prop: string_eq ("xjt") ("aak") = string_eq ("aak") ("ogu")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("qau") ("qkq") = true
Prop: string_eq ("ilc") ("nwx") = true
Prop: string_eq ("gdy") ("ptq") = true
asdf
=================================================
Progress: 1267


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1268


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12.)
=================================================
Progress: 1269


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1270


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("qsq") ("gyl") = string_eq ("gyl") ("qsq")
Prop: string_eq ("npz") ("jbe") = string_eq ("jbe") ("npz")
Prop: string_eq ("xvl") ("kud") = string_eq ("kud") ("xvl")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("dlv") ("ejo")
Prop: false = string_eq ("cmp") ("wlz")
Prop: false = string_eq ("xml") ("foq")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("qdw") ("lug") = string_eq ("lug") ("pyr")
Prop: string_eq ("tsy") ("jnf") = string_eq ("jnf") ("nif")
Prop: string_eq ("khh") ("lno") = string_eq ("lno") ("zxa")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("tdy") ("tmi") = true
Prop: string_eq ("oym") ("xjl") = true
Prop: string_eq ("jik") ("ycp") = true
asdf
=================================================
Progress: 1271


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("gxf") ("azw") = string_eq ("gxf") ("cdo")
Prop: string_eq ("twy") ("twu") = string_eq ("twy") ("khl")
Prop: string_eq ("rjn") ("sxj") = string_eq ("rjn") ("itj")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("kdj") ("mje")
Prop: false = string_eq ("hzz") ("qrn")
Prop: false = string_eq ("odv") ("gcp")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("gij") ("mrz") = string_eq ("mrz") ("hqv")
Prop: string_eq ("zxv") ("mjq") = string_eq ("mjq") ("klo")
Prop: string_eq ("yyb") ("qxu") = string_eq ("qxu") ("vqi")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("wqk") ("cys") = true
Prop: string_eq ("scw") ("gis") = true
Prop: string_eq ("hwi") ("itn") = true
asdf
=================================================
Progress: 1272


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case3 in goal at 0(rank:28.)
rewrite <- Case4 in goal at 0(rank:28.)
=================================================
Progress: 1273


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12.)
=================================================
Progress: 1274


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string1) (string3) = any_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case3 in goal at 0(rank:20.)
=================================================
Progress: 1275


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("gin") ("zja") = string_eq ("zja") ("tlq")
Prop: string_eq ("pxm") ("gfb") = string_eq ("gfb") ("wwo")
Prop: string_eq ("nci") ("irj") = string_eq ("irj") ("ejl")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("mfu") ("tcc")
Prop: false = string_eq ("pww") ("zpf")
Prop: false = string_eq ("atb") ("ole")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("xpk") ("the") = string_eq ("the") ("xpk")
Prop: string_eq ("auu") ("csr") = string_eq ("csr") ("auu")
Prop: string_eq ("mcw") ("qfy") = string_eq ("qfy") ("mcw")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("cyv") ("jkp") = true
Prop: string_eq ("jwf") ("uvg") = true
Prop: string_eq ("mch") ("xcn") = true
=================================================
Progress: 1276


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("jix") ("yun") = string_eq ("jix") ("zmd")
Prop: string_eq ("jzm") ("yim") = string_eq ("jzm") ("ock")
Prop: string_eq ("fjn") ("yhk") = string_eq ("fjn") ("hih")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("vmp") ("yba")
Prop: false = string_eq ("wep") ("hwc")
Prop: false = string_eq ("lqt") ("ifl")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("nsp") ("met") = string_eq ("met") ("nsp")
Prop: string_eq ("gxz") ("idz") = string_eq ("idz") ("gxz")
Prop: string_eq ("bsd") ("gbu") = string_eq ("gbu") ("bsd")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("iof") ("skf") = true
Prop: string_eq ("hgo") ("gvg") = true
Prop: string_eq ("bcn") ("hxd") = true
=================================================
Progress: 1277


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("gjx") ("goo") = string_eq ("goo") ("otm")
Prop: string_eq ("cvt") ("iiz") = string_eq ("iiz") ("unk")
Prop: string_eq ("djo") ("jix") = string_eq ("jix") ("ktx")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("dpy") ("lqk")
Prop: false = string_eq ("qzt") ("puz")
Prop: false = string_eq ("zwn") ("ttj")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("fbx") ("tfe") = string_eq ("tfe") ("fbx")
Prop: string_eq ("tom") ("tmr") = string_eq ("tmr") ("tom")
Prop: string_eq ("ldd") ("zsr") = string_eq ("zsr") ("ldd")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("mgn") ("ght") = true
Prop: string_eq ("jmd") ("vuk") = true
Prop: string_eq ("pgp") ("pyn") = true
=================================================
Progress: 1278


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("htf") ("qzg") = string_eq ("htf") ("xks")
Prop: string_eq ("kyb") ("rod") = string_eq ("kyb") ("fvl")
Prop: string_eq ("ufk") ("twl") = string_eq ("ufk") ("qwc")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("ivj") ("zpo")
Prop: false = string_eq ("oyk") ("gvk")
Prop: false = string_eq ("zoh") ("zkl")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("qlu") ("lbo") = string_eq ("lbo") ("qlu")
Prop: string_eq ("bmt") ("yvb") = string_eq ("yvb") ("bmt")
Prop: string_eq ("ndh") ("vir") = string_eq ("vir") ("ndh")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("irm") ("gwj") = true
Prop: string_eq ("tcg") ("vqf") = true
Prop: string_eq ("qzj") ("prx") = true
=================================================
Progress: 1279


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("tlt") ("jcd") = string_eq ("jcd") ("gig")
Prop: string_eq ("pzv") ("fbd") = string_eq ("fbd") ("pic")
Prop: string_eq ("nwb") ("xas") = string_eq ("xas") ("cni")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("rdj") ("olo")
Prop: false = string_eq ("ljd") ("kwz")
Prop: false = string_eq ("xmx") ("xec")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("lzr") ("jxa") = string_eq ("jxa") ("lzr")
Prop: string_eq ("osx") ("eyf") = string_eq ("eyf") ("osx")
Prop: string_eq ("fvn") ("xzc") = string_eq ("xzc") ("fvn")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("bds") ("rjh") = true
Prop: string_eq ("jwk") ("mid") = true
Prop: string_eq ("boj") ("jze") = true
=================================================
Progress: 1280


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("dti") ("lrg") = string_eq ("dti") ("qah")
Prop: string_eq ("bfx") ("smm") = string_eq ("bfx") ("wva")
Prop: string_eq ("llg") ("lac") = string_eq ("llg") ("qzk")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("csg") ("eol")
Prop: false = string_eq ("zhs") ("sax")
Prop: false = string_eq ("jzc") ("epz")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("jsn") ("nna") = string_eq ("nna") ("jsn")
Prop: string_eq ("jjx") ("tzj") = string_eq ("tzj") ("jjx")
Prop: string_eq ("thn") ("eqh") = string_eq ("eqh") ("thn")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("ejw") ("fkt") = true
Prop: string_eq ("ftu") ("dsp") = true
Prop: string_eq ("ajt") ("imj") = true
=================================================
Progress: 1281


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("pri") ("hte") = string_eq ("hte") ("pwm")
Prop: string_eq ("rul") ("skc") = string_eq ("skc") ("hhh")
Prop: string_eq ("hvd") ("ldk") = string_eq ("ldk") ("zwi")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("ldq") ("xjc")
Prop: false = string_eq ("nti") ("sqi")
Prop: false = string_eq ("rht") ("reu")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("lqh") ("jhg") = string_eq ("jhg") ("lqh")
Prop: string_eq ("bbh") ("ndg") = string_eq ("ndg") ("bbh")
Prop: string_eq ("iie") ("xie") = string_eq ("xie") ("iie")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("vqs") ("hdh") = true
Prop: string_eq ("ggn") ("wth") = true
Prop: string_eq ("qnd") ("fwd") = true
=================================================
Progress: 1282


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("kan") ("qhx") = string_eq ("kan") ("ehp")
Prop: string_eq ("ung") ("uxv") = string_eq ("ung") ("xqs")
Prop: string_eq ("alc") ("evi") = string_eq ("alc") ("xxl")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("zza") ("wav")
Prop: false = string_eq ("wpp") ("mtv")
Prop: false = string_eq ("uoc") ("ooc")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("klt") ("dek") = string_eq ("dek") ("klt")
Prop: string_eq ("bph") ("vbi") = string_eq ("vbi") ("bph")
Prop: string_eq ("tlg") ("tot") = string_eq ("tot") ("tlg")
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("jdq") ("vyq") = true
Prop: string_eq ("qkq") ("rcq") = true
Prop: string_eq ("txx") ("pxq") = true
=================================================
Progress: 1283


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("kgj") ("ksz") = string_eq ("ksz") ("whv")
Prop: string_eq ("bwz") ("emg") = string_eq ("emg") ("nuz")
Prop: string_eq ("ndg") ("ywz") = string_eq ("ywz") ("uwa")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("dai") ("fat")
Prop: false = string_eq ("exs") ("rii")
Prop: false = string_eq ("sap") ("mvl")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("hfe") ("whb") = string_eq ("whb") ("hfe")
Prop: string_eq ("ndm") ("bjo") = string_eq ("bjo") ("ndm")
Prop: string_eq ("qfa") ("hpv") = string_eq ("hpv") ("qfa")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("wju") ("qzw") = true
Prop: string_eq ("trd") ("bpe") = true
Prop: string_eq ("zvp") ("uoy") = true
=================================================
Progress: 1284


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("oqf") ("low") = string_eq ("oqf") ("vqw")
Prop: string_eq ("jux") ("hnm") = string_eq ("jux") ("jgy")
Prop: string_eq ("ymb") ("abq") = string_eq ("ymb") ("ago")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("ybw") ("dkz")
Prop: false = string_eq ("ixh") ("nct")
Prop: false = string_eq ("jje") ("jle")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("uim") ("mhw") = string_eq ("mhw") ("uim")
Prop: string_eq ("vxm") ("ffd") = string_eq ("ffd") ("vxm")
Prop: string_eq ("pzo") ("cqa") = string_eq ("cqa") ("pzo")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("wty") ("vvn") = true
Prop: string_eq ("cjj") ("qkw") = true
Prop: string_eq ("tsf") ("leh") = true
=================================================
Progress: 1285


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("cqc") ("vri") = string_eq ("vri") ("upk")
Prop: string_eq ("teu") ("igi") = string_eq ("igi") ("ipc")
Prop: string_eq ("esp") ("frh") = string_eq ("frh") ("txr")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("lfo") ("jcx")
Prop: false = string_eq ("fvf") ("sid")
Prop: false = string_eq ("axl") ("poc")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("ljn") ("mod") = string_eq ("mod") ("ljn")
Prop: string_eq ("dik") ("huq") = string_eq ("huq") ("dik")
Prop: string_eq ("xik") ("aaw") = string_eq ("aaw") ("xik")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("zvg") ("rom") = true
Prop: string_eq ("oaf") ("flc") = true
Prop: string_eq ("hkv") ("mwq") = true
=================================================
Progress: 1286


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("hbq") ("rzr") = string_eq ("hbq") ("joh")
Prop: string_eq ("oal") ("wtt") = string_eq ("oal") ("vgm")
Prop: string_eq ("vbl") ("lin") = string_eq ("vbl") ("gkc")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("tmo") ("fnc")
Prop: false = string_eq ("qhz") ("kgb")
Prop: false = string_eq ("qjz") ("kue")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("fki") ("mmz") = string_eq ("mmz") ("fki")
Prop: string_eq ("ojn") ("zjw") = string_eq ("zjw") ("ojn")
Prop: string_eq ("ynn") ("sgl") = string_eq ("sgl") ("ynn")
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("bpu") ("qtp") = true
Prop: string_eq ("rbt") ("lxl") = true
Prop: string_eq ("kor") ("edl") = true
=================================================
Progress: 1287


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("ihe") ("esg") = string_eq ("esg") ("bmd")
Prop: string_eq ("npf") ("qgj") = string_eq ("qgj") ("lwx")
Prop: string_eq ("mqq") ("hll") = string_eq ("hll") ("dmn")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("smy") ("qpw")
Prop: false = string_eq ("hcj") ("jbe")
Prop: false = string_eq ("ldi") ("tno")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("tsn") ("rrv") = string_eq ("rrv") ("tsn")
Prop: string_eq ("lcr") ("wnj") = string_eq ("wnj") ("lcr")
Prop: string_eq ("rvq") ("jxu") = string_eq ("jxu") ("rvq")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("lyt") ("aoj") = true
Prop: string_eq ("pig") ("uam") = true
Prop: string_eq ("xqe") ("lnx") = true
=================================================
Progress: 1288


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("bxy") ("iil") = string_eq ("bxy") ("tlp")
Prop: string_eq ("rrv") ("kxh") = string_eq ("rrv") ("gmf")
Prop: string_eq ("sfq") ("otz") = string_eq ("sfq") ("wgx")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("pen") ("fmz")
Prop: false = string_eq ("nxc") ("cdd")
Prop: false = string_eq ("rug") ("ujs")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("gkh") ("vrc") = string_eq ("vrc") ("gkh")
Prop: string_eq ("wlk") ("mnn") = string_eq ("mnn") ("wlk")
Prop: string_eq ("xsk") ("deu") = string_eq ("deu") ("xsk")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("eax") ("bej") = true
Prop: string_eq ("znk") ("rat") = true
Prop: string_eq ("cza") ("bxd") = true
=================================================
Progress: 1289


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("anx") ("zwy") = string_eq ("zwy") ("uwg")
Prop: string_eq ("edi") ("cza") = string_eq ("cza") ("zsg")
Prop: string_eq ("sos") ("cml") = string_eq ("cml") ("axa")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("hrp") ("vrw")
Prop: false = string_eq ("btc") ("pmx")
Prop: false = string_eq ("zbj") ("jet")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("xmb") ("hzn") = string_eq ("hzn") ("xmb")
Prop: string_eq ("hlt") ("xjd") = string_eq ("xjd") ("hlt")
Prop: string_eq ("smw") ("prq") = string_eq ("prq") ("smw")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("bsq") ("kto") = true
Prop: string_eq ("xen") ("sjc") = true
Prop: string_eq ("lgg") ("ovb") = true
=================================================
Progress: 1290


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
false = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : string_eq (string3) (string2) = false
Case4 : any_eq (string3) (string1) = true
---------------------------------------
string_eq (string3) (string2) = string_eq (string3) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("pea") ("vug") = string_eq ("pea") ("nhb")
Prop: string_eq ("fnb") ("rxb") = string_eq ("fnb") ("esb")
Prop: string_eq ("sei") ("nep") = string_eq ("sei") ("qia")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: false = string_eq ("ret") ("dez")
Prop: false = string_eq ("eac") ("rqv")
Prop: false = string_eq ("ylh") ("oyg")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("mwp") ("cjf") = string_eq ("cjf") ("mwp")
Prop: string_eq ("bvm") ("llf") = string_eq ("llf") ("bvm")
Prop: string_eq ("aqw") ("xhx") = string_eq ("xhx") ("aqw")
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
reflexivity
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case any_eq (string3) (string1)
validate generalize_common_subterm_goal
Prop: string_eq ("zjn") ("mgy") = true
Prop: string_eq ("fkq") ("stc") = true
Prop: string_eq ("kpm") ("jik") = true
=================================================
Progress: 1291


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("rrs") ("yvb") = true
Prop: string_eq ("lgt") ("hif") = true
Prop: string_eq ("abv") ("ezi") = true
asdf
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
=================================================
Progress: 1292


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("jjr") ("juv") = true
Prop: string_eq ("xvt") ("ssk") = true
Prop: string_eq ("hxr") ("quh") = true
asdf
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
=================================================
Progress: 1293


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("wjm") ("cdm") = true
Prop: string_eq ("mbf") ("ccx") = true
Prop: string_eq ("doj") ("skz") = true
asdf
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
=================================================
Progress: 1294


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: string_eq ("fsj") ("isw") = true
Prop: string_eq ("mqq") ("lxd") = true
Prop: string_eq ("ljh") ("lwt") = true
asdf
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
=================================================
Progress: 1295


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:10.)
case string_eq (string1) (string3)(rank:10.)
=================================================
Progress: 1296


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 1297


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:10.)
=================================================
Progress: 1298


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:10.)
rewrite <- Case2 in goal at 1(rank:10.)
rewrite Case1 in goal at 0(rank:18.)
rewrite Case2 in goal at 0(rank:18.)
rewrite Case2 in goal at 2(rank:18.)
rewrite Case2 in goal at 1(rank:26.)
rewrite <- Case2 in goal at 2(rank:10.)
rewrite <- Case2 in goal at 3(rank:10.)
case string_eq (string1) (string3)(rank:11.)
rewrite Case2 in goal at 3(rank:26.)
=================================================
Progress: 1299


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:10.)
rewrite <- Case2 in goal at 2(rank:10.)
rewrite <- Case2 in goal at 3(rank:10.)
case string_eq (string3) (string2)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
rewrite Case2 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 1(rank:10.)
=================================================
Progress: 1300


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 1301


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 1302


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string3)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 1303


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string3)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 1304


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:11.)
=================================================
Progress: 1305


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 1306


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:11.)
=================================================
Progress: 1307


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 1308


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1309


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
rewrite string_refl in goal at 0
validate generalize_common_subterm_goal
Prop: if string_eq ("pzt") ("aay") then true else is_mem_ta1 ((Nil)) ("aay") = list_eq (filter (aux ("pzt")) (if true then ("aay"::filter (aux ("rrs")) ((Nil))) else filter (aux ("rrs")) ((Nil)))) ((Nil))
Prop: if string_eq ("udk") ("kil") then true else is_mem_ta1 ((Nil)) ("kil") = list_eq (filter (aux ("udk")) (if true then ("kil"::filter (aux ("jta")) ((Nil))) else filter (aux ("jta")) ((Nil)))) ((Nil))
Prop: if string_eq ("teq") ("ktd") then true else is_mem_ta1 ((Nil)) ("ktd") = list_eq (filter (aux ("teq")) (if true then ("ktd"::filter (aux ("ord")) ((Nil))) else filter (aux ("ord")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
validate generalize_common_subterm_goal
Prop: if string_eq ("xia") ("qwx") then true else is_mem_ta1 ((Nil)) ("qwx") = list_eq (filter (aux ("xia")) (if string_eq ("qwx") ("qwx") then ("qwx"::filter (aux ("xin")) ((Nil))) else filter (aux ("xin")) ((Nil)))) ((Nil))
Prop: if string_eq ("fnl") ("xpl") then true else is_mem_ta1 ((Nil)) ("xpl") = list_eq (filter (aux ("fnl")) (if string_eq ("xpl") ("xpl") then ("xpl"::filter (aux ("ybn")) ((Nil))) else filter (aux ("ybn")) ((Nil)))) ((Nil))
Prop: if string_eq ("czu") ("etq") then true else is_mem_ta1 ((Nil)) ("etq") = list_eq (filter (aux ("czu")) (if string_eq ("etq") ("etq") then ("etq"::filter (aux ("uok")) ((Nil))) else filter (aux ("uok")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: if string_eq ("knx") ("cdx") then true else is_mem_ta1 ((Nil)) ("cdx") = list_eq (filter (aux ("knx")) (if string_eq ("lvf") ("cdx") then ("cdx"::filter (aux ("lvf")) ((Nil))) else filter (aux ("lvf")) ((Nil)))) ((Nil))
Prop: if string_eq ("etc") ("slj") then true else is_mem_ta1 ((Nil)) ("slj") = list_eq (filter (aux ("etc")) (if string_eq ("bit") ("slj") then ("slj"::filter (aux ("bit")) ((Nil))) else filter (aux ("bit")) ((Nil)))) ((Nil))
Prop: if string_eq ("yfo") ("abb") then true else is_mem_ta1 ((Nil)) ("abb") = list_eq (filter (aux ("yfo")) (if string_eq ("rpg") ("abb") then ("abb"::filter (aux ("rpg")) ((Nil))) else filter (aux ("rpg")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: if string_eq ("abw") ("byp") then true else is_mem_ta1 ((Nil)) ("byp") = list_eq (filter (aux ("abw")) (if string_eq ("fse") ("byp") then ("byp"::filter (aux ("fse")) ((Nil))) else filter (aux ("fse")) ((Nil)))) ((Nil))
Prop: if string_eq ("lym") ("fvj") then true else is_mem_ta1 ((Nil)) ("fvj") = list_eq (filter (aux ("lym")) (if string_eq ("mbh") ("fvj") then ("fvj"::filter (aux ("mbh")) ((Nil))) else filter (aux ("mbh")) ((Nil)))) ((Nil))
Prop: if string_eq ("ngo") ("nrl") then true else is_mem_ta1 ((Nil)) ("nrl") = list_eq (filter (aux ("ngo")) (if string_eq ("poj") ("nrl") then ("nrl"::filter (aux ("poj")) ((Nil))) else filter (aux ("poj")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string_eq (string3) (string2) = true -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2 -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2 -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2 -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1310


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string_eq (string3) (string2) = true -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string_eq (string3) (string2) = true -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string_eq (string3) (string2) = true -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:17.)
=================================================
Progress: 1311


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2 -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2 -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2 -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:17.)
=================================================
Progress: 1312


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2 -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2 -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2 -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:17.)
=================================================
Progress: 1313


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2 -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2 -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2 -> if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:17.)
=================================================
Progress: 1314


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case string_eq (string1) (string3)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
case any_eq (string3) (string1)(rank:11.)
rewrite Case2 in goal at 0(rank:18.)
rewrite Case2 in goal at 1(rank:26.)
rewrite Case2 in goal at 3(rank:18.)
rewrite Case2 in goal at 2(rank:26.)
=================================================
Progress: 1315


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:11.)
=================================================
Progress: 1316


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:11.)
=================================================
Progress: 1317


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:11.)
=================================================
Progress: 1318


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:11.)
=================================================
Progress: 1319


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:11.)
=================================================
Progress: 1320


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:11.)
=================================================
Progress: 1321


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:11.)
=================================================
Progress: 1322


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:11.)
=================================================
Progress: 1323


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:11.)
=================================================
Progress: 1324


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (string3) (string1)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : any_eq (string3) (string1) = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case string_eq (string1) (string3)(rank:12.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
rewrite <- Case3 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 2(rank:19.)
rewrite <- Case3 in goal at 1(rank:27.)
=================================================
Progress: 1325


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 12
rewrite <- Case2 in goal at 0(rank:11.)
rewrite <- Case2 in goal at 1(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
rewrite <- Case2 in goal at 2(rank:11.)
rewrite <- Case2 in goal at 3(rank:11.)
rewrite <- Case3 in goal at 1(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite Case3 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 0(rank:11.)
=================================================
Progress: 1326


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 11
rewrite <- Case2 in goal at 0(rank:11.)
rewrite <- Case2 in goal at 2(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case3 in goal at 0(rank:27.)
rewrite Case3 in goal at 1(rank:27.)
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 1(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 3(rank:11.)
rewrite Case3 in goal at 2(rank:27.)
=================================================
Progress: 1327


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 13
rewrite <- Case2 in goal at 0(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
rewrite Case2 in goal at 3(rank:27.)
rewrite Case3 in goal at 0(rank:27.)
rewrite Case2 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 1(rank:11.)
rewrite <- Case2 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 1(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 3(rank:11.)
rewrite <- Case3 in goal at 0(rank:11.)
=================================================
Progress: 1328


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 13
rewrite <- Case2 in goal at 0(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
rewrite Case2 in goal at 3(rank:27.)
rewrite Case3 in goal at 0(rank:27.)
rewrite Case2 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 1(rank:11.)
rewrite <- Case2 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 1(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 3(rank:11.)
rewrite <- Case3 in goal at 0(rank:11.)
=================================================
Progress: 1329


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 13
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 3(rank:11.)
case string_eq (string2) (string1)(rank:12.)
rewrite <- Case3 in goal at 1(rank:11.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
rewrite Case3 in goal at 0(rank:27.)
rewrite Case3 in goal at 1(rank:27.)
rewrite Case3 in goal at 2(rank:27.)
rewrite Case3 in goal at 3(rank:27.)
rewrite Case2 in goal at 3(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
=================================================
Progress: 1330


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:11.)
rewrite <- Case2 in goal at 1(rank:11.)
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 1(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 0(rank:27.)
rewrite <- Case2 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 3(rank:11.)
rewrite Case3 in goal at 0(rank:27.)
=================================================
Progress: 1331


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 3(rank:11.)
case string_eq (string2) (string1)(rank:12.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case3 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 1(rank:11.)
=================================================
Progress: 1332


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 0(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
rewrite <- Case3 in goal at 1(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 3(rank:11.)
rewrite Case3 in goal at 0(rank:27.)
=================================================
Progress: 1333


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 12
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
rewrite Case3 in goal at 1(rank:27.)
rewrite Case3 in goal at 2(rank:27.)
rewrite Case3 in goal at 3(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite Case3 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
case string_eq (string3) (string1)(rank:12.)
rewrite <- Case3 in goal at 1(rank:11.)
=================================================
Progress: 1334


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1335


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1336


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 3(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case3 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 1(rank:11.)
=================================================
Progress: 1337


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 3(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case3 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 1(rank:11.)
=================================================
Progress: 1338


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:11.)
rewrite <- Case2 in goal at 2(rank:11.)
rewrite <- Case2 in goal at 3(rank:11.)
case string_eq (string2) (string1)(rank:12.)
rewrite <- Case2 in goal at 1(rank:11.)
=================================================
Progress: 1339


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string2) (string1)(rank:12.)
rewrite Case2 in goal at 0(rank:27.)
=================================================
Progress: 1340


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 0(rank:27.)
=================================================
Progress: 1341


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 3(rank:11.)
case string_eq (string2) (string1)(rank:12.)
rewrite <- Case3 in goal at 1(rank:11.)
=================================================
Progress: 1342


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 3(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case3 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 1(rank:11.)
=================================================
Progress: 1343


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1344


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1345


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:11.)
rewrite <- Case2 in goal at 3(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 0(rank:27.)
=================================================
Progress: 1346


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:11.)
rewrite <- Case2 in goal at 3(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 0(rank:27.)
=================================================
Progress: 1347


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1348


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1349


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 3(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case3 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 1(rank:11.)
=================================================
Progress: 1350


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:11.)
rewrite <- Case2 in goal at 1(rank:11.)
rewrite <- Case2 in goal at 2(rank:11.)
case string_eq (string2) (string1)(rank:12.)
=================================================
Progress: 1351


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string1)(rank:12.)
rewrite Case2 in goal at 2(rank:27.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
=================================================
Progress: 1352


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
=================================================
Progress: 1353


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
rewrite <- Case2 in goal at 1(rank:11.)
=================================================
Progress: 1354


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1355


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1356


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 3(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case3 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 1(rank:11.)
=================================================
Progress: 1357


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:11.)
rewrite <- Case2 in goal at 1(rank:11.)
rewrite <- Case2 in goal at 2(rank:11.)
case string_eq (string2) (string1)(rank:12.)
=================================================
Progress: 1358


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string1)(rank:12.)
rewrite Case2 in goal at 2(rank:27.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
=================================================
Progress: 1359


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
=================================================
Progress: 1360


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:11.)
rewrite <- Case2 in goal at 1(rank:11.)
rewrite <- Case2 in goal at 2(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
=================================================
Progress: 1361


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1362


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1363


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
rewrite Case2 in goal at 3(rank:27.)
=================================================
Progress: 1364


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
rewrite Case2 in goal at 3(rank:27.)
=================================================
Progress: 1365


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite Case3 in goal at 0(rank:27.)
rewrite Case3 in goal at 1(rank:27.)
rewrite Case3 in goal at 2(rank:27.)
rewrite Case3 in goal at 3(rank:27.)
rewrite <- Case3 in goal at 3(rank:11.)
rewrite <- Case3 in goal at 1(rank:11.)
case string_eq (string2) (string1)(rank:12.)
=================================================
Progress: 1366


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 1(rank:11.)
rewrite <- Case3 in goal at 3(rank:11.)
case string_eq (string2) (string1)(rank:12.)
rewrite Case3 in goal at 0(rank:27.)
rewrite Case3 in goal at 1(rank:27.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite Case3 in goal at 2(rank:27.)
=================================================
Progress: 1367


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case3 in goal at 0(rank:27.)
rewrite Case3 in goal at 1(rank:27.)
rewrite Case3 in goal at 2(rank:27.)
rewrite <- Case3 in goal at 3(rank:11.)
rewrite <- Case3 in goal at 1(rank:11.)
=================================================
Progress: 1368


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string3)(rank:12.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
rewrite Case2 in goal at 3(rank:27.)
=================================================
Progress: 1369


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
=================================================
Progress: 1370


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
=================================================
Progress: 1371


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
=================================================
Progress: 1372


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 1(rank:11.)
rewrite Case2 in goal at 1(rank:27.)
rewrite <- Case2 in goal at 3(rank:11.)
case string_eq (string3) (string1)(rank:12.)
=================================================
Progress: 1373


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 1(rank:11.)
rewrite Case2 in goal at 1(rank:27.)
=================================================
Progress: 1374


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 2(rank:11.)
rewrite Case2 in goal at 1(rank:27.)
=================================================
Progress: 1375


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 2(rank:11.)
rewrite Case2 in goal at 1(rank:27.)
=================================================
Progress: 1376


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite <- Case3 in goal at 3(rank:11.)
case string_eq (string2) (string1)(rank:12.)
rewrite <- Case3 in goal at 1(rank:11.)
=================================================
Progress: 1377


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1378


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1379


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
rewrite <- Case2 in goal at 2(rank:11.)
=================================================
Progress: 1380


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
rewrite <- Case2 in goal at 2(rank:11.)
=================================================
Progress: 1381


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1382


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1383


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 1384


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1385


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:11.)
rewrite Case3 in goal at 0(rank:27.)
=================================================
Progress: 1386


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("kai")) (if string_eq ("gme") ("kai") then ("kai"::filter (aux ("kai")) ((Nil))) else filter (aux ("gme")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("dmz")) (if string_eq ("nfj") ("dmz") then ("dmz"::filter (aux ("dmz")) ((Nil))) else filter (aux ("nfj")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("cmi")) (if string_eq ("kkk") ("cmi") then ("cmi"::filter (aux ("cmi")) ((Nil))) else filter (aux ("kkk")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("oxt")) (if string_eq ("chg") ("daa") then ("daa"::filter (aux ("daa")) ((Nil))) else filter (aux ("chg")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("sxe")) (if string_eq ("rqq") ("zal") then ("zal"::filter (aux ("zal")) ((Nil))) else filter (aux ("rqq")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("bgu")) (if string_eq ("uye") ("vcp") then ("vcp"::filter (aux ("vcp")) ((Nil))) else filter (aux ("uye")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("ean")) (if string_eq ("aog") ("jta") then ("jta"::filter (aux ("aog")) ((Nil))) else filter (aux ("aog")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("qml")) (if string_eq ("abs") ("zqb") then ("zqb"::filter (aux ("abs")) ((Nil))) else filter (aux ("abs")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("jur")) (if string_eq ("tid") ("pgc") then ("pgc"::filter (aux ("tid")) ((Nil))) else filter (aux ("tid")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("qbk")) (if string_eq ("mdf") ("bcy") then ("bcy"::filter (aux ("mdf")) ((Nil))) else filter (aux ("mdf")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("dys")) (if string_eq ("hpj") ("rua") then ("rua"::filter (aux ("hpj")) ((Nil))) else filter (aux ("hpj")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ybt")) (if string_eq ("hwi") ("ayb") then ("ayb"::filter (aux ("hwi")) ((Nil))) else filter (aux ("hwi")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string_eq (string1) (string3) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1387


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string_eq (string1) (string3) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string_eq (string1) (string3) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string_eq (string1) (string3) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1388


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1389


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1390


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 1391


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 1392


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1393


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:10.)
=================================================
Progress: 1394


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 1395


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Case1 in goal at 2(rank:10.)
rewrite <- Case1 in goal at 3(rank:10.)
case any_eq (string1) (string1)(rank:11.)
rewrite <- Case1 in goal at 1(rank:10.)
=================================================
Progress: 1396


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 1397


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:11.)
=================================================
Progress: 1398


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:11.)
=================================================
Progress: 1399


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 1400


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1401


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = true

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 4
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1402


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
rewrite <- Case3 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("kmk")) (if string_eq ("jhl") ("kmk") then ("ayt"::filter (aux ("ayt")) ((Nil))) else filter (aux ("jhl")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("twc")) (if string_eq ("guf") ("twc") then ("sul"::filter (aux ("sul")) ((Nil))) else filter (aux ("guf")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("pii")) (if string_eq ("zox") ("pii") then ("tco"::filter (aux ("tco")) ((Nil))) else filter (aux ("zox")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("vuf")) (if string_eq ("bzu") ("fsb") then ("fsb"::filter (aux ("fsb")) ((Nil))) else filter (aux ("bzu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("qmx")) (if string_eq ("vpu") ("fmm") then ("fmm"::filter (aux ("fmm")) ((Nil))) else filter (aux ("vpu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("vyq")) (if string_eq ("zns") ("oes") then ("oes"::filter (aux ("oes")) ((Nil))) else filter (aux ("zns")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("vbn")) (if string_eq ("chz") ("umh") then ("umh"::filter (aux ("chz")) ((Nil))) else filter (aux ("chz")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("gmv")) (if string_eq ("skw") ("yco") then ("yco"::filter (aux ("skw")) ((Nil))) else filter (aux ("skw")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ifi")) (if string_eq ("iuw") ("rre") then ("rre"::filter (aux ("iuw")) ((Nil))) else filter (aux ("iuw")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("yah")) (if string_eq ("ypx") ("oti") then ("oti"::filter (aux ("ypx")) ((Nil))) else filter (aux ("ypx")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("hwb")) (if string_eq ("rfq") ("eiy") then ("eiy"::filter (aux ("rfq")) ((Nil))) else filter (aux ("rfq")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rpl")) (if string_eq ("bjs") ("mth") then ("mth"::filter (aux ("bjs")) ((Nil))) else filter (aux ("bjs")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1403


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1404


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1405


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1406


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 3
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("gac")) (if string_eq ("vkq") ("gac") then ("gac"::filter (aux ("vkq")) ((Nil))) else filter (aux ("gac")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("cij")) (if string_eq ("zyd") ("cij") then ("cij"::filter (aux ("zyd")) ((Nil))) else filter (aux ("cij")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("cwm")) (if string_eq ("xii") ("cwm") then ("cwm"::filter (aux ("xii")) ((Nil))) else filter (aux ("cwm")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 3
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("xtm")) (if string_eq ("hta") ("nkm") then ("nkm"::filter (aux ("hta")) ((Nil))) else filter (aux ("nkm")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("szz")) (if string_eq ("zlo") ("ewm") then ("ewm"::filter (aux ("zlo")) ((Nil))) else filter (aux ("ewm")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("zgw")) (if string_eq ("rxp") ("hqe") then ("hqe"::filter (aux ("rxp")) ((Nil))) else filter (aux ("hqe")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("awb")) (if string_eq ("esf") ("zqf") then ("zqf"::filter (aux ("esf")) ((Nil))) else filter (aux ("esf")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("xip")) (if string_eq ("lqf") ("llo") then ("llo"::filter (aux ("lqf")) ((Nil))) else filter (aux ("lqf")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("yxv")) (if string_eq ("pov") ("kgp") then ("kgp"::filter (aux ("pov")) ((Nil))) else filter (aux ("pov")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("niq")) (if string_eq ("hug") ("lei") then ("lei"::filter (aux ("hug")) ((Nil))) else filter (aux ("hug")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("kds")) (if string_eq ("udo") ("bhj") then ("bhj"::filter (aux ("udo")) ((Nil))) else filter (aux ("udo")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("owf")) (if string_eq ("idx") ("mxu") then ("mxu"::filter (aux ("idx")) ((Nil))) else filter (aux ("idx")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1407


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1408


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 1409


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 1410


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1411


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:10.)
=================================================
Progress: 1412


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 1413


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Case1 in goal at 2(rank:10.)
rewrite <- Case1 in goal at 3(rank:10.)
case any_eq (string1) (string1)(rank:11.)
rewrite <- Case1 in goal at 1(rank:10.)
=================================================
Progress: 1414


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 1415


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:11.)
=================================================
Progress: 1416


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:11.)
=================================================
Progress: 1417


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 1418


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1419


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = true

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 4
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1420


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 3
rewrite <- Case3 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("rus")) (if string_eq ("xss") ("rus") then ("hwh"::filter (aux ("xss")) ((Nil))) else filter (aux ("hwh")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("zqo")) (if string_eq ("css") ("zqo") then ("rll"::filter (aux ("css")) ((Nil))) else filter (aux ("rll")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("omk")) (if string_eq ("orp") ("omk") then ("snh"::filter (aux ("orp")) ((Nil))) else filter (aux ("snh")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 3
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("qzm")) (if string_eq ("cug") ("jeu") then ("jeu"::filter (aux ("cug")) ((Nil))) else filter (aux ("jeu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("lie")) (if string_eq ("cqz") ("oji") then ("oji"::filter (aux ("cqz")) ((Nil))) else filter (aux ("oji")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ujb")) (if string_eq ("eti") ("kpm") then ("kpm"::filter (aux ("eti")) ((Nil))) else filter (aux ("kpm")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("qsz")) (if string_eq ("eyo") ("tih") then ("tih"::filter (aux ("eyo")) ((Nil))) else filter (aux ("eyo")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rvt")) (if string_eq ("cmx") ("ars") then ("ars"::filter (aux ("cmx")) ((Nil))) else filter (aux ("cmx")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("nbj")) (if string_eq ("bud") ("ane") then ("ane"::filter (aux ("bud")) ((Nil))) else filter (aux ("bud")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("gyb")) (if string_eq ("mqr") ("pub") then ("pub"::filter (aux ("mqr")) ((Nil))) else filter (aux ("mqr")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("uxi")) (if string_eq ("roc") ("bqz") then ("bqz"::filter (aux ("roc")) ((Nil))) else filter (aux ("roc")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ilo")) (if string_eq ("dsw") ("jfe") then ("jfe"::filter (aux ("dsw")) ((Nil))) else filter (aux ("dsw")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1421


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1422


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1423


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1424


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string1)(rank:12.)
=================================================
Progress: 1425


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite <- Case2 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("awn")) (if string_eq ("azk") ("awn") then ("awn"::filter (aux ("jdn")) ((Nil))) else filter (aux ("jdn")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("txw")) (if string_eq ("gho") ("txw") then ("txw"::filter (aux ("zyu")) ((Nil))) else filter (aux ("zyu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("vrd")) (if string_eq ("sxa") ("vrd") then ("vrd"::filter (aux ("jkv")) ((Nil))) else filter (aux ("jkv")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("src")) (if string_eq ("tgy") ("src") then ("src"::filter (aux ("tgy")) ((Nil))) else filter (aux ("tgy")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("fap")) (if string_eq ("jhz") ("fap") then ("fap"::filter (aux ("jhz")) ((Nil))) else filter (aux ("jhz")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("kcy")) (if string_eq ("byp") ("kcy") then ("kcy"::filter (aux ("byp")) ((Nil))) else filter (aux ("byp")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("hip")) (if string_eq ("wbz") ("efg") then ("efg"::filter (aux ("wbz")) ((Nil))) else filter (aux ("wbz")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("pnw")) (if string_eq ("zvq") ("uch") then ("uch"::filter (aux ("zvq")) ((Nil))) else filter (aux ("zvq")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rsv")) (if string_eq ("ieq") ("yks") then ("yks"::filter (aux ("ieq")) ((Nil))) else filter (aux ("ieq")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("uit")) (if string_eq ("rlv") ("emu") then ("emu"::filter (aux ("rlv")) ((Nil))) else filter (aux ("rlv")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("fqk")) (if string_eq ("akk") ("via") then ("via"::filter (aux ("akk")) ((Nil))) else filter (aux ("akk")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("jyp")) (if string_eq ("dyr") ("dep") then ("dep"::filter (aux ("dyr")) ((Nil))) else filter (aux ("dyr")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1426


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 1427


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1428


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 1429


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1430


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:10.)
=================================================
Progress: 1431


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 1432


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Case1 in goal at 2(rank:10.)
rewrite <- Case1 in goal at 3(rank:10.)
case any_eq (string1) (string1)(rank:11.)
rewrite <- Case1 in goal at 1(rank:10.)
=================================================
Progress: 1433


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 1434


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:11.)
=================================================
Progress: 1435


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:11.)
=================================================
Progress: 1436


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 1437


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1438


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = true

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 4
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1439


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("xvz")) (if string_eq ("ich") ("xvz") then ("xvz"::filter (aux ("shv")) ((Nil))) else filter (aux ("ich")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("wny")) (if string_eq ("lrp") ("wny") then ("wny"::filter (aux ("bdp")) ((Nil))) else filter (aux ("lrp")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("fqh")) (if string_eq ("hbc") ("fqh") then ("fqh"::filter (aux ("tiy")) ((Nil))) else filter (aux ("hbc")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("izr")) (if string_eq ("ngu") ("izr") then ("izr"::filter (aux ("ngu")) ((Nil))) else filter (aux ("ngu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("yih")) (if string_eq ("itw") ("yih") then ("yih"::filter (aux ("itw")) ((Nil))) else filter (aux ("itw")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("sjl")) (if string_eq ("nrd") ("sjl") then ("sjl"::filter (aux ("nrd")) ((Nil))) else filter (aux ("nrd")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("yrf")) (if string_eq ("xxd") ("wdv") then ("wdv"::filter (aux ("xxd")) ((Nil))) else filter (aux ("xxd")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rmu")) (if string_eq ("jjb") ("lde") then ("lde"::filter (aux ("jjb")) ((Nil))) else filter (aux ("jjb")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("fti")) (if string_eq ("bdl") ("wsy") then ("wsy"::filter (aux ("bdl")) ((Nil))) else filter (aux ("bdl")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("eug")) (if string_eq ("qoz") ("yde") then ("yde"::filter (aux ("qoz")) ((Nil))) else filter (aux ("qoz")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("avd")) (if string_eq ("lwv") ("zst") then ("zst"::filter (aux ("lwv")) ((Nil))) else filter (aux ("lwv")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("mga")) (if string_eq ("sdh") ("zfk") then ("zfk"::filter (aux ("sdh")) ((Nil))) else filter (aux ("sdh")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1440


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1441


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite <- Case2 in goal at 3
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("hdl")) (if string_eq ("ydx") ("hdl") then ("hdl"::filter (aux ("ydx")) ((Nil))) else filter (aux ("rlw")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("qob")) (if string_eq ("uwp") ("qob") then ("qob"::filter (aux ("uwp")) ((Nil))) else filter (aux ("ksk")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("geo")) (if string_eq ("zyf") ("geo") then ("geo"::filter (aux ("zyf")) ((Nil))) else filter (aux ("twf")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("gdz")) (if string_eq ("rqq") ("gdz") then ("gdz"::filter (aux ("rqq")) ((Nil))) else filter (aux ("rqq")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("wlk")) (if string_eq ("yjh") ("wlk") then ("wlk"::filter (aux ("yjh")) ((Nil))) else filter (aux ("yjh")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("zny")) (if string_eq ("nim") ("zny") then ("zny"::filter (aux ("nim")) ((Nil))) else filter (aux ("nim")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("xor")) (if string_eq ("dst") ("nyh") then ("nyh"::filter (aux ("dst")) ((Nil))) else filter (aux ("dst")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("xea")) (if string_eq ("tzm") ("kgi") then ("kgi"::filter (aux ("tzm")) ((Nil))) else filter (aux ("tzm")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("qtp")) (if string_eq ("sna") ("eli") then ("eli"::filter (aux ("sna")) ((Nil))) else filter (aux ("sna")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("iwn")) (if string_eq ("bzf") ("uhn") then ("uhn"::filter (aux ("bzf")) ((Nil))) else filter (aux ("bzf")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("lrf")) (if string_eq ("peh") ("mev") then ("mev"::filter (aux ("peh")) ((Nil))) else filter (aux ("peh")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("lom")) (if string_eq ("krp") ("kwh") then ("kwh"::filter (aux ("krp")) ((Nil))) else filter (aux ("krp")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1442


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1443


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string1)(rank:12.)
=================================================
Progress: 1444


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
rewrite <- Case3 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("rft")) (if string_eq ("baa") ("rft") then ("rft"::filter (aux ("jmm")) ((Nil))) else filter (aux ("jmm")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ktp")) (if string_eq ("znq") ("ktp") then ("ktp"::filter (aux ("grn")) ((Nil))) else filter (aux ("grn")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("qyb")) (if string_eq ("xfb") ("qyb") then ("qyb"::filter (aux ("tyq")) ((Nil))) else filter (aux ("tyq")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("gvl")) (if string_eq ("uol") ("gvl") then ("gvl"::filter (aux ("uol")) ((Nil))) else filter (aux ("uol")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("kcm")) (if string_eq ("eyf") ("kcm") then ("kcm"::filter (aux ("eyf")) ((Nil))) else filter (aux ("eyf")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("jrk")) (if string_eq ("zdk") ("jrk") then ("jrk"::filter (aux ("zdk")) ((Nil))) else filter (aux ("zdk")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("qcb")) (if string_eq ("gqc") ("ieh") then ("ieh"::filter (aux ("gqc")) ((Nil))) else filter (aux ("gqc")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("vbh")) (if string_eq ("nal") ("erw") then ("erw"::filter (aux ("nal")) ((Nil))) else filter (aux ("nal")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("qky")) (if string_eq ("pzp") ("duj") then ("duj"::filter (aux ("pzp")) ((Nil))) else filter (aux ("pzp")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("jte")) (if string_eq ("gcb") ("xux") then ("xux"::filter (aux ("gcb")) ((Nil))) else filter (aux ("gcb")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("shd")) (if string_eq ("jke") ("opw") then ("opw"::filter (aux ("jke")) ((Nil))) else filter (aux ("jke")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("gfo")) (if string_eq ("ukj") ("yql") then ("yql"::filter (aux ("ukj")) ((Nil))) else filter (aux ("ukj")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string3) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1445


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string3) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string3) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string3) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1446


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1447


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1448


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
rewrite <- Case3 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("gvm")) (if string_eq ("xcm") ("gvm") then ("gvm"::filter (aux ("uto")) ((Nil))) else filter (aux ("xcm")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("jgc")) (if string_eq ("tag") ("jgc") then ("jgc"::filter (aux ("myi")) ((Nil))) else filter (aux ("tag")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("bco")) (if string_eq ("vrd") ("bco") then ("bco"::filter (aux ("zmp")) ((Nil))) else filter (aux ("vrd")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("naa")) (if string_eq ("ivw") ("naa") then ("naa"::filter (aux ("ivw")) ((Nil))) else filter (aux ("ivw")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("aij")) (if string_eq ("fvz") ("aij") then ("aij"::filter (aux ("fvz")) ((Nil))) else filter (aux ("fvz")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("efk")) (if string_eq ("tyl") ("efk") then ("efk"::filter (aux ("tyl")) ((Nil))) else filter (aux ("tyl")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("ehz")) (if string_eq ("jry") ("nxl") then ("nxl"::filter (aux ("jry")) ((Nil))) else filter (aux ("jry")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("hxi")) (if string_eq ("dhj") ("bea") then ("bea"::filter (aux ("dhj")) ((Nil))) else filter (aux ("dhj")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("gpv")) (if string_eq ("aad") ("fda") then ("fda"::filter (aux ("aad")) ((Nil))) else filter (aux ("aad")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("yeg")) (if string_eq ("iol") ("hba") then ("hba"::filter (aux ("iol")) ((Nil))) else filter (aux ("iol")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("hcz")) (if string_eq ("yau") ("phk") then ("phk"::filter (aux ("yau")) ((Nil))) else filter (aux ("yau")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("kby")) (if string_eq ("ice") ("lsz") then ("lsz"::filter (aux ("ice")) ((Nil))) else filter (aux ("ice")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1449


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1450


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
rewrite <- Case3 in goal at 3
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("lfy")) (if string_eq ("ljm") ("lfy") then ("lfy"::filter (aux ("ljm")) ((Nil))) else filter (aux ("uqc")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("vkl")) (if string_eq ("ucq") ("vkl") then ("vkl"::filter (aux ("ucq")) ((Nil))) else filter (aux ("svn")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ecf")) (if string_eq ("zfv") ("ecf") then ("ecf"::filter (aux ("zfv")) ((Nil))) else filter (aux ("fek")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("fdj")) (if string_eq ("onz") ("fdj") then ("fdj"::filter (aux ("onz")) ((Nil))) else filter (aux ("onz")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("lvo")) (if string_eq ("ltu") ("lvo") then ("lvo"::filter (aux ("ltu")) ((Nil))) else filter (aux ("ltu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("tey")) (if string_eq ("yif") ("tey") then ("tey"::filter (aux ("yif")) ((Nil))) else filter (aux ("yif")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("emp")) (if string_eq ("lkq") ("waj") then ("waj"::filter (aux ("lkq")) ((Nil))) else filter (aux ("lkq")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("tyc")) (if string_eq ("jps") ("eii") then ("eii"::filter (aux ("jps")) ((Nil))) else filter (aux ("jps")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("knr")) (if string_eq ("qup") ("nvu") then ("nvu"::filter (aux ("qup")) ((Nil))) else filter (aux ("qup")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("pgl")) (if string_eq ("tlw") ("bnz") then ("bnz"::filter (aux ("tlw")) ((Nil))) else filter (aux ("tlw")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("dft")) (if string_eq ("dwy") ("cug") then ("cug"::filter (aux ("dwy")) ((Nil))) else filter (aux ("dwy")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("npt")) (if string_eq ("xjz") ("jia") then ("jia"::filter (aux ("xjz")) ((Nil))) else filter (aux ("xjz")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1451


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1452


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1453


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1454


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1455


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1456


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1457


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11.)
=================================================
Progress: 1458


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 2
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("twb")) (if string_eq ("zlh") ("twb") then ("twb"::filter (aux ("twb")) ((Nil))) else filter (aux ("zlh")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("hfq")) (if string_eq ("vip") ("hfq") then ("hfq"::filter (aux ("hfq")) ((Nil))) else filter (aux ("vip")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("icf")) (if string_eq ("zlb") ("icf") then ("icf"::filter (aux ("icf")) ((Nil))) else filter (aux ("zlb")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("der")) (if string_eq ("iij") ("yix") then ("yix"::filter (aux ("yix")) ((Nil))) else filter (aux ("iij")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("swm")) (if string_eq ("iue") ("etk") then ("etk"::filter (aux ("etk")) ((Nil))) else filter (aux ("iue")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("tok")) (if string_eq ("svf") ("iaf") then ("iaf"::filter (aux ("iaf")) ((Nil))) else filter (aux ("svf")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("ssb")) (if string_eq ("yyy") ("mqp") then ("mqp"::filter (aux ("yyy")) ((Nil))) else filter (aux ("yyy")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("vmw")) (if string_eq ("nis") ("qvk") then ("qvk"::filter (aux ("nis")) ((Nil))) else filter (aux ("nis")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("xtd")) (if string_eq ("qbv") ("hhv") then ("hhv"::filter (aux ("qbv")) ((Nil))) else filter (aux ("qbv")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("yfg")) (if string_eq ("sbw") ("yiv") then ("yiv"::filter (aux ("sbw")) ((Nil))) else filter (aux ("sbw")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("zbt")) (if string_eq ("rsx") ("azt") then ("azt"::filter (aux ("rsx")) ((Nil))) else filter (aux ("rsx")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("tbi")) (if string_eq ("hdw") ("lfc") then ("lfc"::filter (aux ("hdw")) ((Nil))) else filter (aux ("hdw")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1459


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1460


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1461


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 3
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("dil")) (if string_eq ("ljo") ("dil") then ("dil"::filter (aux ("ljo")) ((Nil))) else filter (aux ("dil")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rag")) (if string_eq ("lok") ("rag") then ("rag"::filter (aux ("lok")) ((Nil))) else filter (aux ("rag")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("xuk")) (if string_eq ("lut") ("xuk") then ("xuk"::filter (aux ("lut")) ((Nil))) else filter (aux ("xuk")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 3
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("mte")) (if string_eq ("oaw") ("zya") then ("zya"::filter (aux ("oaw")) ((Nil))) else filter (aux ("zya")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("cpt")) (if string_eq ("ggu") ("pdu") then ("pdu"::filter (aux ("ggu")) ((Nil))) else filter (aux ("pdu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("hgi")) (if string_eq ("wxt") ("hst") then ("hst"::filter (aux ("wxt")) ((Nil))) else filter (aux ("hst")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("lxj")) (if string_eq ("tod") ("cbr") then ("cbr"::filter (aux ("tod")) ((Nil))) else filter (aux ("tod")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("vuv")) (if string_eq ("jji") ("yio") then ("yio"::filter (aux ("jji")) ((Nil))) else filter (aux ("jji")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("msy")) (if string_eq ("nxj") ("pwn") then ("pwn"::filter (aux ("nxj")) ((Nil))) else filter (aux ("nxj")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("lwq")) (if string_eq ("amy") ("tut") then ("tut"::filter (aux ("amy")) ((Nil))) else filter (aux ("amy")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("xfw")) (if string_eq ("kon") ("ssb") then ("ssb"::filter (aux ("kon")) ((Nil))) else filter (aux ("kon")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ghn")) (if string_eq ("tjl") ("oig") then ("oig"::filter (aux ("tjl")) ((Nil))) else filter (aux ("tjl")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1462


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1463


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1464


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1465


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case3 in goal at 0(rank:11.)
rewrite Case3 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 1(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
=================================================
Progress: 1466


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("wzq")) (if string_eq ("nzc") ("wzq") then ("wzq"::filter (aux ("wzq")) ((Nil))) else filter (aux ("wzq")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("bng")) (if string_eq ("rlr") ("bng") then ("bng"::filter (aux ("bng")) ((Nil))) else filter (aux ("bng")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("cvg")) (if string_eq ("ahf") ("cvg") then ("cvg"::filter (aux ("cvg")) ((Nil))) else filter (aux ("cvg")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("sog")) (if string_eq ("voy") ("ujq") then ("ujq"::filter (aux ("ujq")) ((Nil))) else filter (aux ("ujq")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("xtv")) (if string_eq ("rwd") ("rji") then ("rji"::filter (aux ("rji")) ((Nil))) else filter (aux ("rji")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ztn")) (if string_eq ("iox") ("cvt") then ("cvt"::filter (aux ("cvt")) ((Nil))) else filter (aux ("cvt")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("uek")) (if string_eq ("tid") ("trl") then ("trl"::filter (aux ("trl")) ((Nil))) else filter (aux ("tid")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("hii")) (if string_eq ("hsc") ("yov") then ("yov"::filter (aux ("yov")) ((Nil))) else filter (aux ("hsc")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("cpw")) (if string_eq ("gvy") ("mxi") then ("mxi"::filter (aux ("mxi")) ((Nil))) else filter (aux ("gvy")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("fqk")) (if string_eq ("not") ("xtt") then ("xtt"::filter (aux ("xtt")) ((Nil))) else filter (aux ("not")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("dqp")) (if string_eq ("xtr") ("shb") then ("shb"::filter (aux ("shb")) ((Nil))) else filter (aux ("xtr")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rum")) (if string_eq ("npi") ("kmb") then ("kmb"::filter (aux ("kmb")) ((Nil))) else filter (aux ("npi")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string_eq (string1) (string3) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1467


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string_eq (string1) (string3) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string_eq (string1) (string3) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string_eq (string1) (string3) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1468


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1469


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 1470


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 1471


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1472


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:10.)
=================================================
Progress: 1473


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 1474


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Case1 in goal at 2(rank:10.)
rewrite <- Case1 in goal at 3(rank:10.)
case any_eq (string1) (string1)(rank:11.)
rewrite <- Case1 in goal at 1(rank:10.)
=================================================
Progress: 1475


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 1476


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:11.)
=================================================
Progress: 1477


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:11.)
=================================================
Progress: 1478


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 1479


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1480


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = true

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 4
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1481


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
rewrite <- Case3 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("rgr")) (if string_eq ("hdi") ("rgr") then ("gqf"::filter (aux ("gqf")) ((Nil))) else filter (aux ("gqf")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("elk")) (if string_eq ("eix") ("elk") then ("sld"::filter (aux ("sld")) ((Nil))) else filter (aux ("sld")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ger")) (if string_eq ("ncb") ("ger") then ("pcs"::filter (aux ("pcs")) ((Nil))) else filter (aux ("pcs")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("ofg")) (if string_eq ("hpm") ("fzc") then ("fzc"::filter (aux ("fzc")) ((Nil))) else filter (aux ("fzc")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("xub")) (if string_eq ("olm") ("nzi") then ("nzi"::filter (aux ("nzi")) ((Nil))) else filter (aux ("nzi")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ehp")) (if string_eq ("wou") ("sst") then ("sst"::filter (aux ("sst")) ((Nil))) else filter (aux ("sst")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("mhe")) (if string_eq ("woe") ("nni") then ("nni"::filter (aux ("nni")) ((Nil))) else filter (aux ("woe")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("eev")) (if string_eq ("kky") ("xvr") then ("xvr"::filter (aux ("xvr")) ((Nil))) else filter (aux ("kky")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("clo")) (if string_eq ("zln") ("wka") then ("wka"::filter (aux ("wka")) ((Nil))) else filter (aux ("zln")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("rwh")) (if string_eq ("uvb") ("hwz") then ("hwz"::filter (aux ("hwz")) ((Nil))) else filter (aux ("uvb")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("zee")) (if string_eq ("bix") ("mmt") then ("mmt"::filter (aux ("mmt")) ((Nil))) else filter (aux ("bix")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("der")) (if string_eq ("ekg") ("igr") then ("igr"::filter (aux ("igr")) ((Nil))) else filter (aux ("ekg")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1482


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1483


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1484


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1485


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string1)(rank:12.)
=================================================
Progress: 1486


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite <- Case2 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("jrb")) (if string_eq ("drb") ("jrb") then ("jrb"::filter (aux ("jrb")) ((Nil))) else filter (aux ("aau")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("lfk")) (if string_eq ("tgr") ("lfk") then ("lfk"::filter (aux ("lfk")) ((Nil))) else filter (aux ("krd")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("jls")) (if string_eq ("efx") ("jls") then ("jls"::filter (aux ("jls")) ((Nil))) else filter (aux ("gne")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("wbm")) (if string_eq ("ahi") ("wbm") then ("wbm"::filter (aux ("wbm")) ((Nil))) else filter (aux ("ahi")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("wiz")) (if string_eq ("gvw") ("wiz") then ("wiz"::filter (aux ("wiz")) ((Nil))) else filter (aux ("gvw")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("skd")) (if string_eq ("kig") ("skd") then ("skd"::filter (aux ("skd")) ((Nil))) else filter (aux ("kig")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("gyo")) (if string_eq ("mpd") ("sfe") then ("sfe"::filter (aux ("sfe")) ((Nil))) else filter (aux ("mpd")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("zgd")) (if string_eq ("lfm") ("vri") then ("vri"::filter (aux ("vri")) ((Nil))) else filter (aux ("lfm")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("dox")) (if string_eq ("hgk") ("akm") then ("akm"::filter (aux ("akm")) ((Nil))) else filter (aux ("hgk")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("eds")) (if string_eq ("zmc") ("lgi") then ("lgi"::filter (aux ("lgi")) ((Nil))) else filter (aux ("zmc")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("vbb")) (if string_eq ("eat") ("suh") then ("suh"::filter (aux ("suh")) ((Nil))) else filter (aux ("eat")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("squ")) (if string_eq ("yvc") ("rqg") then ("rqg"::filter (aux ("rqg")) ((Nil))) else filter (aux ("yvc")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1487


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1488


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("prk")) (if string_eq ("nif") ("prk") then ("prk"::filter (aux ("prk")) ((Nil))) else filter (aux ("prj")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("qzs")) (if string_eq ("isc") ("qzs") then ("qzs"::filter (aux ("qzs")) ((Nil))) else filter (aux ("rcz")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("hiw")) (if string_eq ("hpl") ("hiw") then ("hiw"::filter (aux ("hiw")) ((Nil))) else filter (aux ("mis")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("nos")) (if string_eq ("viz") ("nos") then ("nos"::filter (aux ("nos")) ((Nil))) else filter (aux ("viz")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ygy")) (if string_eq ("vlh") ("ygy") then ("ygy"::filter (aux ("ygy")) ((Nil))) else filter (aux ("vlh")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("wku")) (if string_eq ("toy") ("wku") then ("wku"::filter (aux ("wku")) ((Nil))) else filter (aux ("toy")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("phy")) (if string_eq ("drd") ("zxz") then ("zxz"::filter (aux ("zxz")) ((Nil))) else filter (aux ("drd")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("cti")) (if string_eq ("dfr") ("vgc") then ("vgc"::filter (aux ("vgc")) ((Nil))) else filter (aux ("dfr")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("xaf")) (if string_eq ("vjq") ("tem") then ("tem"::filter (aux ("tem")) ((Nil))) else filter (aux ("vjq")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("gci")) (if string_eq ("hyj") ("srj") then ("srj"::filter (aux ("srj")) ((Nil))) else filter (aux ("hyj")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("cad")) (if string_eq ("uot") ("emz") then ("emz"::filter (aux ("emz")) ((Nil))) else filter (aux ("uot")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("nfg")) (if string_eq ("ueg") ("rca") then ("rca"::filter (aux ("rca")) ((Nil))) else filter (aux ("ueg")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1489


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1490


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 3
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("sgc")) (if string_eq ("zlk") ("zlk") then ("zlk"::filter (aux ("sgc")) ((Nil))) else filter (aux ("zlk")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("fbm")) (if string_eq ("nng") ("nng") then ("nng"::filter (aux ("fbm")) ((Nil))) else filter (aux ("nng")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rtq")) (if string_eq ("aom") ("aom") then ("aom"::filter (aux ("rtq")) ((Nil))) else filter (aux ("aom")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 3
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("yka")) (if string_eq ("dmc") ("rnk") then ("rnk"::filter (aux ("yka")) ((Nil))) else filter (aux ("dmc")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("con")) (if string_eq ("wyg") ("gbh") then ("gbh"::filter (aux ("con")) ((Nil))) else filter (aux ("wyg")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("hck")) (if string_eq ("gbu") ("npz") then ("npz"::filter (aux ("hck")) ((Nil))) else filter (aux ("gbu")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("elb")) (if string_eq ("xjv") ("cxs") then ("cxs"::filter (aux ("cxs")) ((Nil))) else filter (aux ("xjv")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("pxk")) (if string_eq ("shf") ("gkb") then ("gkb"::filter (aux ("gkb")) ((Nil))) else filter (aux ("shf")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("mdq")) (if string_eq ("xgk") ("lww") then ("lww"::filter (aux ("lww")) ((Nil))) else filter (aux ("xgk")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("pvl")) (if string_eq ("kph") ("faw") then ("faw"::filter (aux ("faw")) ((Nil))) else filter (aux ("kph")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("bvb")) (if string_eq ("gus") ("dlf") then ("dlf"::filter (aux ("dlf")) ((Nil))) else filter (aux ("gus")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("uur")) (if string_eq ("udo") ("yvq") then ("yvq"::filter (aux ("yvq")) ((Nil))) else filter (aux ("udo")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string2) then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1491


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1492


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string2) then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string2) then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string2) then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:13.)
=================================================
Progress: 1493


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 3
rewrite <- Case2 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("gqx")) (if string_eq ("cjk") ("cjk") then ("cjk"::filter (aux ("gqx")) ((Nil))) else filter (aux ("afd")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("kny")) (if string_eq ("miy") ("miy") then ("miy"::filter (aux ("kny")) ((Nil))) else filter (aux ("jks")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("roh")) (if string_eq ("nbo") ("nbo") then ("nbo"::filter (aux ("roh")) ((Nil))) else filter (aux ("nsn")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 3
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("hhi")) (if string_eq ("nlc") ("tte") then ("tte"::filter (aux ("hhi")) ((Nil))) else filter (aux ("nlc")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("jrx")) (if string_eq ("jzl") ("key") then ("key"::filter (aux ("jrx")) ((Nil))) else filter (aux ("jzl")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("nae")) (if string_eq ("skz") ("dej") then ("dej"::filter (aux ("nae")) ((Nil))) else filter (aux ("skz")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("pan")) (if string_eq ("bet") ("nkt") then ("nkt"::filter (aux ("nkt")) ((Nil))) else filter (aux ("bet")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("qwm")) (if string_eq ("kun") ("lav") then ("lav"::filter (aux ("lav")) ((Nil))) else filter (aux ("kun")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("sej")) (if string_eq ("xtf") ("xap") then ("xap"::filter (aux ("xap")) ((Nil))) else filter (aux ("xtf")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("dat")) (if string_eq ("jcw") ("afo") then ("afo"::filter (aux ("afo")) ((Nil))) else filter (aux ("jcw")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("zrr")) (if string_eq ("ynm") ("ndb") then ("ndb"::filter (aux ("ndb")) ((Nil))) else filter (aux ("ynm")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("mnd")) (if string_eq ("ayn") ("hhv") then ("hhv"::filter (aux ("hhv")) ((Nil))) else filter (aux ("ayn")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1494


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1495


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1496


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case3 in goal at 0(rank:11.)
rewrite Case3 in goal at 0(rank:27.)
rewrite <- Case3 in goal at 1(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
=================================================
Progress: 1497


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("uad")) (if string_eq ("mvf") ("uad") then ("uad"::filter (aux ("uad")) ((Nil))) else filter (aux ("uad")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("bci")) (if string_eq ("jjz") ("bci") then ("bci"::filter (aux ("bci")) ((Nil))) else filter (aux ("bci")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ulh")) (if string_eq ("ang") ("ulh") then ("ulh"::filter (aux ("ulh")) ((Nil))) else filter (aux ("ulh")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("mgp")) (if string_eq ("bnz") ("arb") then ("arb"::filter (aux ("arb")) ((Nil))) else filter (aux ("arb")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("tzf")) (if string_eq ("gdw") ("jrf") then ("jrf"::filter (aux ("jrf")) ((Nil))) else filter (aux ("jrf")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("tat")) (if string_eq ("yow") ("fme") then ("fme"::filter (aux ("fme")) ((Nil))) else filter (aux ("fme")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("rsm")) (if string_eq ("svr") ("soo") then ("soo"::filter (aux ("svr")) ((Nil))) else filter (aux ("soo")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rgk")) (if string_eq ("jza") ("sai") then ("sai"::filter (aux ("jza")) ((Nil))) else filter (aux ("sai")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("dvg")) (if string_eq ("tuw") ("xmq") then ("xmq"::filter (aux ("tuw")) ((Nil))) else filter (aux ("xmq")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("fwi")) (if string_eq ("gky") ("asb") then ("asb"::filter (aux ("gky")) ((Nil))) else filter (aux ("asb")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("omo")) (if string_eq ("ddv") ("stn") then ("stn"::filter (aux ("ddv")) ((Nil))) else filter (aux ("stn")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("aft")) (if string_eq ("ilv") ("cyc") then ("cyc"::filter (aux ("ilv")) ((Nil))) else filter (aux ("cyc")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string_eq (string1) (string3) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1498


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string_eq (string1) (string3) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string_eq (string1) (string3) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string_eq (string1) (string3) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1499


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
rewrite <- Case3 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("fas")) (if string_eq ("lye") ("fas") then ("ezk"::filter (aux ("ezk")) ((Nil))) else filter (aux ("ezk")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("blh")) (if string_eq ("ylb") ("blh") then ("kyr"::filter (aux ("kyr")) ((Nil))) else filter (aux ("kyr")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("xsr")) (if string_eq ("qut") ("xsr") then ("xde"::filter (aux ("xde")) ((Nil))) else filter (aux ("xde")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("egs")) (if string_eq ("gie") ("bva") then ("bva"::filter (aux ("bva")) ((Nil))) else filter (aux ("bva")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("mfp")) (if string_eq ("qqe") ("gsu") then ("gsu"::filter (aux ("gsu")) ((Nil))) else filter (aux ("gsu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("oop")) (if string_eq ("xix") ("ycf") then ("ycf"::filter (aux ("ycf")) ((Nil))) else filter (aux ("ycf")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("qul")) (if string_eq ("vne") ("bnx") then ("bnx"::filter (aux ("vne")) ((Nil))) else filter (aux ("bnx")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("yca")) (if string_eq ("hta") ("yiy") then ("yiy"::filter (aux ("hta")) ((Nil))) else filter (aux ("yiy")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rpa")) (if string_eq ("oiy") ("kaq") then ("kaq"::filter (aux ("oiy")) ((Nil))) else filter (aux ("kaq")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("crx")) (if string_eq ("squ") ("yrg") then ("yrg"::filter (aux ("squ")) ((Nil))) else filter (aux ("yrg")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("tyb")) (if string_eq ("mvb") ("zoc") then ("zoc"::filter (aux ("mvb")) ((Nil))) else filter (aux ("zoc")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rip")) (if string_eq ("nqa") ("hws") then ("hws"::filter (aux ("nqa")) ((Nil))) else filter (aux ("hws")) ((Nil)))) ((Nil))
=================================================
Progress: 1500


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1501


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1502


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string1)(rank:12.)
=================================================
Progress: 1503


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite <- Case2 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("rsa")) (if string_eq ("yjn") ("rsa") then ("rsa"::filter (aux ("czk")) ((Nil))) else filter (aux ("rsa")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rlc")) (if string_eq ("rwi") ("rlc") then ("rlc"::filter (aux ("qky")) ((Nil))) else filter (aux ("rlc")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("kdr")) (if string_eq ("ymv") ("kdr") then ("kdr"::filter (aux ("jqa")) ((Nil))) else filter (aux ("kdr")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("yom")) (if string_eq ("cjp") ("yom") then ("yom"::filter (aux ("cjp")) ((Nil))) else filter (aux ("yom")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("mjo")) (if string_eq ("wzu") ("mjo") then ("mjo"::filter (aux ("wzu")) ((Nil))) else filter (aux ("mjo")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("jay")) (if string_eq ("eiw") ("jay") then ("jay"::filter (aux ("eiw")) ((Nil))) else filter (aux ("jay")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("bux")) (if string_eq ("wsb") ("xra") then ("xra"::filter (aux ("wsb")) ((Nil))) else filter (aux ("xra")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("dgc")) (if string_eq ("noy") ("oft") then ("oft"::filter (aux ("noy")) ((Nil))) else filter (aux ("oft")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("zeq")) (if string_eq ("pfi") ("fgx") then ("fgx"::filter (aux ("pfi")) ((Nil))) else filter (aux ("fgx")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("mmm")) (if string_eq ("bqd") ("zgz") then ("zgz"::filter (aux ("bqd")) ((Nil))) else filter (aux ("zgz")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("jld")) (if string_eq ("iuc") ("vmd") then ("vmd"::filter (aux ("iuc")) ((Nil))) else filter (aux ("vmd")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("dsq")) (if string_eq ("avc") ("nwn") then ("nwn"::filter (aux ("avc")) ((Nil))) else filter (aux ("nwn")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1504


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1505


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("mrr")) (if string_eq ("aqj") ("mrr") then ("mrr"::filter (aux ("blg")) ((Nil))) else filter (aux ("mrr")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ugc")) (if string_eq ("vno") ("ugc") then ("ugc"::filter (aux ("efc")) ((Nil))) else filter (aux ("ugc")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ajt")) (if string_eq ("lno") ("ajt") then ("ajt"::filter (aux ("frv")) ((Nil))) else filter (aux ("ajt")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("afi")) (if string_eq ("nrn") ("afi") then ("afi"::filter (aux ("nrn")) ((Nil))) else filter (aux ("afi")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("pin")) (if string_eq ("xdz") ("pin") then ("pin"::filter (aux ("xdz")) ((Nil))) else filter (aux ("pin")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("hmy")) (if string_eq ("atb") ("hmy") then ("hmy"::filter (aux ("atb")) ((Nil))) else filter (aux ("hmy")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("nty")) (if string_eq ("bcq") ("szb") then ("szb"::filter (aux ("bcq")) ((Nil))) else filter (aux ("szb")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("tlp")) (if string_eq ("pzx") ("pop") then ("pop"::filter (aux ("pzx")) ((Nil))) else filter (aux ("pop")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("jam")) (if string_eq ("sgw") ("cbl") then ("cbl"::filter (aux ("sgw")) ((Nil))) else filter (aux ("cbl")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("mvm")) (if string_eq ("vje") ("nzs") then ("nzs"::filter (aux ("vje")) ((Nil))) else filter (aux ("nzs")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("vbi")) (if string_eq ("dlz") ("ndh") then ("ndh"::filter (aux ("dlz")) ((Nil))) else filter (aux ("ndh")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("szq")) (if string_eq ("vsj") ("uoi") then ("uoi"::filter (aux ("vsj")) ((Nil))) else filter (aux ("uoi")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1506


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1507


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 3
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("ccv")) (if string_eq ("rut") ("rut") then ("rut"::filter (aux ("rut")) ((Nil))) else filter (aux ("ccv")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("lvy")) (if string_eq ("omt") ("omt") then ("omt"::filter (aux ("omt")) ((Nil))) else filter (aux ("lvy")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("qyf")) (if string_eq ("oxi") ("oxi") then ("oxi"::filter (aux ("oxi")) ((Nil))) else filter (aux ("qyf")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 3
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("sow")) (if string_eq ("vld") ("vyo") then ("vyo"::filter (aux ("vld")) ((Nil))) else filter (aux ("sow")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("bbs")) (if string_eq ("lxi") ("nsm") then ("nsm"::filter (aux ("lxi")) ((Nil))) else filter (aux ("bbs")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("nzm")) (if string_eq ("msb") ("tsl") then ("tsl"::filter (aux ("msb")) ((Nil))) else filter (aux ("nzm")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("ixe")) (if string_eq ("pvx") ("jfi") then ("jfi"::filter (aux ("pvx")) ((Nil))) else filter (aux ("jfi")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("lok")) (if string_eq ("qnw") ("ide") then ("ide"::filter (aux ("qnw")) ((Nil))) else filter (aux ("ide")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("wjp")) (if string_eq ("ljh") ("plu") then ("plu"::filter (aux ("ljh")) ((Nil))) else filter (aux ("plu")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("wbt")) (if string_eq ("ekv") ("xyo") then ("xyo"::filter (aux ("ekv")) ((Nil))) else filter (aux ("xyo")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("teq")) (if string_eq ("uos") ("hvm") then ("hvm"::filter (aux ("uos")) ((Nil))) else filter (aux ("hvm")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("qwz")) (if string_eq ("qch") ("jrz") then ("jrz"::filter (aux ("qch")) ((Nil))) else filter (aux ("jrz")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string2) then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1508


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1509


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string2) then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string2) then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string2) then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:13.)
=================================================
Progress: 1510


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 3
rewrite <- Case2 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("vke")) (if string_eq ("mzo") ("mzo") then ("mzo"::filter (aux ("dlm")) ((Nil))) else filter (aux ("vke")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("fin")) (if string_eq ("ppx") ("ppx") then ("ppx"::filter (aux ("mqk")) ((Nil))) else filter (aux ("fin")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("iwc")) (if string_eq ("qye") ("qye") then ("qye"::filter (aux ("txw")) ((Nil))) else filter (aux ("iwc")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 3
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("ohi")) (if string_eq ("boa") ("ajj") then ("ajj"::filter (aux ("boa")) ((Nil))) else filter (aux ("ohi")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("afw")) (if string_eq ("eez") ("xbh") then ("xbh"::filter (aux ("eez")) ((Nil))) else filter (aux ("afw")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("uwo")) (if string_eq ("flg") ("aky") then ("aky"::filter (aux ("flg")) ((Nil))) else filter (aux ("uwo")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("ihv")) (if string_eq ("jrd") ("urq") then ("urq"::filter (aux ("jrd")) ((Nil))) else filter (aux ("urq")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("aix")) (if string_eq ("sjb") ("vhe") then ("vhe"::filter (aux ("sjb")) ((Nil))) else filter (aux ("vhe")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("olh")) (if string_eq ("xql") ("ukp") then ("ukp"::filter (aux ("xql")) ((Nil))) else filter (aux ("ukp")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("hlz")) (if string_eq ("egx") ("pkg") then ("pkg"::filter (aux ("egx")) ((Nil))) else filter (aux ("pkg")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("lct")) (if string_eq ("soq") ("nvm") then ("nvm"::filter (aux ("soq")) ((Nil))) else filter (aux ("nvm")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("jzu")) (if string_eq ("tdt") ("wxn") then ("wxn"::filter (aux ("tdt")) ((Nil))) else filter (aux ("wxn")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1511


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1512


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1513


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1514


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
=================================================
Progress: 1515


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1516


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1517


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
rewrite <- Case3 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("hfl")) (if string_eq ("btk") ("hfl") then ("hfl"::filter (aux ("hfl")) ((Nil))) else filter (aux ("btk")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ycm")) (if string_eq ("mdz") ("ycm") then ("ycm"::filter (aux ("ycm")) ((Nil))) else filter (aux ("mdz")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("xka")) (if string_eq ("nwx") ("xka") then ("xka"::filter (aux ("xka")) ((Nil))) else filter (aux ("nwx")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("zsj")) (if string_eq ("xuk") ("zsj") then ("zsj"::filter (aux ("xuk")) ((Nil))) else filter (aux ("xuk")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("mfh")) (if string_eq ("ouq") ("mfh") then ("mfh"::filter (aux ("ouq")) ((Nil))) else filter (aux ("ouq")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("any")) (if string_eq ("kgv") ("any") then ("any"::filter (aux ("kgv")) ((Nil))) else filter (aux ("kgv")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("gxg")) (if string_eq ("wip") ("mzq") then ("mzq"::filter (aux ("wip")) ((Nil))) else filter (aux ("wip")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("fjc")) (if string_eq ("qqp") ("mco") then ("mco"::filter (aux ("qqp")) ((Nil))) else filter (aux ("qqp")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("cxj")) (if string_eq ("wgv") ("ffr") then ("ffr"::filter (aux ("wgv")) ((Nil))) else filter (aux ("wgv")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("bnx")) (if string_eq ("cbv") ("rpe") then ("rpe"::filter (aux ("cbv")) ((Nil))) else filter (aux ("cbv")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("eik")) (if string_eq ("jyo") ("iku") then ("iku"::filter (aux ("jyo")) ((Nil))) else filter (aux ("jyo")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("mun")) (if string_eq ("zsf") ("nho") then ("nho"::filter (aux ("zsf")) ((Nil))) else filter (aux ("zsf")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string1) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1518


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string1) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string1) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string1) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1519


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1520


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 1521


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 1522


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 1523


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 1524


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1525


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1526


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
case string_eq (string2) (string1)(rank:10.)
rewrite Cond1 in goal at 0(rank:25.)
rewrite Cond1 in goal at 2(rank:25.)
rewrite <- Cond1 in goal at 0(rank:25.)
rewrite <- Cond1 in goal at 1(rank:25.)
rewrite <- Cond1 in goal at 2(rank:25.)
rewrite <- Cond1 in goal at 3(rank:25.)
rewrite Cond1 in goal at 3(rank:25.)
rewrite Cond1 in goal at 1(rank:25.)
=================================================
Progress: 1527


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case string_eq (string2) (string1)(rank:10.)
rewrite Cond1 in goal at 0(rank:25.)
rewrite Cond1 in goal at 2(rank:25.)
rewrite Cond1 in goal at 3(rank:25.)
rewrite <- Cond1 in goal at 0(rank:25.)
rewrite <- Cond1 in goal at 1(rank:25.)
rewrite Cond1 in goal at 1(rank:25.)
rewrite <- Cond1 in goal at 2(rank:25.)
=================================================
Progress: 1528


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : string1 = string2
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 1529


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : string1 = string2
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 1530


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : string1 = string2
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : string1 = string2
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case any_eq (string1) (string1)(rank:11.)
rewrite Cond1 in goal at 0(rank:26.)
rewrite Cond1 in goal at 1(rank:26.)
rewrite Cond1 in goal at 2(rank:26.)
rewrite Cond1 in goal at 3(rank:26.)
=================================================
Progress: 1531


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : string1 = string2
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : string1 = string2
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case any_eq (string1) (string1)(rank:11.)
rewrite Cond1 in goal at 0(rank:26.)
rewrite Cond1 in goal at 1(rank:26.)
rewrite Cond1 in goal at 2(rank:26.)
rewrite Cond1 in goal at 3(rank:26.)
=================================================
Progress: 1532


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
rewrite <- Case3 in goal at 3
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("lyo")) (if string_eq ("awd") ("lyo") then ("lyo"::filter (aux ("awd")) ((Nil))) else filter (aux ("lyo")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("bcj")) (if string_eq ("ytl") ("bcj") then ("bcj"::filter (aux ("ytl")) ((Nil))) else filter (aux ("bcj")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ojb")) (if string_eq ("lbt") ("ojb") then ("ojb"::filter (aux ("lbt")) ((Nil))) else filter (aux ("ojb")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("lmj")) (if string_eq ("fsa") ("lmj") then ("lmj"::filter (aux ("fsa")) ((Nil))) else filter (aux ("fsa")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("tai")) (if string_eq ("phk") ("tai") then ("tai"::filter (aux ("phk")) ((Nil))) else filter (aux ("phk")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rvs")) (if string_eq ("pos") ("rvs") then ("rvs"::filter (aux ("pos")) ((Nil))) else filter (aux ("pos")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("vju")) (if string_eq ("mis") ("yhs") then ("yhs"::filter (aux ("mis")) ((Nil))) else filter (aux ("mis")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("gqq")) (if string_eq ("low") ("pqe") then ("pqe"::filter (aux ("low")) ((Nil))) else filter (aux ("low")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("amv")) (if string_eq ("gru") ("ijw") then ("ijw"::filter (aux ("gru")) ((Nil))) else filter (aux ("gru")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("zom")) (if string_eq ("xyn") ("lwj") then ("lwj"::filter (aux ("xyn")) ((Nil))) else filter (aux ("xyn")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("xzi")) (if string_eq ("yxp") ("qtg") then ("qtg"::filter (aux ("yxp")) ((Nil))) else filter (aux ("yxp")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("xqv")) (if string_eq ("xhs") ("lrr") then ("lrr"::filter (aux ("xhs")) ((Nil))) else filter (aux ("xhs")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1533


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 1534


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 1535


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1536


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case string_eq (string2) (string1)(rank:10.)
rewrite Cond1 in goal at 0(rank:25.)
rewrite Cond1 in goal at 2(rank:25.)
rewrite Cond1 in goal at 3(rank:25.)
rewrite <- Cond1 in goal at 0(rank:25.)
rewrite <- Cond1 in goal at 1(rank:25.)
rewrite Cond1 in goal at 1(rank:25.)
rewrite <- Cond1 in goal at 2(rank:25.)
=================================================
Progress: 1537


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : string1 = string2
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:10.)
=================================================
Progress: 1538


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : string1 = string2
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 10.)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : string1 = string2
Case1 : string2 = string1
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case any_eq (string1) (string1)(rank:11.)
rewrite Cond1 in goal at 0(rank:26.)
rewrite Cond1 in goal at 1(rank:26.)
rewrite Cond1 in goal at 2(rank:26.)
rewrite Cond1 in goal at 3(rank:26.)
=================================================
Progress: 1539


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1540


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:11.)
=================================================
Progress: 1541


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 1
rewrite <- Case3 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("fhr")) (if string_eq ("srp") ("fhr") then ("ilv"::filter (aux ("fhr")) ((Nil))) else filter (aux ("srp")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("qqi")) (if string_eq ("qfh") ("qqi") then ("ltv"::filter (aux ("qqi")) ((Nil))) else filter (aux ("qfh")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("emg")) (if string_eq ("wbt") ("emg") then ("dgx"::filter (aux ("emg")) ((Nil))) else filter (aux ("wbt")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("wlf")) (if string_eq ("fvj") ("wlf") then ("exj"::filter (aux ("fvj")) ((Nil))) else filter (aux ("fvj")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("zby")) (if string_eq ("opt") ("zby") then ("zgw"::filter (aux ("opt")) ((Nil))) else filter (aux ("opt")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rio")) (if string_eq ("awn") ("rio") then ("iym"::filter (aux ("awn")) ((Nil))) else filter (aux ("awn")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("bfr")) (if string_eq ("riu") ("ggn") then ("ggn"::filter (aux ("riu")) ((Nil))) else filter (aux ("riu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("lsn")) (if string_eq ("qtv") ("ver") then ("ver"::filter (aux ("qtv")) ((Nil))) else filter (aux ("qtv")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("act")) (if string_eq ("kjh") ("hpk") then ("hpk"::filter (aux ("kjh")) ((Nil))) else filter (aux ("kjh")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("qyc")) (if string_eq ("tzl") ("aro") then ("aro"::filter (aux ("tzl")) ((Nil))) else filter (aux ("tzl")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("gfo")) (if string_eq ("tmz") ("dub") then ("dub"::filter (aux ("tmz")) ((Nil))) else filter (aux ("tmz")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("kmp")) (if string_eq ("bly") ("mfk") then ("mfk"::filter (aux ("bly")) ((Nil))) else filter (aux ("bly")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1542


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1543


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1544


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 1
rewrite <- Case3 in goal at 3
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("xbg")) (if string_eq ("ibr") ("xbg") then ("xjx"::filter (aux ("ibr")) ((Nil))) else filter (aux ("xbg")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("jly")) (if string_eq ("mkt") ("jly") then ("ijk"::filter (aux ("mkt")) ((Nil))) else filter (aux ("jly")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ulb")) (if string_eq ("ikh") ("ulb") then ("iiu"::filter (aux ("ikh")) ((Nil))) else filter (aux ("ulb")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("pjt")) (if string_eq ("faf") ("pjt") then ("xag"::filter (aux ("faf")) ((Nil))) else filter (aux ("faf")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("hsx")) (if string_eq ("pdh") ("hsx") then ("mjf"::filter (aux ("pdh")) ((Nil))) else filter (aux ("pdh")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("qdk")) (if string_eq ("rzq") ("qdk") then ("yom"::filter (aux ("rzq")) ((Nil))) else filter (aux ("rzq")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("ibg")) (if string_eq ("dlb") ("gqd") then ("gqd"::filter (aux ("dlb")) ((Nil))) else filter (aux ("dlb")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("qmd")) (if string_eq ("mke") ("ryg") then ("ryg"::filter (aux ("mke")) ((Nil))) else filter (aux ("mke")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("svq")) (if string_eq ("gey") ("kxr") then ("kxr"::filter (aux ("gey")) ((Nil))) else filter (aux ("gey")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("dhf")) (if string_eq ("afw") ("sej") then ("sej"::filter (aux ("afw")) ((Nil))) else filter (aux ("afw")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("wod")) (if string_eq ("glh") ("scd") then ("scd"::filter (aux ("glh")) ((Nil))) else filter (aux ("glh")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("gjx")) (if string_eq ("czp") ("tee") then ("tee"::filter (aux ("czp")) ((Nil))) else filter (aux ("czp")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1545


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1546


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string3) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12.)
=================================================
Progress: 1547


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
rewrite <- Case3 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("fbg")) (if string_eq ("fbg") ("jdt") then ("fbg"::filter (aux ("tom")) ((Nil))) else filter (aux ("tom")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("sbo")) (if string_eq ("sbo") ("txa") then ("sbo"::filter (aux ("klf")) ((Nil))) else filter (aux ("klf")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("uge")) (if string_eq ("uge") ("mlz") then ("uge"::filter (aux ("bcn")) ((Nil))) else filter (aux ("bcn")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("lbm")) (if string_eq ("eay") ("htp") then ("lbm"::filter (aux ("eay")) ((Nil))) else filter (aux ("eay")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("jll")) (if string_eq ("srz") ("cei") then ("jll"::filter (aux ("srz")) ((Nil))) else filter (aux ("srz")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("upf")) (if string_eq ("mad") ("lrb") then ("upf"::filter (aux ("mad")) ((Nil))) else filter (aux ("mad")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("njj")) (if string_eq ("fbf") ("adl") then ("adl"::filter (aux ("fbf")) ((Nil))) else filter (aux ("fbf")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("cqv")) (if string_eq ("wjq") ("eqj") then ("eqj"::filter (aux ("wjq")) ((Nil))) else filter (aux ("wjq")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("woq")) (if string_eq ("xyx") ("sic") then ("sic"::filter (aux ("xyx")) ((Nil))) else filter (aux ("xyx")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("riq")) (if string_eq ("gma") ("iev") then ("iev"::filter (aux ("gma")) ((Nil))) else filter (aux ("gma")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("fqs")) (if string_eq ("sxl") ("bdv") then ("bdv"::filter (aux ("sxl")) ((Nil))) else filter (aux ("sxl")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("pua")) (if string_eq ("gty") ("ktn") then ("ktn"::filter (aux ("gty")) ((Nil))) else filter (aux ("gty")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string1) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1548


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1549


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string1) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string1) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string1 = string3->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string1) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1550


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1551


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string1 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1552


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string1)(rank:12.)
=================================================
Progress: 1553


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite <- Case2 in goal at 3
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("syr")) (if string_eq ("ngu") ("syr") then ("ngu"::filter (aux ("syr")) ((Nil))) else filter (aux ("ngu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("vfu")) (if string_eq ("xzu") ("vfu") then ("xzu"::filter (aux ("vfu")) ((Nil))) else filter (aux ("xzu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ekf")) (if string_eq ("ylw") ("ekf") then ("ylw"::filter (aux ("ekf")) ((Nil))) else filter (aux ("ylw")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("xco")) (if string_eq ("fsh") ("xco") then ("fsh"::filter (aux ("fsh")) ((Nil))) else filter (aux ("fsh")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("oex")) (if string_eq ("xcg") ("oex") then ("xcg"::filter (aux ("xcg")) ((Nil))) else filter (aux ("xcg")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ndw")) (if string_eq ("xvk") ("ndw") then ("xvk"::filter (aux ("xvk")) ((Nil))) else filter (aux ("xvk")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("gkl")) (if string_eq ("dyk") ("gkl") then ("uta"::filter (aux ("dyk")) ((Nil))) else filter (aux ("dyk")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rfc")) (if string_eq ("vhd") ("rfc") then ("tys"::filter (aux ("vhd")) ((Nil))) else filter (aux ("vhd")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("cpg")) (if string_eq ("hev") ("cpg") then ("mwi"::filter (aux ("hev")) ((Nil))) else filter (aux ("hev")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("kry")) (if string_eq ("qfh") ("kry") then ("hgl"::filter (aux ("qfh")) ((Nil))) else filter (aux ("qfh")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("kfd")) (if string_eq ("qda") ("kfd") then ("sev"::filter (aux ("qda")) ((Nil))) else filter (aux ("qda")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("gug")) (if string_eq ("zyr") ("gug") then ("jhp"::filter (aux ("zyr")) ((Nil))) else filter (aux ("zyr")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string3) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1554


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string3) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string3) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string3) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1555


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1556


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:13.)
=================================================
Progress: 1557


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true->string1 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:13.)
=================================================
Progress: 1558


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 1
rewrite <- Case2 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("sca")) (if string_eq ("sca") ("sca") then ("ovg"::filter (aux ("beu")) ((Nil))) else filter (aux ("beu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("vzh")) (if string_eq ("vzh") ("vzh") then ("mfl"::filter (aux ("bde")) ((Nil))) else filter (aux ("bde")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("pxl")) (if string_eq ("pxl") ("pxl") then ("ref"::filter (aux ("asl")) ((Nil))) else filter (aux ("asl")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("yqk")) (if string_eq ("qpl") ("yqk") then ("qpl"::filter (aux ("htv")) ((Nil))) else filter (aux ("htv")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("wxa")) (if string_eq ("opc") ("wxa") then ("opc"::filter (aux ("jow")) ((Nil))) else filter (aux ("jow")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("gch")) (if string_eq ("dwt") ("gch") then ("dwt"::filter (aux ("hax")) ((Nil))) else filter (aux ("hax")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("ofa")) (if string_eq ("pvr") ("ofa") then ("syq"::filter (aux ("pvr")) ((Nil))) else filter (aux ("pvr")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("iew")) (if string_eq ("pyy") ("iew") then ("jkb"::filter (aux ("pyy")) ((Nil))) else filter (aux ("pyy")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("uss")) (if string_eq ("msd") ("uss") then ("ads"::filter (aux ("msd")) ((Nil))) else filter (aux ("msd")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("avz")) (if string_eq ("uqy") ("avz") then ("dpt"::filter (aux ("uqy")) ((Nil))) else filter (aux ("uqy")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("uej")) (if string_eq ("hzm") ("uej") then ("whl"::filter (aux ("hzm")) ((Nil))) else filter (aux ("hzm")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("fdq")) (if string_eq ("dgf") ("fdq") then ("qox"::filter (aux ("dgf")) ((Nil))) else filter (aux ("dgf")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1559


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1560


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string1) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1561


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 2
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("wtt")) (if string_eq ("jga") ("wtt") then ("gts"::filter (aux ("wtt")) ((Nil))) else filter (aux ("jga")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("mge")) (if string_eq ("dni") ("mge") then ("lxm"::filter (aux ("mge")) ((Nil))) else filter (aux ("dni")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("uzr")) (if string_eq ("zfe") ("uzr") then ("euf"::filter (aux ("uzr")) ((Nil))) else filter (aux ("zfe")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("aqe")) (if string_eq ("uwc") ("aqe") then ("yny"::filter (aux ("yny")) ((Nil))) else filter (aux ("uwc")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ofz")) (if string_eq ("sci") ("ofz") then ("cmg"::filter (aux ("cmg")) ((Nil))) else filter (aux ("sci")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("oyl")) (if string_eq ("pdx") ("oyl") then ("udk"::filter (aux ("udk")) ((Nil))) else filter (aux ("pdx")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("dcl")) (if string_eq ("gjy") ("dcl") then ("xuf"::filter (aux ("gjy")) ((Nil))) else filter (aux ("gjy")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("suk")) (if string_eq ("zfk") ("suk") then ("kad"::filter (aux ("zfk")) ((Nil))) else filter (aux ("zfk")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("inm")) (if string_eq ("igj") ("inm") then ("xvg"::filter (aux ("igj")) ((Nil))) else filter (aux ("igj")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("qit")) (if string_eq ("ksk") ("qit") then ("obi"::filter (aux ("ksk")) ((Nil))) else filter (aux ("ksk")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("tfw")) (if string_eq ("nwd") ("tfw") then ("zxe"::filter (aux ("nwd")) ((Nil))) else filter (aux ("nwd")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("dse")) (if string_eq ("vgd") ("dse") then ("vaa"::filter (aux ("vgd")) ((Nil))) else filter (aux ("vgd")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1562


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1563


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1564


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 3
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("bwv")) (if string_eq ("xze") ("bwv") then ("mpz"::filter (aux ("xze")) ((Nil))) else filter (aux ("bwv")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("pwf")) (if string_eq ("ifp") ("pwf") then ("rxj"::filter (aux ("ifp")) ((Nil))) else filter (aux ("pwf")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ejg")) (if string_eq ("hzr") ("ejg") then ("rik"::filter (aux ("hzr")) ((Nil))) else filter (aux ("ejg")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 3
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("oar")) (if string_eq ("kev") ("oar") then ("xnl"::filter (aux ("kev")) ((Nil))) else filter (aux ("xnl")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("fhi")) (if string_eq ("otc") ("fhi") then ("bfy"::filter (aux ("otc")) ((Nil))) else filter (aux ("bfy")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("vmq")) (if string_eq ("xea") ("vmq") then ("lwi"::filter (aux ("xea")) ((Nil))) else filter (aux ("lwi")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("jye")) (if string_eq ("qsd") ("jye") then ("wmk"::filter (aux ("qsd")) ((Nil))) else filter (aux ("qsd")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("eye")) (if string_eq ("mpu") ("eye") then ("lxp"::filter (aux ("mpu")) ((Nil))) else filter (aux ("mpu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("xtf")) (if string_eq ("dho") ("xtf") then ("hov"::filter (aux ("dho")) ((Nil))) else filter (aux ("dho")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("tzr")) (if string_eq ("ccm") ("tzr") then ("gdn"::filter (aux ("ccm")) ((Nil))) else filter (aux ("ccm")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("pgm")) (if string_eq ("hud") ("pgm") then ("svy"::filter (aux ("hud")) ((Nil))) else filter (aux ("hud")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("knv")) (if string_eq ("ndr") ("knv") then ("rsq"::filter (aux ("ndr")) ((Nil))) else filter (aux ("ndr")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1565


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1566


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1567


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string1)(rank:12.)
=================================================
Progress: 1568


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
rewrite <- Case3 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("tiv")) (if string_eq ("wec") ("tiv") then ("tiv"::filter (aux ("jxi")) ((Nil))) else filter (aux ("jxi")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("tda")) (if string_eq ("eem") ("tda") then ("tda"::filter (aux ("wxm")) ((Nil))) else filter (aux ("wxm")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("fue")) (if string_eq ("skb") ("fue") then ("fue"::filter (aux ("fww")) ((Nil))) else filter (aux ("fww")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("tdu")) (if string_eq ("dgd") ("tdu") then ("tdu"::filter (aux ("dgd")) ((Nil))) else filter (aux ("dgd")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("uaq")) (if string_eq ("doo") ("uaq") then ("uaq"::filter (aux ("doo")) ((Nil))) else filter (aux ("doo")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rnv")) (if string_eq ("peg") ("rnv") then ("rnv"::filter (aux ("peg")) ((Nil))) else filter (aux ("peg")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("wfn")) (if string_eq ("ilu") ("owj") then ("wfn"::filter (aux ("ilu")) ((Nil))) else filter (aux ("ilu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("egw")) (if string_eq ("wxu") ("vfe") then ("egw"::filter (aux ("wxu")) ((Nil))) else filter (aux ("wxu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("cjt")) (if string_eq ("nuy") ("lru") then ("cjt"::filter (aux ("nuy")) ((Nil))) else filter (aux ("nuy")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("udm")) (if string_eq ("oxx") ("jdh") then ("udm"::filter (aux ("oxx")) ((Nil))) else filter (aux ("oxx")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ivr")) (if string_eq ("qvb") ("cgz") then ("ivr"::filter (aux ("qvb")) ((Nil))) else filter (aux ("qvb")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("wnc")) (if string_eq ("aal") ("qqc") then ("wnc"::filter (aux ("aal")) ((Nil))) else filter (aux ("aal")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string3) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1569


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string3) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string3) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string_eq (string3) (string2) = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1570


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1571


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
rewrite <- Case3 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("jnj")) (if string_eq ("los") ("jnj") then ("jnj"::filter (aux ("zgf")) ((Nil))) else filter (aux ("los")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("voa")) (if string_eq ("omr") ("voa") then ("voa"::filter (aux ("wzz")) ((Nil))) else filter (aux ("omr")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("xfc")) (if string_eq ("pkf") ("xfc") then ("xfc"::filter (aux ("tbo")) ((Nil))) else filter (aux ("pkf")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("whq")) (if string_eq ("arp") ("whq") then ("whq"::filter (aux ("arp")) ((Nil))) else filter (aux ("arp")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("slu")) (if string_eq ("whw") ("slu") then ("slu"::filter (aux ("whw")) ((Nil))) else filter (aux ("whw")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("xae")) (if string_eq ("gcg") ("xae") then ("xae"::filter (aux ("gcg")) ((Nil))) else filter (aux ("gcg")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("esw")) (if string_eq ("cqi") ("bqa") then ("esw"::filter (aux ("cqi")) ((Nil))) else filter (aux ("cqi")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("iis")) (if string_eq ("jme") ("woy") then ("iis"::filter (aux ("jme")) ((Nil))) else filter (aux ("jme")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rhp")) (if string_eq ("ylo") ("esw") then ("rhp"::filter (aux ("ylo")) ((Nil))) else filter (aux ("ylo")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("mhm")) (if string_eq ("umz") ("hgh") then ("mhm"::filter (aux ("umz")) ((Nil))) else filter (aux ("umz")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("vzq")) (if string_eq ("njw") ("idd") then ("vzq"::filter (aux ("njw")) ((Nil))) else filter (aux ("njw")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("uja")) (if string_eq ("htu") ("ejb") then ("uja"::filter (aux ("htu")) ((Nil))) else filter (aux ("htu")) ((Nil)))) ((Nil))
=================================================
Progress: 1572


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 3(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
rewrite <- Case3 in goal at 3
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("hat")) (if string_eq ("zum") ("hat") then ("hat"::filter (aux ("zum")) ((Nil))) else filter (aux ("ukw")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("iav")) (if string_eq ("wlc") ("iav") then ("iav"::filter (aux ("wlc")) ((Nil))) else filter (aux ("hkp")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ihz")) (if string_eq ("nnd") ("ihz") then ("ihz"::filter (aux ("nnd")) ((Nil))) else filter (aux ("jea")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("hpn")) (if string_eq ("qin") ("hpn") then ("hpn"::filter (aux ("qin")) ((Nil))) else filter (aux ("qin")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("tzq")) (if string_eq ("xup") ("tzq") then ("tzq"::filter (aux ("xup")) ((Nil))) else filter (aux ("xup")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("por")) (if string_eq ("tdk") ("por") then ("por"::filter (aux ("tdk")) ((Nil))) else filter (aux ("tdk")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("pre")) (if string_eq ("xjx") ("hjp") then ("pre"::filter (aux ("xjx")) ((Nil))) else filter (aux ("xjx")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("nnb")) (if string_eq ("yzx") ("ezl") then ("nnb"::filter (aux ("yzx")) ((Nil))) else filter (aux ("yzx")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ulm")) (if string_eq ("dgy") ("bhh") then ("ulm"::filter (aux ("dgy")) ((Nil))) else filter (aux ("dgy")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("geb")) (if string_eq ("hpq") ("emq") then ("geb"::filter (aux ("hpq")) ((Nil))) else filter (aux ("hpq")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("neq")) (if string_eq ("iso") ("fnc") then ("neq"::filter (aux ("iso")) ((Nil))) else filter (aux ("iso")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("mnj")) (if string_eq ("hmv") ("llv") then ("mnj"::filter (aux ("hmv")) ((Nil))) else filter (aux ("hmv")) ((Nil)))) ((Nil))
=================================================
Progress: 1573


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1574


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
=================================================
Progress: 1575


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 2
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("zsi")) (if string_eq ("rtu") ("zsi") then ("zsi"::filter (aux ("zsi")) ((Nil))) else filter (aux ("rtu")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("hnb")) (if string_eq ("pzv") ("hnb") then ("hnb"::filter (aux ("hnb")) ((Nil))) else filter (aux ("pzv")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("yuo")) (if string_eq ("tpa") ("yuo") then ("yuo"::filter (aux ("yuo")) ((Nil))) else filter (aux ("tpa")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("fyu")) (if string_eq ("oza") ("fxf") then ("fyu"::filter (aux ("fxf")) ((Nil))) else filter (aux ("oza")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("nef")) (if string_eq ("xoi") ("uis") then ("nef"::filter (aux ("uis")) ((Nil))) else filter (aux ("xoi")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ahq")) (if string_eq ("cib") ("bit") then ("ahq"::filter (aux ("bit")) ((Nil))) else filter (aux ("cib")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("ohf")) (if string_eq ("xje") ("msu") then ("ohf"::filter (aux ("xje")) ((Nil))) else filter (aux ("xje")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("iuu")) (if string_eq ("ckt") ("foj") then ("iuu"::filter (aux ("ckt")) ((Nil))) else filter (aux ("ckt")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("qcm")) (if string_eq ("zcs") ("nbl") then ("qcm"::filter (aux ("zcs")) ((Nil))) else filter (aux ("zcs")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("peh")) (if string_eq ("wkg") ("ukn") then ("peh"::filter (aux ("wkg")) ((Nil))) else filter (aux ("wkg")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("djc")) (if string_eq ("tub") ("bhu") then ("djc"::filter (aux ("tub")) ((Nil))) else filter (aux ("tub")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("siu")) (if string_eq ("ouq") ("irz") then ("siu"::filter (aux ("ouq")) ((Nil))) else filter (aux ("ouq")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1576


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1577


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1578


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 3
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("urc")) (if string_eq ("hqu") ("urc") then ("urc"::filter (aux ("hqu")) ((Nil))) else filter (aux ("urc")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("bgx")) (if string_eq ("gxv") ("bgx") then ("bgx"::filter (aux ("gxv")) ((Nil))) else filter (aux ("bgx")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("fwh")) (if string_eq ("tbz") ("fwh") then ("fwh"::filter (aux ("tbz")) ((Nil))) else filter (aux ("fwh")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 3
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("kzp")) (if string_eq ("arr") ("nvt") then ("kzp"::filter (aux ("arr")) ((Nil))) else filter (aux ("nvt")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("goy")) (if string_eq ("jqb") ("rbg") then ("goy"::filter (aux ("jqb")) ((Nil))) else filter (aux ("rbg")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("inw")) (if string_eq ("hnk") ("leu") then ("inw"::filter (aux ("hnk")) ((Nil))) else filter (aux ("leu")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("yjt")) (if string_eq ("kic") ("btg") then ("yjt"::filter (aux ("kic")) ((Nil))) else filter (aux ("kic")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("slz")) (if string_eq ("jdl") ("cph") then ("slz"::filter (aux ("jdl")) ((Nil))) else filter (aux ("jdl")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("mdu")) (if string_eq ("igo") ("gbl") then ("mdu"::filter (aux ("igo")) ((Nil))) else filter (aux ("igo")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("mkm")) (if string_eq ("raq") ("yxp") then ("mkm"::filter (aux ("raq")) ((Nil))) else filter (aux ("raq")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("pwa")) (if string_eq ("acc") ("bbx") then ("pwa"::filter (aux ("acc")) ((Nil))) else filter (aux ("acc")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("nxo")) (if string_eq ("wux") ("qab") then ("nxo"::filter (aux ("wux")) ((Nil))) else filter (aux ("wux")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1579


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1580


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string1)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 1581


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1582


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 12
Tactic List : 10
case string_eq (string3) (string1)(rank:11.)
rewrite <- Case1 in goal at 1(rank:18.)
rewrite <- Case3 in goal at 1(rank:18.)
rewrite Case2 in goal at 0(rank:26.)
rewrite Case2 in goal at 1(rank:26.)
rewrite Case2 in goal at 2(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 2(rank:26.)
rewrite <- Case3 in goal at 2(rank:26.)
=================================================
Progress: 1583


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 12
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
rewrite Case3 in goal at 1(rank:27.)
rewrite Case3 in goal at 2(rank:27.)
rewrite Case3 in goal at 3(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite Case3 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
case any_eq (string3) (string1)(rank:12.)
rewrite <- Case3 in goal at 1(rank:11.)
=================================================
Progress: 1584


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1585


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = true

0 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
original goal
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lemma
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
tactics
assert forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if string_eq (string2) (string1) then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
intro string1
intro string2
intro Cond1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string1)(rank:12.)
=================================================
Progress: 1586


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if false then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1587


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if false then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 44
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:10.)
rewrite <- Case2 in goal at 1(rank:10.)
rewrite Case1 in goal at 0(rank:18.)
rewrite Case2 in goal at 0(rank:26.)
rewrite Case2 in goal at 1(rank:26.)
rewrite Case2 in goal at 2(rank:26.)
rewrite <- Case2 in goal at 2(rank:10.)
rewrite <- Case2 in goal at 3(rank:10.)
rewrite <- Case3 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
=================================================
Progress: 1588


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 1589


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 1590


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Case3 in goal at 0(rank:18.)
=================================================
Progress: 1591


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Case3 in goal at 0(rank:18.)
=================================================
Progress: 1592


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1593


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Case3 in goal at 0(rank:18.)
=================================================
Progress: 1594


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case any_eq (string3) (string1)(rank:11.)
rewrite <- Case1 in goal at 1(rank:18.)
rewrite <- Case3 in goal at 1(rank:18.)
=================================================
Progress: 1595


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1596


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
rewrite <- Case3 in goal at 1
rewrite string_refl in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("plc")) (if true then ("plc"::filter (aux ("irf")) ((Nil))) else filter (aux ("irf")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ekd")) (if true then ("ekd"::filter (aux ("hcv")) ((Nil))) else filter (aux ("hcv")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("rkn")) (if true then ("rkn"::filter (aux ("xjg")) ((Nil))) else filter (aux ("xjg")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
rewrite <- Case3 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("oqm")) (if string_eq ("zar") ("zar") then ("oqm"::filter (aux ("brp")) ((Nil))) else filter (aux ("brp")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("kqh")) (if string_eq ("rrr") ("rrr") then ("kqh"::filter (aux ("gaa")) ((Nil))) else filter (aux ("gaa")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ifh")) (if string_eq ("llc") ("llc") then ("ifh"::filter (aux ("mgu")) ((Nil))) else filter (aux ("mgu")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("wkv")) (if string_eq ("fzo") ("bqw") then ("wkv"::filter (aux ("fzo")) ((Nil))) else filter (aux ("fzo")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("bss")) (if string_eq ("mwj") ("xgr") then ("bss"::filter (aux ("mwj")) ((Nil))) else filter (aux ("mwj")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("ult")) (if string_eq ("oxn") ("jky") then ("ult"::filter (aux ("oxn")) ((Nil))) else filter (aux ("oxn")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("pyz")) (if string_eq ("ebg") ("syp") then ("syp"::filter (aux ("ebg")) ((Nil))) else filter (aux ("ebg")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("zix")) (if string_eq ("zbq") ("yen") then ("yen"::filter (aux ("zbq")) ((Nil))) else filter (aux ("zbq")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("biu")) (if string_eq ("yzb") ("cnl") then ("cnl"::filter (aux ("yzb")) ((Nil))) else filter (aux ("yzb")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("jpm")) (if string_eq ("lvf") ("mgb") then ("mgb"::filter (aux ("lvf")) ((Nil))) else filter (aux ("lvf")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("yla")) (if string_eq ("wsh") ("exw") then ("exw"::filter (aux ("wsh")) ((Nil))) else filter (aux ("wsh")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("nfm")) (if string_eq ("ilw") ("wew") then ("wew"::filter (aux ("ilw")) ((Nil))) else filter (aux ("ilw")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1597


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string1 = string3->string3 = string2 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1598


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1599


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true -> true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 1600


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), true = true -> true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), true = true -> true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 1601


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), true = true -> true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
true = true -> true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1602


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
true = true -> true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case any_eq (string1) (string1)(rank:10.)
=================================================
Progress: 1603


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (string1) (string1)(rank : 10.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string1) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1604


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string1) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string1) (string1) = false
---------------------------------------
true = false

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9.)
=================================================
Progress: 1605


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string1) (string1) = false
---------------------------------------
true = false

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9.)


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string1) (string1) = false
---------------------------------------
true = any_eq (string1) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: true = string_eq ("umm") ("umm")
Prop: true = string_eq ("oot") ("oot")
Prop: true = string_eq ("ogh") ("ogh")
Lemma List
forall (string1:string), true = true->string_eq (string1) (string1) = false -> true = string_eq (string1) (string1)
End of Lemma List


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string1) (string1) = false
---------------------------------------
true = any_eq (string1) (string1)

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1606


1st goal of : forall (string1:string) (string2:string), true = true -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
string1 : string
string2 : string
Cond1 : true = true
Case1 : any_eq (string1) (string1) = false
---------------------------------------
true = any_eq (string1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string), true = true->string_eq (string1) (string1) = false -> true = string_eq (string1) (string1)(rank : 0.)


1st goal of : forall (string1:string), true = true->string_eq (string1) (string1) = false -> true = string_eq (string1) (string1)

---------------------------------------
forall (string1:string), true = true->string_eq (string1) (string1) = false -> true = string_eq (string1) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 1607


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string2) (string3) then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if false then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1608


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string3 = string2
---------------------------------------
true = list_eq (filter (aux (string1)) (if false then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 47
Tactic List : 11
rewrite <- Case2 in goal at 0(rank:10.)
rewrite Cond1 in goal at 0(rank:18.)
rewrite Case2 in goal at 0(rank:26.)
rewrite Case2 in goal at 1(rank:26.)
rewrite Case2 in goal at 2(rank:26.)
rewrite Case2 in goal at 3(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 1(rank:10.)
rewrite <- Case2 in goal at 2(rank:10.)
rewrite <- Case3 in goal at 0(rank:26.)
case any_eq (string3) (string1)(rank:11.)
=================================================
Progress: 1609


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 1610


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:10.)
=================================================
Progress: 1611


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case string_eq (string3) (string1)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 1612


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 1613


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = list_eq (if if true then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 1614


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string3)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 12
rewrite <- Case3 in goal at 0(rank:11.)
rewrite <- Case3 in goal at 2(rank:11.)
rewrite Case2 in goal at 0(rank:27.)
rewrite Case2 in goal at 2(rank:27.)
rewrite Case3 in goal at 1(rank:27.)
rewrite Case3 in goal at 2(rank:27.)
rewrite Case3 in goal at 3(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite Case3 in goal at 0(rank:27.)
rewrite Case2 in goal at 1(rank:27.)
case any_eq (string3) (string1)(rank:12.)
rewrite <- Case3 in goal at 1(rank:11.)
=================================================
Progress: 1615


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1616


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 1
rewrite string_refl in goal at 0
rewrite <- Case3 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("tpm")) (if true then ("tpm"::filter (aux ("ppx")) ((Nil))) else filter (aux ("wuo")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("yrj")) (if true then ("yrj"::filter (aux ("rjx")) ((Nil))) else filter (aux ("pox")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("esa")) (if true then ("esa"::filter (aux ("upw")) ((Nil))) else filter (aux ("hgw")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 1
rewrite string_refl in goal at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("xgb")) (if true then ("bfe"::filter (aux ("bfe")) ((Nil))) else filter (aux ("ywr")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("dps")) (if true then ("dtl"::filter (aux ("dtl")) ((Nil))) else filter (aux ("xki")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("elb")) (if true then ("nys"::filter (aux ("nys")) ((Nil))) else filter (aux ("bpg")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case2 in goal at 1
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("mxn")) (if string_eq ("hdy") ("hdy") then ("hdy"::filter (aux ("hdy")) ((Nil))) else filter (aux ("lzs")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("yvw")) (if string_eq ("bgr") ("bgr") then ("bgr"::filter (aux ("bgr")) ((Nil))) else filter (aux ("tzi")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("itk")) (if string_eq ("ogq") ("ogq") then ("ogq"::filter (aux ("ogq")) ((Nil))) else filter (aux ("gwv")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("vyf")) (if string_eq ("dgn") ("hjr") then ("hjr"::filter (aux ("hjr")) ((Nil))) else filter (aux ("dgn")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("kdv")) (if string_eq ("sfh") ("knu") then ("knu"::filter (aux ("knu")) ((Nil))) else filter (aux ("sfh")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("cdu")) (if string_eq ("sqx") ("zuw") then ("zuw"::filter (aux ("zuw")) ((Nil))) else filter (aux ("sqx")) ((Nil)))) ((Nil))
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = list_eq (filter (aux ("jgy")) (if string_eq ("llr") ("qqv") then ("qqv"::filter (aux ("qqv")) ((Nil))) else filter (aux ("llr")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("zqo")) (if string_eq ("zkw") ("deb") then ("deb"::filter (aux ("deb")) ((Nil))) else filter (aux ("zkw")) ((Nil)))) ((Nil))
Prop: true = list_eq (filter (aux ("omk")) (if string_eq ("aok") ("hal") then ("hal"::filter (aux ("hal")) ((Nil))) else filter (aux ("aok")) ((Nil)))) ((Nil))
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if true then (string1::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1617


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string2
Case3 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->string3 = string2->string1 = string3 -> true = list_eq (filter (aux (string1)) (if string_eq (string3) (string3) then (string3::filter (aux (string3)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
