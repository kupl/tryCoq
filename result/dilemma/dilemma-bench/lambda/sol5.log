Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = if list_eq (getStn (lambda1)) ((Nil)) then true else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:5)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = if list_eq (getStn (lambda1)) ((Nil)) then true else false

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = if list_eq (getStn (V (string1))) ((Nil)) then true else false

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = if list_eq (getStn (V (string1))) ((Nil)) then true else false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = if list_eq (getStn (P (string1) (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = if list_eq (getStn (P (string1) (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))(rank:5)
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
>>> case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = true

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:5)
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = true

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
rewrite <- Case1 in goal at 0
Lemma : forall (lambda2:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Model : lambda2: V ("yvo"), string1: "gnr"
Model : lambda2: V ("uvy"), string1: "vwn"
Model : lambda2: V ("ccl"), string1: "uvu"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("yvo")) (("gnr"::(Nil))) = list_eq (filter (aux ("gnr")) (getStn (V ("yvo")))) ((Nil))
sub_check_ta1 (V ("uvy")) (("vwn"::(Nil))) = list_eq (filter (aux ("vwn")) (getStn (V ("uvy")))) ((Nil))
sub_check_ta1 (V ("ccl")) (("uvu"::(Nil))) = list_eq (filter (aux ("uvu")) (getStn (V ("ccl")))) ((Nil))
Simplifying took 0.004684 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 8


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:5)
intro string1(rank:5)
induction lambda1(rank:15)
=================================================
Progress: 9


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro lambda1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:5)
=================================================
Progress: 10


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:7)
=================================================
Progress: 11


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5)
=================================================
Progress: 12


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:5)
=================================================
Progress: 13


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
Lemma : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
Model : lambda1: P ("epl") (V ("ihy")), string1: "xwq"
Model : lambda1: P ("mdy") (C (C (C (V ("hhx")) (V ("lqq"))) (V ("edg"))) (C (V ("wsj")) (V ("jkv")))), string1: "huz"
Model : lambda1: V ("pzo"), string1: "wow"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (P ("epl") (V ("ihy"))) (("xwq"::(Nil))) = true
sub_check_ta1 (P ("mdy") (C (C (C (V ("hhx")) (V ("lqq"))) (V ("edg"))) (C (V ("wsj")) (V ("jkv"))))) (("huz"::(Nil))) = true
sub_check_ta1 (V ("pzo")) (("wow"::(Nil))) = true
Simplifying took 0.011655 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 14


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:7)
intro string1(rank:7)
induction lambda1(rank:17)
=================================================
Progress: 15


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 16


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro lambda1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 17


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9)
=================================================
Progress: 18


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 19


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 20


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 21


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:7)
=================================================
Progress: 22


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
Lemma : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
Model : lambda1: P ("pam") (V ("jtq")), string1: "vmj"
Model : lambda1: V ("exe"), string1: "kju"
Model : lambda1: C (V ("afi")) (V ("tsr")), string1: "svb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (P ("pam") (V ("jtq"))) (("vmj"::(Nil))) = list_eq (filter (aux ("vmj")) (getStn (P ("pam") (V ("jtq"))))) ((Nil))
sub_check_ta1 (V ("exe")) (("kju"::(Nil))) = list_eq (filter (aux ("kju")) (getStn (V ("exe")))) ((Nil))
sub_check_ta1 (C (V ("afi")) (V ("tsr"))) (("svb"::(Nil))) = list_eq (filter (aux ("svb")) (getStn (C (V ("afi")) (V ("tsr"))))) ((Nil))
Simplifying took 0.006049 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 23


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:9)
intro string1(rank:9)
induction lambda1(rank:19)
=================================================
Progress: 24


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:7)
=================================================
Progress: 25


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 26


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 27


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 28


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 29


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "caz", string2: "rbf"
Model : string1: "ubv", string2: "mak"
Model : string1: "bsu", string2: "phx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("caz") ("rbf") = true
string_eq ("ubv") ("mak") = true
string_eq ("bsu") ("phx") = true
Simplifying took 0.001584 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 30


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 31


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 32


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 33


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 34


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7)
=================================================
Progress: 35


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
Cond3 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond3 in goal at 0(rank:7)
=================================================
Progress: 36


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
Cond3 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
Cond3 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 37


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:8)
rewrite <- Case1 in goal at 1(rank:8)
rewrite Case1 in goal at 0(rank:24)
rewrite Case1 in goal at 1(rank:24)
rewrite Case1 in goal at 2(rank:24)
rewrite Case1 in goal at 3(rank:24)
rewrite <- Case1 in goal at 2(rank:8)
case if string_eq (string2) (string1) then false else true(rank:9)
rewrite Cond1 in goal at 0(rank:16)
=================================================
Progress: 38


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 39


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 40


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "cqb", string2: "yuo"
Model : string1: "fdh", string2: "kku"
Model : string1: "rhj", string2: "deb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("yuo") ("cqb") then false else true then ("cqb"::filter (aux ("cqb")) ((Nil))) else filter (aux ("cqb")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("kku") ("fdh") then false else true then ("fdh"::filter (aux ("fdh")) ((Nil))) else filter (aux ("fdh")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("deb") ("rhj") then false else true then ("rhj"::filter (aux ("rhj")) ((Nil))) else filter (aux ("rhj")) ((Nil))) ((Nil))
Simplifying took 0.001194 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 41


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 42


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 43


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 44


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 45


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case if string_eq (string2) (string1) then false else true(rank:8)
rewrite Cond2 in goal at 0(rank:23)
rewrite Cond2 in goal at 1(rank:23)
rewrite Cond2 in goal at 2(rank:23)
rewrite Cond2 in goal at 3(rank:23)
rewrite <- Cond2 in goal at 0(rank:23)
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 13
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
rewrite <- Case1 in goal at 0(rank:23)
rewrite <- Case1 in goal at 1(rank:15)
rewrite <- Case1 in goal at 2(rank:23)
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "vla", string2: "hir"
Model : string1: "cqv", string2: "gtq"
Model : string1: "mpl", string2: "myd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("vla") ("hir") = true
string_eq ("cqv") ("gtq") = true
string_eq ("mpl") ("myd") = true
Simplifying took 0.003029 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 51


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 52


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 53


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 54


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 55


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7)
=================================================
Progress: 56


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:7)
=================================================
Progress: 57


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 58


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 59


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 60


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11)
=================================================
Progress: 61


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 62


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 63


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:10)
=================================================
Progress: 64


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9)
=================================================
Progress: 65


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
Lemma : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
Model : lambda1: V ("nji"), string1: "zop"
Model : lambda1: P ("jnt") (V ("sgs")), string1: "kug"
Model : lambda1: V ("ian"), string1: "wvh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("nji")) (("zop"::(Nil))) = true
sub_check_ta1 (P ("jnt") (V ("sgs"))) (("kug"::(Nil))) = true
sub_check_ta1 (V ("ian")) (("wvh"::(Nil))) = true
Simplifying took 0.003530 seconds
Result : true
advanced_generalize done
=================================================
Progress: 66


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 67


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9)
=================================================
Progress: 68


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
reflexivity
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "efa", string2: "zey"
Model : string1: "fxs", string2: "tkj"
Model : string1: "ion", string2: "ziv"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("efa") ("zey") = true
string_eq ("fxs") ("tkj") = true
string_eq ("ion") ("ziv") = true
Simplifying took 0.002069 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 69


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 70


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 71


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 72


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9)
=================================================
Progress: 73


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:9)
=================================================
Progress: 74


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 75


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 76


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 77


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 78


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:11)
=================================================
Progress: 79


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 80


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 81


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 82


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 83


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "nbn", string2: "oxi"
Model : string1: "kwi", string2: "xii"
Model : string1: "tkb", string2: "znw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("nbn") ("oxi") = true
string_eq ("kwi") ("xii") = true
string_eq ("tkb") ("znw") = true
Simplifying took 0.003487 seconds
Result : true
advanced_generalize done
=================================================
Progress: 84


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string2) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 85


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 86


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 87


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "xdt", string2: "pwk"
Model : string1: "ubg", string2: "jtj"
Model : string1: "wzn", string2: "fam"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("pwk") ("xdt") then false else true then ("xdt"::filter (aux ("xdt")) ((Nil))) else filter (aux ("xdt")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("jtj") ("ubg") then false else true then ("ubg"::filter (aux ("ubg")) ((Nil))) else filter (aux ("ubg")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("fam") ("wzn") then false else true then ("wzn"::filter (aux ("wzn")) ((Nil))) else filter (aux ("wzn")) ((Nil))) ((Nil))
Simplifying took 0.002512 seconds
Result : true
advanced_generalize done
=================================================
Progress: 88


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 89


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
=================================================
Progress: 90


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 91


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 92


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "rjk", string2: "agx"
Model : string1: "fvu", string2: "urp"
Model : string1: "pzm", string2: "oxq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("rjk") ("agx") = true
string_eq ("fvu") ("urp") = true
string_eq ("pzm") ("oxq") = true
Simplifying took 0.001857 seconds
Result : true
advanced_generalize done
=================================================
Progress: 93


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 94


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 95


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 96


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 97


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:7)
=================================================
Progress: 98


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 99


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 100


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 101


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 102


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "axv", string2: "yat"
Model : string1: "dpi", string2: "nit"
Model : string1: "vvd", string2: "rwg"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("axv") ("yat") = true
string_eq ("dpi") ("nit") = true
string_eq ("vvd") ("rwg") = true
Simplifying took 0.001896 seconds
Result : true
advanced_generalize done
=================================================
Progress: 103


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:8)
rewrite <- Case1 in goal at 1(rank:8)
rewrite Case1 in goal at 0(rank:24)
rewrite Case1 in goal at 1(rank:24)
rewrite Case1 in goal at 2(rank:24)
rewrite Case1 in goal at 3(rank:24)
rewrite <- Case1 in goal at 2(rank:8)
case if string_eq (string2) (string1) then false else true(rank:9)
rewrite Cond1 in goal at 0(rank:16)
=================================================
Progress: 104


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 105


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 106


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "nne", string2: "sdb"
Model : string1: "umi", string2: "frh"
Model : string1: "rfd", string2: "hlx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("sdb") ("nne") then false else true then ("nne"::filter (aux ("nne")) ((Nil))) else filter (aux ("nne")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("frh") ("umi") then false else true then ("umi"::filter (aux ("umi")) ((Nil))) else filter (aux ("umi")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("hlx") ("rfd") then false else true then ("rfd"::filter (aux ("rfd")) ((Nil))) else filter (aux ("rfd")) ((Nil))) ((Nil))
Simplifying took 0.001729 seconds
Result : true
advanced_generalize done
=================================================
Progress: 107


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 108


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
rewrite <- Case1 in goal at 0(rank:23)
rewrite <- Case1 in goal at 1(rank:15)
rewrite <- Case1 in goal at 2(rank:23)
=================================================
Progress: 109


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 110


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 111


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "bec", string2: "nob"
Model : string1: "zls", string2: "min"
Model : string1: "dzi", string2: "ckh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bec") ("nob") = true
string_eq ("zls") ("min") = true
string_eq ("dzi") ("ckh") = true
Simplifying took 0.001548 seconds
Result : true
advanced_generalize done
=================================================
Progress: 112


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 113


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 114


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 115


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 116


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "usp", string2: "izi"
Model : string1: "cdz", string2: "qpz"
Model : string1: "tzu", string2: "nyl"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("usp") ("izi") = true
string_eq ("cdz") ("qpz") = true
string_eq ("tzu") ("nyl") = true
Simplifying took 0.002334 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 117


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 118


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 119


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 120


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 121


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:7)
=================================================
Progress: 122


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 123


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:8)
=================================================
Progress: 124


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:16)
rewrite Cond1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 125


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 126


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 127


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 128


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 129


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "fjm", string2: "tiu"
Model : string1: "lei", string2: "glu"
Model : string1: "wun", string2: "fgs"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("fjm") ("tiu") = true
string_eq ("lei") ("glu") = true
string_eq ("wun") ("fgs") = true
Simplifying took 0.001777 seconds
Result : true
advanced_generalize done
=================================================
Progress: 130


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:8)
=================================================
Progress: 131


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:16)
rewrite Cond1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 132


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:24)
rewrite Cond1 in goal at 1(rank:24)
rewrite Cond1 in goal at 2(rank:24)
=================================================
Progress: 133


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "nol", string2: "hdn"
Model : string1: "hrn", string2: "auh"
Model : string1: "xlv", string2: "vin"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("nol") ("hdn") = true
string_eq ("hrn") ("auh") = true
string_eq ("xlv") ("vin") = true
Simplifying took 0.002845 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 134


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8)
=================================================
Progress: 135


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:7)
=================================================
Progress: 136


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 4
Tactic List : 2
rewrite Case1 in goal at 0(rank:15)
rewrite lemma3 in goal at 0(rank:18)
=================================================
Progress: 137


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
assert forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
discriminate
discriminate
rewrite Case1 in goal at 0
advanced_generalize done
=================================================
Progress: 138


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:24)
rewrite Cond1 in goal at 1(rank:24)
rewrite Cond1 in goal at 2(rank:24)
=================================================
Progress: 139


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "uos", string2: "myg"
Model : string1: "kjt", string2: "ipv"
Model : string1: "mfa", string2: "xhp"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("uos") ("myg") = true
string_eq ("kjt") ("ipv") = true
string_eq ("mfa") ("xhp") = true
Simplifying took 0.002647 seconds
Result : true
advanced_generalize done
=================================================
Progress: 140


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = string_eq (string1) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 141


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 142


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 143


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 144


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:10)
=================================================
Progress: 145


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 146


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9)
=================================================
Progress: 147


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
reflexivity
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "cbo", string2: "jif"
Model : string1: "oyp", string2: "hgx"
Model : string1: "bxd", string2: "vuz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("cbo") ("jif") = true
string_eq ("oyp") ("hgx") = true
string_eq ("bxd") ("vuz") = true
Simplifying took 0.001627 seconds
Result : true
advanced_generalize done
=================================================
Progress: 148


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 18)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 149


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9)
=================================================
Progress: 150


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:12)
=================================================
Progress: 151


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 152


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 153


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14)
=================================================
Progress: 154


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 155


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

9 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

8 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 156


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

8 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:16)
=================================================
Progress: 157


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

8 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

11 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:15)
=================================================
Progress: 158


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

11 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

10 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:15)
=================================================
Progress: 159


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

10 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

10 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:18)
=================================================
Progress: 160


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

10 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 18)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

13 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:17)
=================================================
Progress: 161


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

13 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

12 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:17)
=================================================
Progress: 162


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

12 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

12 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:20)
=================================================
Progress: 163


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 164


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 165


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 166


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 167


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:11)
=================================================
Progress: 168


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 169


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 170


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 171


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 172


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "jvu", string2: "yri"
Model : string1: "cpt", string2: "idy"
Model : string1: "mia", string2: "qxh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jvu") ("yri") = true
string_eq ("cpt") ("idy") = true
string_eq ("mia") ("qxh") = true
Simplifying took 0.001968 seconds
Result : true
advanced_generalize done
=================================================
Progress: 173


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string2) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 174


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 175


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 176


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "nhd", string2: "jil"
Model : string1: "ide", string2: "iuf"
Model : string1: "ehd", string2: "jjy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("jil") ("nhd") then false else true then ("nhd"::filter (aux ("nhd")) ((Nil))) else filter (aux ("nhd")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("iuf") ("ide") then false else true then ("ide"::filter (aux ("ide")) ((Nil))) else filter (aux ("ide")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("jjy") ("ehd") then false else true then ("ehd"::filter (aux ("ehd")) ((Nil))) else filter (aux ("ehd")) ((Nil))) ((Nil))
Simplifying took 0.001418 seconds
Result : true
advanced_generalize done
=================================================
Progress: 177


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 178


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
=================================================
Progress: 179


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 180


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 181


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "cdv", string2: "qtf"
Model : string1: "niv", string2: "utr"
Model : string1: "hni", string2: "rso"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("cdv") ("qtf") = true
string_eq ("niv") ("utr") = true
string_eq ("hni") ("rso") = true
Simplifying took 0.001874 seconds
Result : true
advanced_generalize done
=================================================
Progress: 182


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 183


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 184


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 185


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 186


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "qgn", string2: "yvg"
Model : string1: "wrd", string2: "bvi"
Model : string1: "ilr", string2: "fam"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qgn") ("yvg") = true
string_eq ("wrd") ("bvi") = true
string_eq ("ilr") ("fam") = true
Simplifying took 0.002041 seconds
Result : true
advanced_generalize done
=================================================
Progress: 187


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:12)
=================================================
Progress: 188


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:20)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 189


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 190


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 191


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 192


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 193


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "pkd", string2: "eae"
Model : string1: "ncr", string2: "gso"
Model : string1: "oyz", string2: "uyo"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("pkd") ("eae") = true
string_eq ("ncr") ("gso") = true
string_eq ("oyz") ("uyo") = true
Simplifying took 0.002150 seconds
Result : true
advanced_generalize done
=================================================
Progress: 194


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:12)
=================================================
Progress: 195


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:20)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 196


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

12 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

15 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:19)
=================================================
Progress: 197


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

15 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

14 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:19)
=================================================
Progress: 198


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

14 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

14 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:22)
=================================================
Progress: 199


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:28)
rewrite Cond1 in goal at 1(rank:28)
rewrite Cond1 in goal at 2(rank:28)
=================================================
Progress: 200


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "wvq", string2: "zvb"
Model : string1: "lwk", string2: "ucf"
Model : string1: "isw", string2: "xaf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("wvq") ("zvb") = true
string_eq ("lwk") ("ucf") = true
string_eq ("isw") ("xaf") = true
Simplifying took 0.003408 seconds
Result : true
advanced_generalize done
=================================================
Progress: 201


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = string_eq (string1) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 202


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:28)
rewrite Cond1 in goal at 1(rank:28)
rewrite Cond1 in goal at 2(rank:28)
=================================================
Progress: 203


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "ely", string2: "vhm"
Model : string1: "njl", string2: "eoo"
Model : string1: "gaq", string2: "fhi"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ely") ("vhm") = true
string_eq ("njl") ("eoo") = true
string_eq ("gaq") ("fhi") = true
Simplifying took 0.001371 seconds
Result : true
advanced_generalize done
=================================================
Progress: 204


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = string_eq (string1) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 205


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

14 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 22)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

17 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:21)
=================================================
Progress: 206


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

17 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

16 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 207


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

16 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

16 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:24)
=================================================
Progress: 208


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:8)
=================================================
Progress: 209


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 210


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 211


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 212


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 213


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8)
=================================================
Progress: 214


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:8)
=================================================
Progress: 215


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:8)
rewrite Case1 in goal at 0(rank:16)
rewrite Case3 in goal at 0(rank:24)
=================================================
Progress: 216


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 217


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 218


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 219


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 220


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6)
=================================================
Progress: 221


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6)
=================================================
Progress: 222


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite Cond1 in goal at 0
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: V ("dem"), string1: "num", string2: "olo"
Model : lambda2: V ("cnf"), string1: "ylc", string2: "iea"
Model : lambda2: V ("tds"), string1: "ftx", string2: "uue"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("dem")) (("olo"::("num"::(Nil)))) = true
sub_check_ta1 (V ("cnf")) (("iea"::("ylc"::(Nil)))) = true
sub_check_ta1 (V ("tds")) (("uue"::("ftx"::(Nil)))) = true
Simplifying took 0.004317 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 223


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:7)
intro string1(rank:7)
intro string2(rank:7)
induction lambda1(rank:17)
=================================================
Progress: 224


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro lambda1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 225


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:7)
induction lambda1(rank:17)
=================================================
Progress: 226


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9)
=================================================
Progress: 227


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 228


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9)
=================================================
Progress: 229


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 230


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:7)
=================================================
Progress: 231


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
Lemma : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
Model : lambda1: C (V ("nnt")) (P ("xll") (V ("tyu"))), string1: "aks", string2: "vxc"
Model : lambda1: V ("tks"), string1: "wim", string2: "fle"
Model : lambda1: V ("foq"), string1: "gjg", string2: "red"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (C (V ("nnt")) (P ("xll") (V ("tyu")))) (("vxc"::("aks"::(Nil)))) = list_eq (filter (aux ("aks")) (filter (aux ("vxc")) (getStn (C (V ("nnt")) (P ("xll") (V ("tyu"))))))) ((Nil))
sub_check_ta1 (V ("tks")) (("fle"::("wim"::(Nil)))) = list_eq (filter (aux ("wim")) (filter (aux ("fle")) (getStn (V ("tks"))))) ((Nil))
sub_check_ta1 (V ("foq")) (("red"::("gjg"::(Nil)))) = list_eq (filter (aux ("gjg")) (filter (aux ("red")) (getStn (V ("foq"))))) ((Nil))
Simplifying took 0.012143 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 232


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:9)
intro string1(rank:9)
intro string2(rank:9)
induction lambda1(rank:19)
=================================================
Progress: 233


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 234


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 235


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 236


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string2(rank:9)
induction lambda1(rank:19)
=================================================
Progress: 237


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11)
=================================================
Progress: 238


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 239


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 240


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 241


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11)
=================================================
Progress: 242


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 243


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 244


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 245


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 246


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9)
=================================================
Progress: 247


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
Lemma : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
Model : lambda1: V ("wxp"), string1: "gfh", string2: "gnm"
Model : lambda1: V ("rye"), string1: "hoj", string2: "qch"
Model : lambda1: V ("uyz"), string1: "wnb", string2: "nsf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("wxp")) (("gnm"::("gfh"::(Nil)))) = true
sub_check_ta1 (V ("rye")) (("qch"::("hoj"::(Nil)))) = true
sub_check_ta1 (V ("uyz")) (("nsf"::("wnb"::(Nil)))) = true
Simplifying took 0.005028 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 248


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:11)
intro string1(rank:11)
intro string2(rank:11)
induction lambda1(rank:21)
=================================================
Progress: 249


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 250


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 251


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 252


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 253


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 254


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 255


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 256


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 257


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 258


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 259


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 260


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro string2(rank:11)
induction lambda1(rank:21)
=================================================
Progress: 261


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13)
=================================================
Progress: 262


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 263


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 264


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 265


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13)
=================================================
Progress: 266


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 267


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 268


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 269


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 270


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:11)
=================================================
Progress: 271


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
Lemma : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
Model : lambda1: V ("jkt"), string1: "aeh", string2: "lpf"
Model : lambda1: P ("hdk") (V ("evl")), string1: "lkf", string2: "srf"
Model : lambda1: V ("xfb"), string1: "rro", string2: "muz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("jkt")) (("lpf"::("aeh"::(Nil)))) = list_eq (filter (aux ("aeh")) (filter (aux ("lpf")) (getStn (V ("jkt"))))) ((Nil))
sub_check_ta1 (P ("hdk") (V ("evl"))) (("srf"::("lkf"::(Nil)))) = list_eq (filter (aux ("lkf")) (filter (aux ("srf")) (getStn (P ("hdk") (V ("evl")))))) ((Nil))
sub_check_ta1 (V ("xfb")) (("muz"::("rro"::(Nil)))) = list_eq (filter (aux ("rro")) (filter (aux ("muz")) (getStn (V ("xfb"))))) ((Nil))
Simplifying took 0.006863 seconds
Result : true
advanced_generalize done
=================================================
Progress: 272


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 273


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 274


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 275


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 276


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 277


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 278


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 279


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 280


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 281


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 282


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 283


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 284


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 285


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 286


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 287


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 288


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 289


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 290


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 291


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 292


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 293


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 294


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 295


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 296


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 297


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 298


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 299


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 300


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 301


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 302


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 303


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 304


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 305


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 306


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 307


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 308


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 309


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 310


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 311


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 312


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 313


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 314


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 315


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 316


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 317


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 318


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 319


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 320


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 321


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 322


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 323


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 324


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 325


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 326


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 327


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 328


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 329


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 330


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 331


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 332


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 333


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 334


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 335


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 336


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 337


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 338


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 339


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 340


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 341


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 342


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 343


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 344


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 345


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 346


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 347


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 348


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 349


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "wkh", string2: "sco", string3: "mdp"
Model : string1: "eyb", string2: "sky", string3: "ylv"
Model : string1: "mwe", string2: "fcq", string3: "zjy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("sco") ("wkh") then false else true then ("mdp"::filter (aux ("wkh")) ((Nil))) else filter (aux ("wkh")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("sky") ("eyb") then false else true then ("ylv"::filter (aux ("eyb")) ((Nil))) else filter (aux ("eyb")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("fcq") ("mwe") then false else true then ("zjy"::filter (aux ("mwe")) ((Nil))) else filter (aux ("mwe")) ((Nil))) ((Nil))
Simplifying took 0.003527 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 350


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 351


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 352


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 353


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 354


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 355


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 356


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case if string_eq (string2) (string1) then false else true(rank:12)
rewrite Cond3 in goal at 0(rank:27)
rewrite <- Cond3 in goal at 0(rank:27)
=================================================
Progress: 357


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
true = false

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 358


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "vgt", string2: "lcm", string3: "bay"
Model : string1: "tix", string2: "doi", string3: "dal"
Model : string1: "bww", string2: "wah", string3: "kpp"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("bay") ("vgt") then false else true then ("lcm"::filter (aux ("vgt")) ((Nil))) else filter (aux ("vgt")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("dal") ("tix") then false else true then ("doi"::filter (aux ("tix")) ((Nil))) else filter (aux ("tix")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("kpp") ("bww") then false else true then ("wah"::filter (aux ("bww")) ((Nil))) else filter (aux ("bww")) ((Nil))) ((Nil))
Simplifying took 0.001744 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 359


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 360


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 361


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 362


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 363


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 364


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 365


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case if string_eq (string3) (string1) then false else true(rank:12)
rewrite Cond3 in goal at 0(rank:27)
rewrite <- Cond3 in goal at 0(rank:27)
=================================================
Progress: 366


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 12)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : false = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:11)
=================================================
Progress: 367


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : false = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

1 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : true = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 368


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 369


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 370


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 371


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "tih", string2: "ufe", string3: "dop"
Model : string1: "gpt", string2: "idy", string3: "vka"
Model : string1: "kzh", string2: "fep", string3: "kfy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("ufe") ("tih") then false else true then ("dop"::filter (aux ("tih")) ((Nil))) else filter (aux ("tih")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("idy") ("gpt") then false else true then ("vka"::filter (aux ("gpt")) ((Nil))) else filter (aux ("gpt")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("fep") ("kzh") then false else true then ("kfy"::filter (aux ("kzh")) ((Nil))) else filter (aux ("kzh")) ((Nil))) ((Nil))
Simplifying took 0.002604 seconds
Result : true
advanced_generalize done
=================================================
Progress: 372


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "ifz", string2: "igv", string3: "tdx"
Model : string1: "nnc", string2: "zgt", string3: "nlz"
Model : string1: "zbw", string2: "rnd", string3: "fdw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("tdx") ("ifz") then false else true then ("igv"::filter (aux ("ifz")) ((Nil))) else filter (aux ("ifz")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("nlz") ("nnc") then false else true then ("zgt"::filter (aux ("nnc")) ((Nil))) else filter (aux ("nnc")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("fdw") ("zbw") then false else true then ("rnd"::filter (aux ("zbw")) ((Nil))) else filter (aux ("zbw")) ((Nil))) ((Nil))
Simplifying took 0.003756 seconds
Result : true
advanced_generalize done
=================================================
Progress: 373


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 374


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 375


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 376


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 377


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 378


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 379


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 380


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 381


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 382


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 383


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 384


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 385


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 386


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 387


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 388


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : true = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

0 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 389


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 390


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 391


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 392


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 393


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 394


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 395


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 396


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 397


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 398


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 399


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 400


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 401


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 402


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 403


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 5
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 404


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 405


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 406


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 407


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 408


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 409


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 410


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 411


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 412


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 413


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 414


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 415


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 416


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 417


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 418


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 419


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 420


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 421


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 422


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 423


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 424


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 425


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 426


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 427


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 428


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 429


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 430


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 431


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 432


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 433


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 434


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 435


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 436


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 437


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 438


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 439


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 440


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 441


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 442


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 443


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 444


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 445


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 446


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 447


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 448


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 449


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 450


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 451


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 452


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 453


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 454


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 455


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 456


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 457


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 458


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 459


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 460


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 461


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 462


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 463


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 464


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 465


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 466


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 467


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 468


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 469


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 470


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 471


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 472


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 473


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 474


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 475


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 476


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 477


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 478


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 479


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 480


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 481


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 482


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 483


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 484


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 485


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 486


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 487


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 488


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 489


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 490


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 491


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 492


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 493


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 494


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 495


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 496


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 497


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 498


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 499


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 500


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "nlq", string2: "www", string3: "wep"
Model : string1: "igh", string2: "ism", string3: "rbh"
Model : string1: "ksh", string2: "uyg", string3: "kjf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("www") ("nlq") then false else true then ("wep"::filter (aux ("nlq")) ((Nil))) else filter (aux ("nlq")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("ism") ("igh") then false else true then ("rbh"::filter (aux ("igh")) ((Nil))) else filter (aux ("igh")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("uyg") ("ksh") then false else true then ("kjf"::filter (aux ("ksh")) ((Nil))) else filter (aux ("ksh")) ((Nil))) ((Nil))
Simplifying took 0.004140 seconds
Result : true
advanced_generalize done
=================================================
Progress: 501


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "rzn", string2: "itz", string3: "kqv"
Model : string1: "ruo", string2: "mxn", string3: "cyu"
Model : string1: "zto", string2: "wxr", string3: "wsu"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("kqv") ("rzn") then false else true then ("itz"::filter (aux ("rzn")) ((Nil))) else filter (aux ("rzn")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("cyu") ("ruo") then false else true then ("mxn"::filter (aux ("ruo")) ((Nil))) else filter (aux ("ruo")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("wsu") ("zto") then false else true then ("wxr"::filter (aux ("zto")) ((Nil))) else filter (aux ("zto")) ((Nil))) ((Nil))
Simplifying took 0.004711 seconds
Result : true
advanced_generalize done
=================================================
Progress: 502


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 503


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 504


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 505


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 506


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 507


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 508


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 509


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 510


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 511


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 512


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 513


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 514


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 515


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 516


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 517


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 518


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 519


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 520


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 521


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 522


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 523


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 524


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 525


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 526


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 527


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 528


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 529


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 530


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 531


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 532


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 533


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 534


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 535


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 536


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 537


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 538


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 539


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 540


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 541


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 542


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 543


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 544


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 545


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 546


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 547


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 548


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 549


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 550


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 551


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 552


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 553


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 554


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 555


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 556


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 557


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 558


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 559


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 560


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 561


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 562


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 563


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 564


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 565


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 566


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 567


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 568


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 569


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 570


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 571


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 572


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "mnq", string2: "jdw", string3: "ddg"
Model : string1: "srp", string2: "pjv", string3: "hux"
Model : string1: "gjp", string2: "lru", string3: "sxd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("jdw") ("mnq") then false else true then ("ddg"::filter (aux ("mnq")) ((Nil))) else filter (aux ("mnq")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("pjv") ("srp") then false else true then ("hux"::filter (aux ("srp")) ((Nil))) else filter (aux ("srp")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("lru") ("gjp") then false else true then ("sxd"::filter (aux ("gjp")) ((Nil))) else filter (aux ("gjp")) ((Nil))) ((Nil))
Simplifying took 0.002290 seconds
Result : true
advanced_generalize done
=================================================
Progress: 573


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "qjz", string2: "kqj", string3: "qqe"
Model : string1: "zkw", string2: "wqa", string3: "ntm"
Model : string1: "uru", string2: "yvg", string3: "qul"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("qqe") ("qjz") then false else true then ("kqj"::filter (aux ("qjz")) ((Nil))) else filter (aux ("qjz")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("ntm") ("zkw") then false else true then ("wqa"::filter (aux ("zkw")) ((Nil))) else filter (aux ("zkw")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("qul") ("uru") then false else true then ("yvg"::filter (aux ("uru")) ((Nil))) else filter (aux ("uru")) ((Nil))) ((Nil))
Simplifying took 0.003984 seconds
Result : true
advanced_generalize done
=================================================
Progress: 574


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 575


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 576


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 577


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 578


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 579


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 580


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 581


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 582


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 583


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 584


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 585


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 586


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 587


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 588


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 589


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 590


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 591


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 592


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 593


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 594


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 595


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 596


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 597


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 598


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 599


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 600


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 601


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 602


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 603


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 604


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 605


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 606


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 607


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 608


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 609


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 610


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 611


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 612


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 613


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 614


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 615


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 616


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 617


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 618


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 619


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 620


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 621


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "oft", string3: "lrx"
Model : string1: "oqg", string3: "ivd"
Model : string1: "gxt", string3: "rhr"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("oft") ("lrx") = true
string_eq ("oqg") ("ivd") = true
string_eq ("gxt") ("rhr") = true
Simplifying took 0.001873 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 622


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 623


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 624


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 625


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 626


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 627


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:11)
=================================================
Progress: 628


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 629


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 630


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 631


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 632


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 633


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 634


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "nqp", string3: "uju"
Model : string2: "yoo", string3: "vgz"
Model : string2: "zrs", string3: "mgb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("nqp") ("uju") = true
string_eq ("yoo") ("vgz") = true
string_eq ("zrs") ("mgb") = true
Simplifying took 0.004087 seconds
Result : false
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "qvd", string3: "fne"
Model : string2: "ifm", string3: "wfa"
Model : string2: "pgf", string3: "yje"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qvd") ("fne") = true
string_eq ("ifm") ("wfa") = true
string_eq ("pgf") ("yje") = true
Simplifying took 0.002477 seconds
Result : false
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "jrz", string3: "mmg"
Model : string2: "uqz", string3: "ujw"
Model : string2: "trc", string3: "nvc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jrz") ("mmg") = true
string_eq ("uqz") ("ujw") = true
string_eq ("trc") ("nvc") = true
Simplifying took 0.003897 seconds
Result : false
advanced_generalize done
=================================================
Progress: 635


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 636


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 637


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 638


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 639


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 640


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 641


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "jwo", string3: "rle"
Model : string1: "mid", string3: "gpd"
Model : string1: "ppq", string3: "ksh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jwo") ("rle") = true
string_eq ("mid") ("gpd") = true
string_eq ("ppq") ("ksh") = true
Simplifying took 0.001986 seconds
Result : true
advanced_generalize done
=================================================
Progress: 642


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 643


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 644


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 645


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 646


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 647


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "hkp", string3: "rtv"
Model : string2: "ufu", string3: "ven"
Model : string2: "mdq", string3: "jhu"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("hkp") ("rtv") = true
string_eq ("ufu") ("ven") = true
string_eq ("mdq") ("jhu") = true
Simplifying took 0.003030 seconds
Result : false
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "guf", string3: "crj"
Model : string2: "zfp", string3: "pjj"
Model : string2: "kit", string3: "abz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("guf") ("crj") = true
string_eq ("zfp") ("pjj") = true
string_eq ("kit") ("abz") = true
Simplifying took 0.001739 seconds
Result : false
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "kvp", string3: "yyn"
Model : string2: "lkx", string3: "efp"
Model : string2: "uwl", string3: "prq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("kvp") ("yyn") = true
string_eq ("lkx") ("efp") = true
string_eq ("uwl") ("prq") = true
Simplifying took 0.002513 seconds
Result : false
advanced_generalize done
=================================================
Progress: 648


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 649


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 650


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 651


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 652


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 653


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 654


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 655


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 656


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 657


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 658


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 659


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 660


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "vjy", string3: "xef"
Model : string1: "abh", string3: "klx"
Model : string1: "ahh", string3: "pcz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("vjy") ("xef") = true
string_eq ("abh") ("klx") = true
string_eq ("ahh") ("pcz") = true
Simplifying took 0.001920 seconds
Result : true
advanced_generalize done
=================================================
Progress: 661


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 662


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 663


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 664


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 665


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 666


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "crz", string3: "nhp"
Model : string2: "stl", string3: "pyx"
Model : string2: "sbx", string3: "hvs"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("crz") ("nhp") = true
string_eq ("stl") ("pyx") = true
string_eq ("sbx") ("hvs") = true
Simplifying took 0.002063 seconds
Result : false
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "flo", string3: "vue"
Model : string2: "xzo", string3: "ofd"
Model : string2: "nyc", string3: "qwv"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("flo") ("vue") = true
string_eq ("xzo") ("ofd") = true
string_eq ("nyc") ("qwv") = true
Simplifying took 0.002746 seconds
Result : false
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "jvw", string3: "wdv"
Model : string2: "lwx", string3: "fcp"
Model : string2: "trw", string3: "prn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jvw") ("wdv") = true
string_eq ("lwx") ("fcp") = true
string_eq ("trw") ("prn") = true
Simplifying took 0.002601 seconds
Result : false
advanced_generalize done
=================================================
Progress: 667


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 668


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 669


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 670


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 671


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 672


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 673


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 674


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 675


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 676


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 677


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 678


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 679


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "yme", string3: "fua"
Model : string1: "oip", string3: "nhq"
Model : string1: "tgr", string3: "ofd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("yme") ("fua") = true
string_eq ("oip") ("nhq") = true
string_eq ("tgr") ("ofd") = true
Simplifying took 0.002424 seconds
Result : true
advanced_generalize done
=================================================
Progress: 680


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 681


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 682


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 683


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 684


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 685


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "sxu", string3: "xby"
Model : string2: "yca", string3: "abf"
Model : string2: "tsw", string3: "lqe"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("sxu") ("xby") = true
string_eq ("yca") ("abf") = true
string_eq ("tsw") ("lqe") = true
Simplifying took 0.002809 seconds
Result : false
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "lda", string3: "nau"
Model : string2: "qyz", string3: "qdq"
Model : string2: "wxw", string3: "yuo"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("lda") ("nau") = true
string_eq ("qyz") ("qdq") = true
string_eq ("wxw") ("yuo") = true
Simplifying took 0.003751 seconds
Result : false
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "hfz", string3: "vlm"
Model : string2: "ydw", string3: "zwk"
Model : string2: "rpg", string3: "kig"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("hfz") ("vlm") = true
string_eq ("ydw") ("zwk") = true
string_eq ("rpg") ("kig") = true
Simplifying took 0.003670 seconds
Result : false
advanced_generalize done
=================================================
Progress: 686


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 687


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 688


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 689


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 690


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 691


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 692


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 693


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 694


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 695


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 696


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 697


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 698


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 699


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 700


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 701


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 702


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 703


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 704


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 705


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 706


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 707


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 708


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 709


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 710


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 711


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 712


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 713


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 714


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 715


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 716


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 717


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 718


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 719


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 720


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 721


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 722


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 723


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 724


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 725


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 726


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 727


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 728


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 729


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 730


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 731


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 732


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 733


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 734


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 735


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 736


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 737


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 738


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 739


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 740


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 741


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 742


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 743


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 744


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 745


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 746


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 747


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 748


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 749


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 750


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 751


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 752


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 753


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 754


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 755


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 756


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 757


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 758


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 759


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 760


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 761


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 762


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 763


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 764


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 765


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 766


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 767


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 768


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 769


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 770


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 771


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 772


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 773


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 774


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 775


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 776


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 777


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 778


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 779


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 780


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 781


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 782


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 783


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 784


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "fpp", string3: "byk"
Model : string1: "bgq", string3: "hkm"
Model : string1: "kte", string3: "pxg"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("fpp") ("byk") = true
string_eq ("bgq") ("hkm") = true
string_eq ("kte") ("pxg") = true
Simplifying took 0.001335 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 785


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 786


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 787


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 788


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 789


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:11)
=================================================
Progress: 790


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 791


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 792


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 793


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "rqn", string3: "yte"
Model : string2: "vxm", string3: "tcq"
Model : string2: "mft", string3: "qgy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("rqn") ("yte") = true
string_eq ("vxm") ("tcq") = true
string_eq ("mft") ("qgy") = true
Simplifying took 0.003281 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "pyt", string3: "cio"
Model : string2: "fov", string3: "qxo"
Model : string2: "fmn", string3: "tot"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("pyt") ("cio") = true
string_eq ("fov") ("qxo") = true
string_eq ("fmn") ("tot") = true
Simplifying took 0.001446 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "jih", string3: "tcx"
Model : string2: "xgc", string3: "mji"
Model : string2: "rwk", string3: "bux"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jih") ("tcx") = true
string_eq ("xgc") ("mji") = true
string_eq ("rwk") ("bux") = true
Simplifying took 0.001988 seconds
Result : false
advanced_generalize done
=================================================
Progress: 794


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 795


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 796


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "yxg", string3: "ihm"
Model : string1: "ebp", string3: "yed"
Model : string1: "elx", string3: "ecf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("yxg") ("ihm") = true
string_eq ("ebp") ("yed") = true
string_eq ("elx") ("ecf") = true
Simplifying took 0.001953 seconds
Result : true
advanced_generalize done
=================================================
Progress: 797


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 798


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 799


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "ksg", string3: "csm"
Model : string2: "fyh", string3: "dmp"
Model : string2: "ofv", string3: "qjm"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ksg") ("csm") = true
string_eq ("fyh") ("dmp") = true
string_eq ("ofv") ("qjm") = true
Simplifying took 0.001638 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "zbm", string3: "aos"
Model : string2: "pzn", string3: "ump"
Model : string2: "xgm", string3: "xbc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("zbm") ("aos") = true
string_eq ("pzn") ("ump") = true
string_eq ("xgm") ("xbc") = true
Simplifying took 0.003106 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "mwx", string3: "ynf"
Model : string2: "gaw", string3: "srh"
Model : string2: "znw", string3: "syy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("mwx") ("ynf") = true
string_eq ("gaw") ("srh") = true
string_eq ("znw") ("syy") = true
Simplifying took 0.002996 seconds
Result : false
advanced_generalize done
=================================================
Progress: 800


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 801


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 802


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "czj", string3: "qyr"
Model : string1: "knt", string3: "jla"
Model : string1: "tyh", string3: "lru"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("czj") ("qyr") = true
string_eq ("knt") ("jla") = true
string_eq ("tyh") ("lru") = true
Simplifying took 0.002090 seconds
Result : true
advanced_generalize done
=================================================
Progress: 803


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 804


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 805


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "osj", string3: "bgb"
Model : string2: "kqx", string3: "owt"
Model : string2: "hkr", string3: "mbe"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("osj") ("bgb") = true
string_eq ("kqx") ("owt") = true
string_eq ("hkr") ("mbe") = true
Simplifying took 0.001505 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "kbg", string3: "paq"
Model : string2: "roc", string3: "suq"
Model : string2: "jxu", string3: "fcz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("kbg") ("paq") = true
string_eq ("roc") ("suq") = true
string_eq ("jxu") ("fcz") = true
Simplifying took 0.001915 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "krm", string3: "gcc"
Model : string2: "ryt", string3: "iqt"
Model : string2: "kbl", string3: "duj"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("krm") ("gcc") = true
string_eq ("ryt") ("iqt") = true
string_eq ("kbl") ("duj") = true
Simplifying took 0.001503 seconds
Result : false
advanced_generalize done
=================================================
Progress: 806


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 807


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 808


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "qxf", string3: "zzb"
Model : string1: "jwh", string3: "vuh"
Model : string1: "iqc", string3: "mbh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qxf") ("zzb") = true
string_eq ("jwh") ("vuh") = true
string_eq ("iqc") ("mbh") = true
Simplifying took 0.002709 seconds
Result : true
advanced_generalize done
=================================================
Progress: 809


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 810


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 811


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "jwp", string3: "wqq"
Model : string2: "ufn", string3: "eit"
Model : string2: "afz", string3: "top"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jwp") ("wqq") = true
string_eq ("ufn") ("eit") = true
string_eq ("afz") ("top") = true
Simplifying took 0.001711 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "yma", string3: "diz"
Model : string2: "fvj", string3: "zku"
Model : string2: "fsn", string3: "qax"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("yma") ("diz") = true
string_eq ("fvj") ("zku") = true
string_eq ("fsn") ("qax") = true
Simplifying took 0.001675 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "pjw", string3: "htl"
Model : string2: "vsm", string3: "dru"
Model : string2: "quw", string3: "roz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("pjw") ("htl") = true
string_eq ("vsm") ("dru") = true
string_eq ("quw") ("roz") = true
Simplifying took 0.002290 seconds
Result : false
advanced_generalize done
=================================================
Progress: 812


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 813


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 814


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 815


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 816


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 817


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 818


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 819


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 820


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 821


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 822


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 823


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 824


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 825


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 826


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 827


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 828


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 829


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 830


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "yjt", string3: "xii"
Model : string2: "lby", string3: "woq"
Model : string2: "fnc", string3: "odn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("yjt") ("xii") = true
string_eq ("lby") ("woq") = true
string_eq ("fnc") ("odn") = true
Simplifying took 0.002796 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 831


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 832


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 833


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 2
rewrite Case1 in goal at 0(rank:20)
rewrite lemma3 in goal at 0(rank:23)
=================================================
Progress: 834


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 835


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:15)
=================================================
Progress: 836


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 837


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case2 in goal at 0(rank:30)
=================================================
Progress: 838


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 839


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "zgb", string3: "dnv"
Model : string1: "ixf", string3: "wcl"
Model : string1: "qug", string3: "kgp"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("zgb") ("dnv") = true
string_eq ("ixf") ("wcl") = true
string_eq ("qug") ("kgp") = true
Simplifying took 0.002049 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 840


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 841


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Case2 in goal at 0(rank:21)
rewrite lemma3 in goal at 0(rank:24)
=================================================
Progress: 842


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "ieo", string2: "gof", string3: "vhx"
Model : string1: "xrq", string2: "wwu", string3: "zsp"
Model : string1: "lfb", string2: "fne", string3: "knl"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ieo") ("vhx") = string_eq ("gof") ("vhx")
string_eq ("xrq") ("zsp") = string_eq ("wwu") ("zsp")
string_eq ("lfb") ("knl") = string_eq ("fne") ("knl")
Simplifying took 0.005350 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 843


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 844


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 845


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 846


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 847


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
discriminate
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "fxz", string3: "miv"
Model : string2: "vfg", string3: "ovm"
Model : string2: "sxl", string3: "blc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("fxz") ("miv") = true
string_eq ("vfg") ("ovm") = true
string_eq ("sxl") ("blc") = true
Simplifying took 0.001877 seconds
Result : false
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "ytv", string3: "rag"
Model : string2: "diy", string3: "rxp"
Model : string2: "gfv", string3: "aip"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ytv") ("rag") = true
string_eq ("diy") ("rxp") = true
string_eq ("gfv") ("aip") = true
Simplifying took 0.001988 seconds
Result : false
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "xhv", string3: "yag"
Model : string2: "qir", string3: "rri"
Model : string2: "npe", string3: "exy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("xhv") ("yag") = true
string_eq ("qir") ("rri") = true
string_eq ("npe") ("exy") = true
Simplifying took 0.003077 seconds
Result : false
advanced_generalize done
=================================================
Progress: 848


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 849


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "rta", string3: "olb"
Model : string2: "bie", string3: "guk"
Model : string2: "vtl", string3: "zos"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("rta") ("olb") = true
string_eq ("bie") ("guk") = true
string_eq ("vtl") ("zos") = true
Simplifying took 0.002690 seconds
Result : true
advanced_generalize done
=================================================
Progress: 850


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 851


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "dwo", string2: "lrz", string3: "zkt"
Model : string1: "tik", string2: "tbj", string3: "ben"
Model : string1: "hsq", string2: "arb", string3: "sxo"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("lrz") ("zkt") = string_eq ("dwo") ("zkt")
string_eq ("tbj") ("ben") = string_eq ("tik") ("ben")
string_eq ("arb") ("sxo") = string_eq ("hsq") ("sxo")
Simplifying took 0.002941 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 852


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 853


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 854


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 6
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 855


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 856


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
discriminate
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "ndz", string3: "yjc"
Model : string1: "uvw", string3: "owq"
Model : string1: "zog", string3: "cme"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ndz") ("yjc") = true
string_eq ("uvw") ("owq") = true
string_eq ("zog") ("cme") = true
Simplifying took 0.002504 seconds
Result : true
advanced_generalize done
=================================================
Progress: 857


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 858


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "hcm", string3: "rrp"
Model : string1: "ckh", string3: "zzd"
Model : string1: "yol", string3: "tau"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("hcm") ("rrp") = true
string_eq ("ckh") ("zzd") = true
string_eq ("yol") ("tau") = true
Simplifying took 0.002638 seconds
Result : true
advanced_generalize done
=================================================
Progress: 859


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "jhy", string2: "mwq", string3: "nhg"
Model : string1: "arm", string2: "bhw", string3: "yvv"
Model : string1: "zlv", string2: "knf", string3: "mlg"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jhy") ("nhg") = string_eq ("mwq") ("nhg")
string_eq ("arm") ("yvv") = string_eq ("bhw") ("yvv")
string_eq ("zlv") ("mlg") = string_eq ("knf") ("mlg")
Simplifying took 0.003508 seconds
Result : true
advanced_generalize done
=================================================
Progress: 860


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 861


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 862


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "xmm", string3: "kfk"
Model : string2: "tcl", string3: "mar"
Model : string2: "mky", string3: "bkx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("xmm") ("kfk") = true
string_eq ("tcl") ("mar") = true
string_eq ("mky") ("bkx") = true
Simplifying took 0.001930 seconds
Result : true
advanced_generalize done
=================================================
Progress: 863


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 864


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "wcp", string2: "xzo", string3: "hpm"
Model : string1: "hzp", string2: "wtk", string3: "hbe"
Model : string1: "iyd", string2: "cmr", string3: "gbq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("xzo") ("hpm") = string_eq ("wcp") ("hpm")
string_eq ("wtk") ("hbe") = string_eq ("hzp") ("hbe")
string_eq ("cmr") ("gbq") = string_eq ("iyd") ("gbq")
Simplifying took 0.003348 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 865


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 866


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 867


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 6
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 868


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:12)
=================================================
Progress: 869


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
discriminate
discriminate
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "alk", string3: "qha"
Model : string1: "hnv", string3: "dfx"
Model : string1: "qdc", string3: "csr"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("alk") ("qha") = true
string_eq ("hnv") ("dfx") = true
string_eq ("qdc") ("csr") = true
Simplifying took 0.001067 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 870


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 871


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 872


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 873


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 874


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 875


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:11)
=================================================
Progress: 876


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 877


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 878


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "lex", string3: "ehm"
Model : string1: "lff", string3: "wfr"
Model : string1: "ujt", string3: "ngt"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("lex") ("ehm") = true
string_eq ("lff") ("wfr") = true
string_eq ("ujt") ("ngt") = true
Simplifying took 0.002256 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 879


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 880


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 881


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 2
rewrite Case3 in goal at 0(rank:20)
rewrite lemma3 in goal at 0(rank:23)
=================================================
Progress: 882


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 883


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:15)
=================================================
Progress: 884


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 885


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 886


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 887


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "zke", string3: "wvi"
Model : string2: "ssg", string3: "eay"
Model : string2: "aqf", string3: "xty"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("zke") ("wvi") = true
string_eq ("ssg") ("eay") = true
string_eq ("aqf") ("xty") = true
Simplifying took 0.002674 seconds
Result : true
advanced_generalize done
=================================================
Progress: 888


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 889


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "men", string2: "dkm", string3: "gzj"
Model : string1: "zbf", string2: "euk", string3: "daz"
Model : string1: "xyl", string2: "zfc", string3: "nij"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dkm") ("gzj") = string_eq ("men") ("gzj")
string_eq ("euk") ("daz") = string_eq ("zbf") ("daz")
string_eq ("zfc") ("nij") = string_eq ("xyl") ("nij")
Simplifying took 0.003604 seconds
Result : true
advanced_generalize done
=================================================
Progress: 890


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 891


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "ori", string3: "zzw"
Model : string1: "dwp", string3: "luk"
Model : string1: "lmo", string3: "gaw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ori") ("zzw") = true
string_eq ("dwp") ("luk") = true
string_eq ("lmo") ("gaw") = true
Simplifying took 0.002036 seconds
Result : true
advanced_generalize done
=================================================
Progress: 892


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "qiw", string2: "oyk", string3: "ycq"
Model : string1: "xmf", string2: "kjr", string3: "kjd"
Model : string1: "nnx", string2: "nwz", string3: "usu"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qiw") ("ycq") = string_eq ("oyk") ("ycq")
string_eq ("xmf") ("kjd") = string_eq ("kjr") ("kjd")
string_eq ("nnx") ("usu") = string_eq ("nwz") ("usu")
Simplifying took 0.006068 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 893


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 894


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 895


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 1
rewrite Case3 in goal at 0(rank:12)
=================================================
Progress: 896


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 897


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
discriminate
discriminate
rewrite Case3 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "eya", string3: "ndj"
Model : string2: "fbb", string3: "elv"
Model : string2: "tvt", string3: "xoq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("eya") ("ndj") = true
string_eq ("fbb") ("elv") = true
string_eq ("tvt") ("xoq") = true
Simplifying took 0.002132 seconds
Result : false
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "pef", string3: "yrf"
Model : string2: "jdl", string3: "ezn"
Model : string2: "psh", string3: "nlr"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("pef") ("yrf") = true
string_eq ("jdl") ("ezn") = true
string_eq ("psh") ("nlr") = true
Simplifying took 0.002390 seconds
Result : false
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "wnq", string3: "riv"
Model : string2: "hgo", string3: "eif"
Model : string2: "qtv", string3: "fyy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("wnq") ("riv") = true
string_eq ("hgo") ("eif") = true
string_eq ("qtv") ("fyy") = true
Simplifying took 0.002123 seconds
Result : false
advanced_generalize done
=================================================
Progress: 898


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 899


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "bxg", string3: "gni"
Model : string2: "gvf", string3: "mkm"
Model : string2: "bxs", string3: "uxa"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bxg") ("gni") = true
string_eq ("gvf") ("mkm") = true
string_eq ("bxs") ("uxa") = true
Simplifying took 0.001092 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 900


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 901


1st goal of : forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 902


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 2
rewrite Case2 in goal at 0(rank:20)
rewrite lemma3 in goal at 0(rank:23)
=================================================
Progress: 903


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:12)
=================================================
Progress: 904


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:15)
=================================================
Progress: 905


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 906


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 907


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 908


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "vah", string3: "ocg"
Model : string1: "oqj", string3: "ebn"
Model : string1: "yic", string3: "kuf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("vah") ("ocg") = true
string_eq ("oqj") ("ebn") = true
string_eq ("yic") ("kuf") = true
Simplifying took 0.002203 seconds
Result : true
advanced_generalize done
=================================================
Progress: 909


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "rbt", string2: "pss", string3: "nqx"
Model : string1: "pmr", string2: "hjv", string3: "kop"
Model : string1: "irz", string2: "aqd", string3: "oyf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("rbt") ("nqx") = string_eq ("pss") ("nqx")
string_eq ("pmr") ("kop") = string_eq ("hjv") ("kop")
string_eq ("irz") ("oyf") = string_eq ("aqd") ("oyf")
Simplifying took 0.003680 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 910


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 911


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 912


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 1
rewrite Case3 in goal at 0(rank:12)
=================================================
Progress: 913


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 914


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
discriminate
discriminate
rewrite Case3 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string2:string) (string3:string), true = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "kdr", string3: "xbi"
Model : string2: "vyr", string3: "qku"
Model : string2: "ers", string3: "dvm"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("kdr") ("xbi") = true
string_eq ("vyr") ("qku") = true
string_eq ("ers") ("dvm") = true
Simplifying took 0.002296 seconds
Result : false
Lemma : forall (string2:string) (string3:string), true = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "ksf", string3: "sqi"
Model : string2: "mti", string3: "mjw"
Model : string2: "dsr", string3: "nhz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ksf") ("sqi") = true
string_eq ("mti") ("mjw") = true
string_eq ("dsr") ("nhz") = true
Simplifying took 0.002467 seconds
Result : false
Lemma : forall (string2:string) (string3:string), true = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "wzw", string3: "aus"
Model : string2: "jzj", string3: "arz"
Model : string2: "hjk", string3: "hag"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("wzw") ("aus") = true
string_eq ("jzj") ("arz") = true
string_eq ("hjk") ("hag") = true
Simplifying took 0.001058 seconds
Result : false
advanced_generalize done
=================================================
Progress: 915


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 916


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "dis", string3: "wts"
Model : string2: "jhr", string3: "yzd"
Model : string2: "xnx", string3: "prv"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dis") ("wts") = true
string_eq ("jhr") ("yzd") = true
string_eq ("xnx") ("prv") = true
Simplifying took 0.002897 seconds
Result : true
advanced_generalize done
=================================================
Progress: 917


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 918


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "szz", string2: "csl", string3: "cyi"
Model : string1: "qwm", string2: "nob", string3: "tcu"
Model : string1: "wqw", string2: "ewm", string3: "mws"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("csl") ("cyi") = string_eq ("szz") ("cyi")
string_eq ("nob") ("tcu") = string_eq ("qwm") ("tcu")
string_eq ("ewm") ("mws") = string_eq ("wqw") ("mws")
Simplifying took 0.005525 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 919


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 920


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 921


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 6
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 922


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:12)
=================================================
Progress: 923


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
discriminate
discriminate
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "xpp", string3: "yjx"
Model : string1: "adf", string3: "qga"
Model : string1: "aqd", string3: "wku"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("xpp") ("yjx") = true
string_eq ("adf") ("qga") = true
string_eq ("aqd") ("wku") = true
Simplifying took 0.002135 seconds
Result : true
advanced_generalize done
=================================================
Progress: 924


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 925


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "dxi", string3: "gah"
Model : string1: "tbk", string3: "hmy"
Model : string1: "bmk", string3: "khi"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dxi") ("gah") = true
string_eq ("tbk") ("hmy") = true
string_eq ("bmk") ("khi") = true
Simplifying took 0.001210 seconds
Result : true
advanced_generalize done
=================================================
Progress: 926


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "gsu", string2: "rwi", string3: "xgg"
Model : string1: "jyt", string2: "chm", string3: "mvl"
Model : string1: "vsw", string2: "lav", string3: "zcg"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("gsu") ("xgg") = string_eq ("rwi") ("xgg")
string_eq ("jyt") ("mvl") = string_eq ("chm") ("mvl")
string_eq ("vsw") ("zcg") = string_eq ("lav") ("zcg")
Simplifying took 0.005286 seconds
Result : true
advanced_generalize done
=================================================
Progress: 927


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 928


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 929


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "caf", string3: "smy"
Model : string2: "dgi", string3: "mml"
Model : string2: "ouw", string3: "vkm"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("caf") ("smy") = true
string_eq ("dgi") ("mml") = true
string_eq ("ouw") ("vkm") = true
Simplifying took 0.001692 seconds
Result : true
advanced_generalize done
=================================================
Progress: 930


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 931


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "uru", string2: "ucw", string3: "rys"
Model : string1: "fac", string2: "cew", string3: "fym"
Model : string1: "giz", string2: "rth", string3: "xbx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ucw") ("rys") = string_eq ("uru") ("rys")
string_eq ("cew") ("fym") = string_eq ("fac") ("fym")
string_eq ("rth") ("xbx") = string_eq ("giz") ("xbx")
Simplifying took 0.004997 seconds
Result : true
advanced_generalize done
=================================================
Progress: 932


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 933


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "uan", string3: "nbt"
Model : string1: "fmq", string3: "mhn"
Model : string1: "qdn", string3: "lur"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("uan") ("nbt") = true
string_eq ("fmq") ("mhn") = true
string_eq ("qdn") ("lur") = true
Simplifying took 0.002225 seconds
Result : true
advanced_generalize done
=================================================
Progress: 934


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "wsw", string2: "bnd", string3: "hry"
Model : string1: "gea", string2: "lkb", string3: "jdb"
Model : string1: "uml", string2: "adm", string3: "dqt"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("wsw") ("hry") = string_eq ("bnd") ("hry")
string_eq ("gea") ("jdb") = string_eq ("lkb") ("jdb")
string_eq ("uml") ("dqt") = string_eq ("adm") ("dqt")
Simplifying took 0.002513 seconds
Result : true
advanced_generalize done
=================================================
Progress: 935


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 936


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 937


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "sfv", string3: "cnw"
Model : string2: "mnz", string3: "eyk"
Model : string2: "kis", string3: "hbe"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("sfv") ("cnw") = true
string_eq ("mnz") ("eyk") = true
string_eq ("kis") ("hbe") = true
Simplifying took 0.001345 seconds
Result : true
advanced_generalize done
=================================================
Progress: 938


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 939


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "yjy", string2: "ahq", string3: "hap"
Model : string1: "psj", string2: "mbr", string3: "fsv"
Model : string1: "ujf", string2: "pbk", string3: "lhp"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ahq") ("hap") = string_eq ("yjy") ("hap")
string_eq ("mbr") ("fsv") = string_eq ("psj") ("fsv")
string_eq ("pbk") ("lhp") = string_eq ("ujf") ("lhp")
Simplifying took 0.003343 seconds
Result : true
advanced_generalize done
=================================================
Progress: 940


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 941


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "srs", string3: "moq"
Model : string1: "zds", string3: "adz"
Model : string1: "qtu", string3: "rvd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("srs") ("moq") = true
string_eq ("zds") ("adz") = true
string_eq ("qtu") ("rvd") = true
Simplifying took 0.002119 seconds
Result : true
advanced_generalize done
=================================================
Progress: 942


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "gwg", string2: "jec", string3: "noy"
Model : string1: "lkw", string2: "vxa", string3: "svc"
Model : string1: "axk", string2: "lbf", string3: "dsw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("gwg") ("noy") = string_eq ("jec") ("noy")
string_eq ("lkw") ("svc") = string_eq ("vxa") ("svc")
string_eq ("axk") ("dsw") = string_eq ("lbf") ("dsw")
Simplifying took 0.003685 seconds
Result : true
advanced_generalize done
=================================================
Progress: 943


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 944


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 945


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "yob", string3: "qfn"
Model : string2: "bzr", string3: "mll"
Model : string2: "out", string3: "ync"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("yob") ("qfn") = true
string_eq ("bzr") ("mll") = true
string_eq ("out") ("ync") = true
Simplifying took 0.002599 seconds
Result : true
advanced_generalize done
=================================================
Progress: 946


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 947


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "npr", string2: "hmb", string3: "wbq"
Model : string1: "pvc", string2: "ahe", string3: "qev"
Model : string1: "iet", string2: "aqu", string3: "ukq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("hmb") ("wbq") = string_eq ("npr") ("wbq")
string_eq ("ahe") ("qev") = string_eq ("pvc") ("qev")
string_eq ("aqu") ("ukq") = string_eq ("iet") ("ukq")
Simplifying took 0.003608 seconds
Result : true
advanced_generalize done
=================================================
Progress: 948


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 949


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "fdu", string3: "wzb"
Model : string1: "lbe", string3: "oac"
Model : string1: "iwu", string3: "mea"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("fdu") ("wzb") = true
string_eq ("lbe") ("oac") = true
string_eq ("iwu") ("mea") = true
Simplifying took 0.001721 seconds
Result : true
advanced_generalize done
=================================================
Progress: 950


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "dvw", string2: "jar", string3: "cta"
Model : string1: "bsl", string2: "fhi", string3: "hyo"
Model : string1: "bni", string2: "nph", string3: "zte"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dvw") ("cta") = string_eq ("jar") ("cta")
string_eq ("bsl") ("hyo") = string_eq ("fhi") ("hyo")
string_eq ("bni") ("zte") = string_eq ("nph") ("zte")
Simplifying took 0.002660 seconds
Result : true
advanced_generalize done
=================================================
Progress: 951


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 952


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 953


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "omb", string3: "tps"
Model : string2: "gfr", string3: "tug"
Model : string2: "sqc", string3: "ksp"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("omb") ("tps") = true
string_eq ("gfr") ("tug") = true
string_eq ("sqc") ("ksp") = true
Simplifying took 0.002239 seconds
Result : true
advanced_generalize done
=================================================
Progress: 954


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 955


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "jzw", string2: "zud", string3: "kwl"
Model : string1: "acc", string2: "oub", string3: "vjt"
Model : string1: "jnq", string2: "bio", string3: "xbe"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("zud") ("kwl") = string_eq ("jzw") ("kwl")
string_eq ("oub") ("vjt") = string_eq ("acc") ("vjt")
string_eq ("bio") ("xbe") = string_eq ("jnq") ("xbe")
Simplifying took 0.003785 seconds
Result : true
advanced_generalize done
=================================================
Progress: 956


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 957


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "fcj", string3: "xzi"
Model : string1: "kiz", string3: "hwq"
Model : string1: "hop", string3: "awc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("fcj") ("xzi") = true
string_eq ("kiz") ("hwq") = true
string_eq ("hop") ("awc") = true
Simplifying took 0.001471 seconds
Result : true
advanced_generalize done
=================================================
Progress: 958


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "fhu", string2: "sxo", string3: "cme"
Model : string1: "dti", string2: "oeb", string3: "kuu"
Model : string1: "dtw", string2: "nuo", string3: "tfq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("fhu") ("cme") = string_eq ("sxo") ("cme")
string_eq ("dti") ("kuu") = string_eq ("oeb") ("kuu")
string_eq ("dtw") ("tfq") = string_eq ("nuo") ("tfq")
Simplifying took 0.003010 seconds
Result : true
advanced_generalize done
=================================================
Progress: 959


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 960


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 961


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "vzq", string3: "vps"
Model : string2: "gom", string3: "trc"
Model : string2: "dtw", string3: "gud"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("vzq") ("vps") = true
string_eq ("gom") ("trc") = true
string_eq ("dtw") ("gud") = true
Simplifying took 0.003599 seconds
Result : true
advanced_generalize done
=================================================
Progress: 962


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 963


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "bzw", string2: "dfc", string3: "rdu"
Model : string1: "cfw", string2: "ofu", string3: "zrn"
Model : string1: "wey", string2: "pea", string3: "ere"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dfc") ("rdu") = string_eq ("bzw") ("rdu")
string_eq ("ofu") ("zrn") = string_eq ("cfw") ("zrn")
string_eq ("pea") ("ere") = string_eq ("wey") ("ere")
Simplifying took 0.003515 seconds
Result : true
advanced_generalize done
=================================================
Progress: 964


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 965


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "fxe", string3: "aqa"
Model : string1: "tvo", string3: "kor"
Model : string1: "sjp", string3: "cqd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("fxe") ("aqa") = true
string_eq ("tvo") ("kor") = true
string_eq ("sjp") ("cqd") = true
Simplifying took 0.001486 seconds
Result : true
advanced_generalize done
=================================================
Progress: 966


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "rcy", string2: "gml", string3: "adt"
Model : string1: "mpn", string2: "ria", string3: "baj"
Model : string1: "rdp", string2: "mqf", string3: "fpf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("rcy") ("adt") = string_eq ("gml") ("adt")
string_eq ("mpn") ("baj") = string_eq ("ria") ("baj")
string_eq ("rdp") ("fpf") = string_eq ("mqf") ("fpf")
Simplifying took 0.002085 seconds
Result : true
advanced_generalize done
=================================================
Progress: 967


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 968


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 969


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "lon", string3: "kta"
Model : string2: "oqk", string3: "wkh"
Model : string2: "uda", string3: "paf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("lon") ("kta") = true
string_eq ("oqk") ("wkh") = true
string_eq ("uda") ("paf") = true
Simplifying took 0.002914 seconds
Result : true
advanced_generalize done
=================================================
Progress: 970


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 971


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "lff", string2: "nuf", string3: "pmz"
Model : string1: "gva", string2: "abi", string3: "nnx"
Model : string1: "cpa", string2: "ehb", string3: "lly"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("nuf") ("pmz") = string_eq ("lff") ("pmz")
string_eq ("abi") ("nnx") = string_eq ("gva") ("nnx")
string_eq ("ehb") ("lly") = string_eq ("cpa") ("lly")
Simplifying took 0.003273 seconds
Result : true
advanced_generalize done
=================================================
Progress: 972


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 973


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "qpj", string3: "nfg"
Model : string1: "yvo", string3: "nkv"
Model : string1: "mac", string3: "pzv"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qpj") ("nfg") = true
string_eq ("yvo") ("nkv") = true
string_eq ("mac") ("pzv") = true
Simplifying took 0.002966 seconds
Result : true
advanced_generalize done
=================================================
Progress: 974


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "zaa", string2: "bhf", string3: "ftv"
Model : string1: "bjf", string2: "hvi", string3: "hso"
Model : string1: "dws", string2: "zhj", string3: "qqd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("zaa") ("ftv") = string_eq ("bhf") ("ftv")
string_eq ("bjf") ("hso") = string_eq ("hvi") ("hso")
string_eq ("dws") ("qqd") = string_eq ("zhj") ("qqd")
Simplifying took 0.004916 seconds
Result : true
advanced_generalize done
=================================================
Progress: 975


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 976


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:8)
=================================================
Progress: 977


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 978


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 979


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 980


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 981


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8)
=================================================
Progress: 982


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:8)
=================================================
Progress: 983


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:8)
rewrite Case1 in goal at 0(rank:16)
rewrite Case3 in goal at 0(rank:24)
=================================================
Progress: 984


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 985


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 986


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 987


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 988


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:6)
=================================================
Progress: 989


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6)
=================================================
Progress: 990


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6)
=================================================
Progress: 991


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
rewrite Cond1 in goal at 0
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: V ("you"), string1: "jqd", string2: "bsp"
Model : lambda2: V ("wrf"), string1: "sak", string2: "vna"
Model : lambda2: V ("ixl"), string1: "kus", string2: "qbb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("you")) (("bsp"::("jqd"::(Nil)))) = true
sub_check_ta1 (V ("wrf")) (("vna"::("sak"::(Nil)))) = true
sub_check_ta1 (V ("ixl")) (("qbb"::("kus"::(Nil)))) = true
Simplifying took 0.005722 seconds
Result : true
advanced_generalize done
=================================================
Progress: 992


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 993


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case2 in goal at 0(rank:30)
=================================================
Progress: 994


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 995


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 996


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 997


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 998


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "oel", string3: "tnc"
Model : string2: "fsa", string3: "pyb"
Model : string2: "ste", string3: "fjn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("oel") ("tnc") = true
string_eq ("fsa") ("pyb") = true
string_eq ("ste") ("fjn") = true
Simplifying took 0.001788 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "ewn", string3: "wrx"
Model : string2: "nvb", string3: "jml"
Model : string2: "hdj", string3: "yyt"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ewn") ("wrx") = true
string_eq ("nvb") ("jml") = true
string_eq ("hdj") ("yyt") = true
Simplifying took 0.001249 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "kec", string3: "djf"
Model : string2: "mub", string3: "vds"
Model : string2: "izr", string3: "pjw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("kec") ("djf") = true
string_eq ("mub") ("vds") = true
string_eq ("izr") ("pjw") = true
Simplifying took 0.001200 seconds
Result : false
advanced_generalize done
=================================================
Progress: 999


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "eyc", string3: "erm"
Model : string1: "nbh", string3: "wub"
Model : string1: "xzp", string3: "vxb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("eyc") ("erm") = true
string_eq ("nbh") ("wub") = true
string_eq ("xzp") ("vxb") = true
Simplifying took 0.003231 seconds
Result : false
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "axx", string3: "qvo"
Model : string1: "ddu", string3: "jws"
Model : string1: "afo", string3: "tpd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("axx") ("qvo") = true
string_eq ("ddu") ("jws") = true
string_eq ("afo") ("tpd") = true
Simplifying took 0.000588 seconds
Result : false
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "lln", string3: "cip"
Model : string1: "tsc", string3: "ogy"
Model : string1: "won", string3: "siy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("lln") ("cip") = true
string_eq ("tsc") ("ogy") = true
string_eq ("won") ("siy") = true
Simplifying took 0.001694 seconds
Result : false
advanced_generalize done
=================================================
Progress: 1000


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "upz", string3: "rkj"
Model : string2: "vlq", string3: "fyd"
Model : string2: "ybp", string3: "xdn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("upz") ("rkj") = true
string_eq ("vlq") ("fyd") = true
string_eq ("ybp") ("xdn") = true
Simplifying took 0.002698 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "zxi", string3: "siv"
Model : string2: "ibp", string3: "awe"
Model : string2: "hjo", string3: "dzz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("zxi") ("siv") = true
string_eq ("ibp") ("awe") = true
string_eq ("hjo") ("dzz") = true
Simplifying took 0.001459 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "raf", string3: "wgr"
Model : string2: "hce", string3: "ogu"
Model : string2: "crh", string3: "bij"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("raf") ("wgr") = true
string_eq ("hce") ("ogu") = true
string_eq ("crh") ("bij") = true
Simplifying took 0.001473 seconds
Result : false
advanced_generalize done
=================================================
Progress: 1001


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "dul", string3: "kjk"
Model : string1: "ngd", string3: "wnb"
Model : string1: "akm", string3: "cqj"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dul") ("kjk") = true
string_eq ("ngd") ("wnb") = true
string_eq ("akm") ("cqj") = true
Simplifying took 0.000999 seconds
Result : false
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "gol", string3: "vvs"
Model : string1: "url", string3: "xmp"
Model : string1: "quh", string3: "bwj"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("gol") ("vvs") = true
string_eq ("url") ("xmp") = true
string_eq ("quh") ("bwj") = true
Simplifying took 0.001729 seconds
Result : false
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "tqu", string3: "sjw"
Model : string1: "phn", string3: "kcm"
Model : string1: "xyd", string3: "zst"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("tqu") ("sjw") = true
string_eq ("phn") ("kcm") = true
string_eq ("xyd") ("zst") = true
Simplifying took 0.002953 seconds
Result : false
advanced_generalize done
=================================================
Progress: 1002


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "gaw", string3: "brq"
Model : string2: "pgh", string3: "awo"
Model : string2: "neh", string3: "klf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("gaw") ("brq") = true
string_eq ("pgh") ("awo") = true
string_eq ("neh") ("klf") = true
Simplifying took 0.000827 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "dar", string3: "daz"
Model : string2: "jmd", string3: "hdn"
Model : string2: "exw", string3: "vgd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dar") ("daz") = true
string_eq ("jmd") ("hdn") = true
string_eq ("exw") ("vgd") = true
Simplifying took 0.002071 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "yeb", string3: "ads"
Model : string2: "xqt", string3: "wez"
Model : string2: "rlq", string3: "gkk"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("yeb") ("ads") = true
string_eq ("xqt") ("wez") = true
string_eq ("rlq") ("gkk") = true
Simplifying took 0.001618 seconds
Result : false
advanced_generalize done
=================================================
Progress: 1003


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "mgx", string3: "wro"
Model : string1: "lfb", string3: "dpi"
Model : string1: "kmd", string3: "hef"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("mgx") ("wro") = true
string_eq ("lfb") ("dpi") = true
string_eq ("kmd") ("hef") = true
Simplifying took 0.001179 seconds
Result : false
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "png", string3: "zph"
Model : string1: "znn", string3: "zap"
Model : string1: "xng", string3: "nto"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("png") ("zph") = true
string_eq ("znn") ("zap") = true
string_eq ("xng") ("nto") = true
Simplifying took 0.003238 seconds
Result : false
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "hjd", string3: "bqw"
Model : string1: "htk", string3: "gvb"
Model : string1: "znw", string3: "ryv"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("hjd") ("bqw") = true
string_eq ("htk") ("gvb") = true
string_eq ("znw") ("ryv") = true
Simplifying took 0.001483 seconds
Result : false
advanced_generalize done
=================================================
Progress: 1004


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "ikr", string3: "qfm"
Model : string2: "dlq", string3: "yzw"
Model : string2: "xsa", string3: "opi"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ikr") ("qfm") = true
string_eq ("dlq") ("yzw") = true
string_eq ("xsa") ("opi") = true
Simplifying took 0.001728 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "ufa", string3: "bgt"
Model : string2: "ruq", string3: "wok"
Model : string2: "kwy", string3: "rcv"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ufa") ("bgt") = true
string_eq ("ruq") ("wok") = true
string_eq ("kwy") ("rcv") = true
Simplifying took 0.001607 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "iqn", string3: "hwy"
Model : string2: "lwd", string3: "kft"
Model : string2: "dbs", string3: "yrw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("iqn") ("hwy") = true
string_eq ("lwd") ("kft") = true
string_eq ("dbs") ("yrw") = true
Simplifying took 0.001148 seconds
Result : false
advanced_generalize done
=================================================
Progress: 1005


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "jzl", string3: "eui"
Model : string1: "pzo", string3: "sma"
Model : string1: "mdk", string3: "bts"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jzl") ("eui") = true
string_eq ("pzo") ("sma") = true
string_eq ("mdk") ("bts") = true
Simplifying took 0.001373 seconds
Result : false
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "qnf", string3: "jhy"
Model : string1: "qnq", string3: "pah"
Model : string1: "uug", string3: "plh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qnf") ("jhy") = true
string_eq ("qnq") ("pah") = true
string_eq ("uug") ("plh") = true
Simplifying took 0.002000 seconds
Result : false
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "ktv", string3: "yvi"
Model : string1: "kdq", string3: "uor"
Model : string1: "qml", string3: "hyy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ktv") ("yvi") = true
string_eq ("kdq") ("uor") = true
string_eq ("qml") ("hyy") = true
Simplifying took 0.001569 seconds
Result : false
advanced_generalize done
=================================================
Progress: 1006


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:12)
=================================================
Progress: 1007


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 1008


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1009


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:11)
=================================================
Progress: 1010


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 1011


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:12)
=================================================
Progress: 1012


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12)
=================================================
Progress: 1013


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12)
rewrite Case1 in goal at 0(rank:20)
rewrite Case3 in goal at 0(rank:28)
=================================================
Progress: 1014


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 1015


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1016


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:10)
=================================================
Progress: 1017


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 1018


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10)
=================================================
Progress: 1019


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:10)
=================================================
Progress: 1020


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite Cond1 in goal at 0
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: C (V ("rsv")) (V ("srg")), string1: "zvk", string2: "pud"
Model : lambda2: V ("euu"), string1: "dib", string2: "glx"
Model : lambda2: V ("pdd"), string1: "qsq", string2: "rkw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (C (V ("rsv")) (V ("srg"))) (("pud"::("zvk"::(Nil)))) = true
sub_check_ta1 (V ("euu")) (("glx"::("dib"::(Nil)))) = true
sub_check_ta1 (V ("pdd")) (("rkw"::("qsq"::(Nil)))) = true
Simplifying took 0.007920 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1021


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:12)
=================================================
Progress: 1022


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 1023


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1024


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:11)
=================================================
Progress: 1025


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 1026


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:12)
=================================================
Progress: 1027


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12)
=================================================
Progress: 1028


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12)
rewrite Case1 in goal at 0(rank:20)
rewrite Case3 in goal at 0(rank:28)
=================================================
Progress: 1029


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 1030


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1031


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:10)
=================================================
Progress: 1032


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 1033


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:10)
=================================================
Progress: 1034


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10)
=================================================
Progress: 1035


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:10)
=================================================
Progress: 1036


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
rewrite Cond1 in goal at 0
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: V ("ibu"), string1: "nld", string2: "zuw"
Model : lambda2: V ("bhk"), string1: "qho", string2: "fqv"
Model : lambda2: V ("jpr"), string1: "vrr", string2: "xku"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("ibu")) (("zuw"::("nld"::(Nil)))) = true
sub_check_ta1 (V ("bhk")) (("fqv"::("qho"::(Nil)))) = true
sub_check_ta1 (V ("jpr")) (("xku"::("vrr"::(Nil)))) = true
Simplifying took 0.004744 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1037


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 1038


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 1039


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 1040


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
rewrite <- Case2 in goal at 3(rank:12)
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:12)
=================================================
Progress: 1041


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1042


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1043


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1044


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1045


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string3)(rank:14)
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 1046


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 1047


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1048


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1049


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1050


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1051


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1052


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case3 in goal at 0(rank:13)
rewrite <- Case3 in goal at 1(rank:13)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1053


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1054


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1055


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1056


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1057


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1058


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1059


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1060


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1061


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1062


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1063


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1064


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 1065


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1066


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 12
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1067


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1068


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1069


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1070


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1071


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1072


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 7
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 1073


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1074


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1075


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1076


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1077


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1078


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1079


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case4 in goal at 0(rank:14)
=================================================
Progress: 1080


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "pts", string2: "bgh"
Model : string1: "wjq", string2: "jvi"
Model : string1: "fdl", string2: "lgg"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("bgh") ("pts")
true = string_eq ("jvi") ("wjq")
true = string_eq ("lgg") ("fdl")
Simplifying took 0.003861 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1081


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1082


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1083


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1084


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1085


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "kck", string2: "gju"
Model : string1: "eqm", string2: "vgq"
Model : string1: "ojv", string2: "suh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("gju") ("kck")
true = string_eq ("vgq") ("eqm")
true = string_eq ("suh") ("ojv")
Simplifying took 0.003517 seconds
Result : true
advanced_generalize done


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 1086


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 1087


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 1088


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 1089


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13)
=================================================
Progress: 1090


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "pgu", string2: "nma"
Model : string1: "bsp", string2: "fmc"
Model : string1: "pkd", string2: "gim"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("nma") ("pgu")
true = string_eq ("fmc") ("bsp")
true = string_eq ("gim") ("pkd")
Simplifying took 0.004541 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1091


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case1 in goal at 0
rewrite <- Case4 in goal at 0
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "kba", string2: "gyf"
Model : string1: "jhe", string2: "fyr"
Model : string1: "hvg", string2: "vma"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("gyf") ("kba")
true = string_eq ("fyr") ("jhe")
true = string_eq ("vma") ("hvg")
Simplifying took 0.000485 seconds
Result : false
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "rug", string2: "sql"
Model : string1: "mqh", string2: "vhp"
Model : string1: "vhr", string2: "kwx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("sql") ("rug")
true = string_eq ("vhp") ("mqh")
true = string_eq ("kwx") ("vhr")
Simplifying took 0.001030 seconds
Result : false
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "eqb", string2: "uso"
Model : string1: "jze", string2: "pkc"
Model : string1: "elw", string2: "khb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("uso") ("eqb")
true = string_eq ("pkc") ("jze")
true = string_eq ("khb") ("elw")
Simplifying took 0.000696 seconds
Result : false
advanced_generalize done
=================================================
Progress: 1092


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
=================================================
Progress: 1093


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1094


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1095


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1096


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1097


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1098


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1099


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1100


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1101


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1102


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1103


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "arc", string2: "xll"
Model : string1: "cae", string2: "nie"
Model : string1: "abb", string2: "tsm"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("xll") ("arc")
true = string_eq ("nie") ("cae")
true = string_eq ("tsm") ("abb")
Simplifying took 0.001260 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1104


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1105


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1106


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1107


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1108


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "usg", string2: "irr"
Model : string1: "muk", string2: "drx"
Model : string1: "gwn", string2: "nym"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("irr") ("usg")
true = string_eq ("drx") ("muk")
true = string_eq ("nym") ("gwn")
Simplifying took 0.003689 seconds
Result : true
advanced_generalize done


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 1109


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 1110


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 1111


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 1112


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13)
=================================================
Progress: 1113


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "hsu", string2: "rny"
Model : string1: "qwu", string2: "lck"
Model : string1: "lho", string2: "dbb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("rny") ("hsu")
true = string_eq ("lck") ("qwu")
true = string_eq ("dbb") ("lho")
Simplifying took 0.003915 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1114


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1115


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1116


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1117


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1118


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1119


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 1120


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
=================================================
Progress: 1121


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1122


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1123


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
rewrite Case1 in goal at 0
case if string_eq (string3) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string), if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "kta", string2: "xdy"
Model : string1: "rrh", string2: "yxk"
Model : string1: "tdu", string2: "kxt"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("xdy") ("kta")
true = string_eq ("yxk") ("rrh")
true = string_eq ("kxt") ("tdu")
Simplifying took 0.003109 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1124


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1125


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1126


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1127


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "fgx", string2: "ptt"
Model : string1: "tht", string2: "uih"
Model : string1: "hbx", string2: "daa"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("ptt") ("fgx")
true = string_eq ("uih") ("tht")
true = string_eq ("daa") ("hbx")
Simplifying took 0.003136 seconds
Result : true
advanced_generalize done


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 1128


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 1129


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 1130


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 1131


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "lix", string2: "dcv"
Model : string1: "bpq", string2: "ddh"
Model : string1: "gxu", string2: "hda"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("dcv") ("lix")
true = string_eq ("ddh") ("bpq")
true = string_eq ("hda") ("gxu")
Simplifying took 0.003307 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1132


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1133


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1134


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1135


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case3 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1136


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1137


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 1138


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1139


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case4 in goal at 0(rank:14)
rewrite Case1 in goal at 0(rank:22)
=================================================
Progress: 1140


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case4 in goal at 0
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "jni", string2: "whv"
Model : string1: "fce", string2: "mex"
Model : string1: "bst", string2: "iwf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("whv") ("jni")
true = string_eq ("mex") ("fce")
true = string_eq ("iwf") ("bst")
Simplifying took 0.000474 seconds
Result : false
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "bva", string2: "ftf"
Model : string1: "zcl", string2: "kbu"
Model : string1: "zfx", string2: "vxf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("ftf") ("bva")
true = string_eq ("kbu") ("zcl")
true = string_eq ("vxf") ("zfx")
Simplifying took 0.000928 seconds
Result : false
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "jrj", string2: "jtx"
Model : string1: "fsr", string2: "bqy"
Model : string1: "iob", string2: "wgn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("jtx") ("jrj")
true = string_eq ("bqy") ("fsr")
true = string_eq ("wgn") ("iob")
Simplifying took 0.000897 seconds
Result : false
advanced_generalize done
=================================================
Progress: 1141


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
=================================================
Progress: 1142


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1143


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "pft", string2: "vcv", string3: "xuo"
Model : string1: "wgz", string2: "pdd", string3: "lsa"
Model : string1: "ibu", string2: "loe", string3: "lgh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("vcv") ("xuo") = string_eq ("pft") ("xuo")
string_eq ("pdd") ("lsa") = string_eq ("wgz") ("lsa")
string_eq ("loe") ("lgh") = string_eq ("ibu") ("lgh")
Simplifying took 0.008310 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1144


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1145


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1146


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1147


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1148


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1149


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1150


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1151


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1152


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond4 in goal at 0(rank:27)
=================================================
Progress: 1153


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1154


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "qoc", string2: "pte", string3: "ion"
Model : string1: "vmi", string2: "nwx", string3: "goo"
Model : string1: "kmz", string2: "hdq", string3: "xcn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qoc") ("ion") = string_eq ("pte") ("ion")
string_eq ("vmi") ("goo") = string_eq ("nwx") ("goo")
string_eq ("kmz") ("xcn") = string_eq ("hdq") ("xcn")
Simplifying took 0.005712 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1155


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1156


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1157


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1158


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1159


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1160


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1161


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1162


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1163


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond4 in goal at 0(rank:27)
=================================================
Progress: 1164


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1165


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 22)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite Case1 in goal at 0
advanced_generalize done
=================================================
Progress: 1166


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 1167


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 1168


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 1169


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
rewrite <- Case2 in goal at 3(rank:12)
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:12)
=================================================
Progress: 1170


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1171


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1172


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1173


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1174


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string3)(rank:14)
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 1175


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 1176


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1177


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1178


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1179


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1180


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1181


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case3 in goal at 0(rank:13)
rewrite <- Case3 in goal at 1(rank:13)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1182


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1183


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1184


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1185


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1186


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1187


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1188


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1189


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1190


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1191


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1192


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1193


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 1194


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1195


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 12
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1196


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1197


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1198


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1199


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1200


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1201


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 7
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 1202


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1203


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1204


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1205


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1206


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1207


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1208


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case4 in goal at 0(rank:14)
=================================================
Progress: 1209


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "nqd", string2: "abi"
Model : string1: "myx", string2: "ucp"
Model : string1: "ark", string2: "tks"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("abi") ("nqd")
true = string_eq ("ucp") ("myx")
true = string_eq ("tks") ("ark")
Simplifying took 0.003812 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1210


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case1 in goal at 0
rewrite <- Case4 in goal at 0
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "jxr", string2: "vly"
Model : string1: "kvt", string2: "wxq"
Model : string1: "ehf", string2: "bik"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("vly") ("jxr")
true = string_eq ("wxq") ("kvt")
true = string_eq ("bik") ("ehf")
Simplifying took 0.000652 seconds
Result : false
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "uef", string2: "jrc"
Model : string1: "vjc", string2: "kbx"
Model : string1: "jaw", string2: "utm"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("jrc") ("uef")
true = string_eq ("kbx") ("vjc")
true = string_eq ("utm") ("jaw")
Simplifying took 0.000800 seconds
Result : false
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "ged", string2: "epa"
Model : string1: "qhr", string2: "cfm"
Model : string1: "wkc", string2: "pzn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("epa") ("ged")
true = string_eq ("cfm") ("qhr")
true = string_eq ("pzn") ("wkc")
Simplifying took 0.000552 seconds
Result : false
advanced_generalize done
=================================================
Progress: 1211


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
=================================================
Progress: 1212


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1213


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1214


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1215


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1216


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1217


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1218


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1219


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1220


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1221


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1222


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "uoh", string2: "qid"
Model : string1: "ney", string2: "vxx"
Model : string1: "cyu", string2: "jkz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("qid") ("uoh")
true = string_eq ("vxx") ("ney")
true = string_eq ("jkz") ("cyu")
Simplifying took 0.004525 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1223


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1224


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1225


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1226


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1227


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1228


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 1229


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
=================================================
Progress: 1230


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1231


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1232


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
rewrite Case1 in goal at 0
case if string_eq (string3) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string), if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "whx", string2: "ave"
Model : string1: "otg", string2: "bkm"
Model : string1: "ema", string2: "mjk"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("ave") ("whx")
true = string_eq ("bkm") ("otg")
true = string_eq ("mjk") ("ema")
Simplifying took 0.002432 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1233


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1234


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1235


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1236


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case3 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1237


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1238


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 1239


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1240


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case4 in goal at 0(rank:14)
rewrite Case1 in goal at 0(rank:22)
=================================================
Progress: 1241


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case4 in goal at 0
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "iqm", string2: "tpd"
Model : string1: "mtu", string2: "plv"
Model : string1: "jqo", string2: "eck"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("tpd") ("iqm")
true = string_eq ("plv") ("mtu")
true = string_eq ("eck") ("jqo")
Simplifying took 0.000660 seconds
Result : false
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "isk", string2: "fxm"
Model : string1: "enj", string2: "ymw"
Model : string1: "kko", string2: "urc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("fxm") ("isk")
true = string_eq ("ymw") ("enj")
true = string_eq ("urc") ("kko")
Simplifying took 0.000597 seconds
Result : false
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "fne", string2: "eux"
Model : string1: "ref", string2: "wtf"
Model : string1: "ygx", string2: "ljq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("eux") ("fne")
true = string_eq ("wtf") ("ref")
true = string_eq ("ljq") ("ygx")
Simplifying took 0.000862 seconds
Result : false
advanced_generalize done
=================================================
Progress: 1242


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
=================================================
Progress: 1243


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1244


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "bye", string2: "lpx", string3: "eoh"
Model : string1: "ego", string2: "nop", string3: "kat"
Model : string1: "jzp", string2: "mvr", string3: "xrs"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("lpx") ("eoh") = string_eq ("bye") ("eoh")
string_eq ("nop") ("kat") = string_eq ("ego") ("kat")
string_eq ("mvr") ("xrs") = string_eq ("jzp") ("xrs")
Simplifying took 0.005194 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1245


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1246


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "uaf", string2: "coo", string3: "aib"
Model : string1: "emj", string2: "hnz", string3: "glc"
Model : string1: "ski", string2: "wvr", string3: "xwz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("uaf") ("aib") = string_eq ("coo") ("aib")
string_eq ("emj") ("glc") = string_eq ("hnz") ("glc")
string_eq ("ski") ("xwz") = string_eq ("wvr") ("xwz")
Simplifying took 0.005797 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1247


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1248


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 22)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite Case1 in goal at 0
advanced_generalize done
=================================================
Progress: 1249


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1250


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1251


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1252


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1253


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 1254


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 1255


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case1 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "xpq", string3: "gmh"
Model : string1: "aye", string3: "snu"
Model : string1: "wip", string3: "xjh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("xpq") ("gmh") = true
string_eq ("aye") ("snu") = true
string_eq ("wip") ("xjh") = true
Simplifying took 0.002402 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1256


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1257


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1258


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1259


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1260


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11)
=================================================
Progress: 1261


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1262


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1263


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1264


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1265


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1266


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1267


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1268


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1269


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1270


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1271


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1272


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "ujz", string2: "hkv", string3: "inh"
Model : string1: "ojw", string2: "ume", string3: "fii"
Model : string1: "jma", string2: "wne", string3: "mnr"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("hkv") ("inh") = string_eq ("ujz") ("inh")
string_eq ("ume") ("fii") = string_eq ("ojw") ("fii")
string_eq ("wne") ("mnr") = string_eq ("jma") ("mnr")
Simplifying took 0.005421 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1273


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1274


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1275


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1276


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1277


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1278


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1279


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1280


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1281


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1282


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1283


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "kue", string2: "evk", string3: "qhr"
Model : string1: "ybi", string2: "bfp", string3: "klf"
Model : string1: "mka", string2: "ajr", string3: "nal"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("kue") ("qhr") = string_eq ("evk") ("qhr")
string_eq ("ybi") ("klf") = string_eq ("bfp") ("klf")
string_eq ("mka") ("nal") = string_eq ("ajr") ("nal")
Simplifying took 0.004442 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1284


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1285


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1286


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1287


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1288


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1289


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1290


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1291


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1292


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1293


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1294


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1295


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1296


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1297


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1298


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 1299


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 1300


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 0
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "nkx", string3: "opf"
Model : string2: "geh", string3: "leq"
Model : string2: "mdw", string3: "vsu"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("nkx") ("opf") = true
string_eq ("geh") ("leq") = true
string_eq ("mdw") ("vsu") = true
Simplifying took 0.001624 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "ttt", string3: "osj"
Model : string2: "xno", string3: "enp"
Model : string2: "xjk", string3: "dqx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ttt") ("osj") = true
string_eq ("xno") ("enp") = true
string_eq ("xjk") ("dqx") = true
Simplifying took 0.001347 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "bmo", string3: "rao"
Model : string2: "apj", string3: "bvp"
Model : string2: "dab", string3: "uex"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bmo") ("rao") = true
string_eq ("apj") ("bvp") = true
string_eq ("dab") ("uex") = true
Simplifying took 0.000554 seconds
Result : false
advanced_generalize done
=================================================
Progress: 1301


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1302


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1303


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1304


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1305


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1306


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1307


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1308


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1309


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1310


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1311


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "vpt", string2: "snx", string3: "kpl"
Model : string1: "lmp", string2: "ibw", string3: "gqk"
Model : string1: "pib", string2: "bqg", string3: "org"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("snx") ("kpl") = string_eq ("vpt") ("kpl")
string_eq ("ibw") ("gqk") = string_eq ("lmp") ("gqk")
string_eq ("bqg") ("org") = string_eq ("pib") ("org")
Simplifying took 0.005539 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1312


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1313


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1314


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1315


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1316


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1317


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1318


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1319


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1320


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1321


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1322


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "njb", string2: "hhx", string3: "yxg"
Model : string1: "guv", string2: "bih", string3: "izd"
Model : string1: "xfk", string2: "vxz", string3: "vzx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("njb") ("yxg") = string_eq ("hhx") ("yxg")
string_eq ("guv") ("izd") = string_eq ("bih") ("izd")
string_eq ("xfk") ("vzx") = string_eq ("vxz") ("vzx")
Simplifying took 0.011705 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1323


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1324


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1325


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1326


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1327


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1328


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1329


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1330


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1331


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1332


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1333


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1334


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1335


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1336


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1337


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 1338


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 1339


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case1 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "sdt", string3: "hst"
Model : string1: "elg", string3: "nmr"
Model : string1: "vcb", string3: "bhh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("sdt") ("hst") = true
string_eq ("elg") ("nmr") = true
string_eq ("vcb") ("bhh") = true
Simplifying took 0.001340 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1340


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1341


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1342


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1343


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1344


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1345


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1346


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1347


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1348


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1349


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1350


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "gct", string2: "fbs", string3: "lwc"
Model : string1: "eic", string2: "xtj", string3: "yrx"
Model : string1: "fso", string2: "rxt", string3: "lmt"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("fbs") ("lwc") = string_eq ("gct") ("lwc")
string_eq ("xtj") ("yrx") = string_eq ("eic") ("yrx")
string_eq ("rxt") ("lmt") = string_eq ("fso") ("lmt")
Simplifying took 0.006830 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1351


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1352


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "cku", string2: "jeb", string3: "dqq"
Model : string1: "vba", string2: "lme", string3: "edm"
Model : string1: "blw", string2: "rhc", string3: "fld"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("cku") ("dqq") = string_eq ("jeb") ("dqq")
string_eq ("vba") ("edm") = string_eq ("lme") ("edm")
string_eq ("blw") ("fld") = string_eq ("rhc") ("fld")
Simplifying took 0.003558 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1353


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1354


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1355


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1356


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1357


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1358


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 1359


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 1360


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 0
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "odl", string3: "srp"
Model : string2: "yek", string3: "rko"
Model : string2: "dhx", string3: "orc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("odl") ("srp") = true
string_eq ("yek") ("rko") = true
string_eq ("dhx") ("orc") = true
Simplifying took 0.001792 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "jwu", string3: "djf"
Model : string2: "qnb", string3: "nwl"
Model : string2: "qgj", string3: "ngx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jwu") ("djf") = true
string_eq ("qnb") ("nwl") = true
string_eq ("qgj") ("ngx") = true
Simplifying took 0.001389 seconds
Result : false
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "jlw", string3: "msr"
Model : string2: "dot", string3: "cid"
Model : string2: "wsz", string3: "qaa"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jlw") ("msr") = true
string_eq ("dot") ("cid") = true
string_eq ("wsz") ("qaa") = true
Simplifying took 0.001353 seconds
Result : false
advanced_generalize done
=================================================
Progress: 1361


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1362


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1363


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1364


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1365


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1366


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1367


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1368


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1369


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1370


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1371


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "kwt", string2: "gyd", string3: "hja"
Model : string1: "vlx", string2: "kfx", string3: "hfr"
Model : string1: "dia", string2: "tfn", string3: "ltf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("gyd") ("hja") = string_eq ("kwt") ("hja")
string_eq ("kfx") ("hfr") = string_eq ("vlx") ("hfr")
string_eq ("tfn") ("ltf") = string_eq ("dia") ("ltf")
Simplifying took 0.005421 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1372


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1373


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "tgg", string2: "rwx", string3: "xrm"
Model : string1: "wtb", string2: "snf", string3: "sdi"
Model : string1: "yzd", string2: "bfu", string3: "dop"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("tgg") ("xrm") = string_eq ("rwx") ("xrm")
string_eq ("wtb") ("sdi") = string_eq ("snf") ("sdi")
string_eq ("yzd") ("dop") = string_eq ("bfu") ("dop")
Simplifying took 0.009383 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1374


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1375


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 1376


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 1377


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 1378


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
rewrite <- Case2 in goal at 3(rank:12)
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:12)
=================================================
Progress: 1379


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1380


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1381


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1382


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1383


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string3)(rank:14)
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 1384


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 1385


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1386


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1387


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1388


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1389


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1390


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case3 in goal at 0(rank:13)
rewrite <- Case3 in goal at 1(rank:13)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1391


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1392


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1393


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1394


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1395


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1396


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1397


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1398


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1399


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1400


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1401


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1402


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 1403


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1404


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 12
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1405


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1406


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1407


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1408


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1409


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1410


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 7
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 1411


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1412


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1413


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1414


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1415


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1416


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1417


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case4 in goal at 0(rank:14)
=================================================
Progress: 1418


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "pwm", string2: "hki"
Model : string1: "lur", string2: "lkv"
Model : string1: "bly", string2: "fju"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("hki") ("pwm")
true = string_eq ("lkv") ("lur")
true = string_eq ("fju") ("bly")
Simplifying took 0.004926 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1419


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case1 in goal at 0
rewrite <- Case4 in goal at 0
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "yqy", string2: "wix"
Model : string1: "ecb", string2: "fku"
Model : string1: "smc", string2: "rds"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("wix") ("yqy")
true = string_eq ("fku") ("ecb")
true = string_eq ("rds") ("smc")
Simplifying took 0.001029 seconds
Result : false
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "hum", string2: "hua"
Model : string1: "dsm", string2: "oln"
Model : string1: "rip", string2: "otx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("hua") ("hum")
true = string_eq ("oln") ("dsm")
true = string_eq ("otx") ("rip")
Simplifying took 0.001145 seconds
Result : false
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "dem", string2: "dkj"
Model : string1: "ezt", string2: "sxj"
Model : string1: "tbw", string2: "hbr"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("dkj") ("dem")
true = string_eq ("sxj") ("ezt")
true = string_eq ("hbr") ("tbw")
Simplifying took 0.000573 seconds
Result : false
advanced_generalize done
=================================================
Progress: 1420


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
=================================================
Progress: 1421


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1422


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
