Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = if list_eq (getStn (lambda1)) ((Nil)) then true else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:5)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = if list_eq (getStn (lambda1)) ((Nil)) then true else false

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = if list_eq (getStn (V (string1))) ((Nil)) then true else false

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = if list_eq (getStn (V (string1))) ((Nil)) then true else false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = if list_eq (getStn (P (string1) (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = if list_eq (getStn (P (string1) (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))(rank:5)
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
>>> case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = true

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:5)
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = true

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (lambda2:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Model : lambda2: V ("itm"), string1: "mdx"
Model : lambda2: V ("ouf"), string1: "ezz"
Model : lambda2: V ("cnt"), string1: "gep"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("itm")) (("mdx"::(Nil))) = list_eq (filter (aux ("mdx")) (getStn (V ("itm")))) ((Nil))
sub_check_ta1 (V ("ouf")) (("ezz"::(Nil))) = list_eq (filter (aux ("ezz")) (getStn (V ("ouf")))) ((Nil))
sub_check_ta1 (V ("cnt")) (("gep"::(Nil))) = list_eq (filter (aux ("gep")) (getStn (V ("cnt")))) ((Nil))
Simplifying took 0.003584 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 8


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:5)
intro string1(rank:5)
induction lambda1(rank:15)
=================================================
Progress: 9


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro lambda1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:5)
=================================================
Progress: 10


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:7)
=================================================
Progress: 11


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5)
=================================================
Progress: 12


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:5)
=================================================
Progress: 13


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
Model : lambda1: V ("kib"), string1: "fzi"
Model : lambda1: C (V ("qqy")) (V ("mey")), string1: "iih"
Model : lambda1: V ("mkn"), string1: "jqf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("kib")) (("fzi"::(Nil))) = true
sub_check_ta1 (C (V ("qqy")) (V ("mey"))) (("iih"::(Nil))) = true
sub_check_ta1 (V ("mkn")) (("jqf"::(Nil))) = true
Simplifying took 0.003657 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 14


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:7)
intro string1(rank:7)
induction lambda1(rank:17)
=================================================
Progress: 15


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 16


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro lambda1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 17


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9)
=================================================
Progress: 18


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 19


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 20


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 21


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:7)
=================================================
Progress: 22


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
Model : lambda1: V ("glw"), string1: "ibw"
Model : lambda1: V ("uqr"), string1: "rgu"
Model : lambda1: C (V ("akc")) (V ("koh")), string1: "bds"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("glw")) (("ibw"::(Nil))) = list_eq (filter (aux ("ibw")) (getStn (V ("glw")))) ((Nil))
sub_check_ta1 (V ("uqr")) (("rgu"::(Nil))) = list_eq (filter (aux ("rgu")) (getStn (V ("uqr")))) ((Nil))
sub_check_ta1 (C (V ("akc")) (V ("koh"))) (("bds"::(Nil))) = list_eq (filter (aux ("bds")) (getStn (C (V ("akc")) (V ("koh"))))) ((Nil))
Simplifying took 0.004132 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 23


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:9)
intro string1(rank:9)
induction lambda1(rank:19)
=================================================
Progress: 24


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:7)
=================================================
Progress: 25


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 26


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 27


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 28


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 29


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "qer", string2: "fpl"
Model : string1: "uip", string2: "vsy"
Model : string1: "qjk", string2: "zul"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qer") ("fpl") = true
string_eq ("uip") ("vsy") = true
string_eq ("qjk") ("zul") = true
Simplifying took 0.003575 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 30


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 31


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 32


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 33


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 34


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7)
=================================================
Progress: 35


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
Cond3 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond3 in goal at 0(rank:7)
=================================================
Progress: 36


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
Cond3 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
Cond3 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 37


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:8)
rewrite <- Case1 in goal at 1(rank:8)
rewrite Case1 in goal at 0(rank:24)
rewrite Case1 in goal at 1(rank:24)
rewrite Case1 in goal at 2(rank:24)
rewrite Case1 in goal at 3(rank:24)
rewrite <- Case1 in goal at 2(rank:8)
case if string_eq (string2) (string1) then false else true(rank:9)
rewrite Cond1 in goal at 0(rank:16)
=================================================
Progress: 38


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 39


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 40


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "pyp", string2: "rdf"
Model : string1: "nlx", string2: "qqi"
Model : string1: "hyi", string2: "lti"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("rdf") ("pyp") then false else true then ("pyp"::filter (aux ("pyp")) ((Nil))) else filter (aux ("pyp")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("qqi") ("nlx") then false else true then ("nlx"::filter (aux ("nlx")) ((Nil))) else filter (aux ("nlx")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("lti") ("hyi") then false else true then ("hyi"::filter (aux ("hyi")) ((Nil))) else filter (aux ("hyi")) ((Nil))) ((Nil))
Simplifying took 0.002242 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 41


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 42


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 43


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 44


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 45


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case if string_eq (string2) (string1) then false else true(rank:8)
rewrite Cond2 in goal at 0(rank:23)
rewrite Cond2 in goal at 1(rank:23)
rewrite Cond2 in goal at 2(rank:23)
rewrite Cond2 in goal at 3(rank:23)
rewrite <- Cond2 in goal at 0(rank:23)
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 13
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
rewrite <- Case1 in goal at 0(rank:23)
rewrite <- Case1 in goal at 1(rank:15)
rewrite <- Case1 in goal at 2(rank:23)
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "otf", string2: "fqu"
Model : string1: "map", string2: "czm"
Model : string1: "zew", string2: "zvz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("otf") ("fqu") = true
string_eq ("map") ("czm") = true
string_eq ("zew") ("zvz") = true
Simplifying took 0.003424 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 51


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 52


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 53


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 54


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 55


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7)
=================================================
Progress: 56


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:7)
=================================================
Progress: 57


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 58


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 59


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 60


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11)
=================================================
Progress: 61


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 62


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 63


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:10)
=================================================
Progress: 64


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9)
=================================================
Progress: 65


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
Model : lambda1: V ("lxh"), string1: "gry"
Model : lambda1: P ("spk") (V ("hry")), string1: "pqt"
Model : lambda1: V ("wwx"), string1: "yns"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("lxh")) (("gry"::(Nil))) = true
sub_check_ta1 (P ("spk") (V ("hry"))) (("pqt"::(Nil))) = true
sub_check_ta1 (V ("wwx")) (("yns"::(Nil))) = true
Simplifying took 0.005366 seconds
Result : true
advanced_generalize done
=================================================
Progress: 66


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 67


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9)
=================================================
Progress: 68


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "llh", string2: "ewh"
Model : string1: "vqi", string2: "knt"
Model : string1: "eqp", string2: "hbn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("llh") ("ewh") = true
string_eq ("vqi") ("knt") = true
string_eq ("eqp") ("hbn") = true
Simplifying took 0.002481 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 69


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 70


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 71


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 72


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9)
=================================================
Progress: 73


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:9)
=================================================
Progress: 74


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 75


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 76


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 77


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 78


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:11)
=================================================
Progress: 79


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 80


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 81


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 82


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 83


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "bki", string2: "hzs"
Model : string1: "ddu", string2: "xlk"
Model : string1: "sqc", string2: "gzs"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bki") ("hzs") = true
string_eq ("ddu") ("xlk") = true
string_eq ("sqc") ("gzs") = true
Simplifying took 0.001499 seconds
Result : true
advanced_generalize done
=================================================
Progress: 84


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string2) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 85


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 86


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 87


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "ncx", string2: "sxq"
Model : string1: "ide", string2: "psy"
Model : string1: "rjn", string2: "bct"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("sxq") ("ncx") then false else true then ("ncx"::filter (aux ("ncx")) ((Nil))) else filter (aux ("ncx")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("psy") ("ide") then false else true then ("ide"::filter (aux ("ide")) ((Nil))) else filter (aux ("ide")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("bct") ("rjn") then false else true then ("rjn"::filter (aux ("rjn")) ((Nil))) else filter (aux ("rjn")) ((Nil))) ((Nil))
Simplifying took 0.001851 seconds
Result : true
advanced_generalize done
=================================================
Progress: 88


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 89


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
=================================================
Progress: 90


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 91


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 92


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "rlr", string2: "wmq"
Model : string1: "bzx", string2: "jfw"
Model : string1: "vny", string2: "maq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("rlr") ("wmq") = true
string_eq ("bzx") ("jfw") = true
string_eq ("vny") ("maq") = true
Simplifying took 0.002988 seconds
Result : true
advanced_generalize done
=================================================
Progress: 93


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 94


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 95


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 96


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 97


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:7)
=================================================
Progress: 98


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 99


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 100


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 101


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 102


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "bgg", string2: "qzc"
Model : string1: "ruh", string2: "qqm"
Model : string1: "ddx", string2: "dkl"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bgg") ("qzc") = true
string_eq ("ruh") ("qqm") = true
string_eq ("ddx") ("dkl") = true
Simplifying took 0.002098 seconds
Result : true
advanced_generalize done
=================================================
Progress: 103


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:8)
rewrite <- Case1 in goal at 1(rank:8)
rewrite Case1 in goal at 0(rank:24)
rewrite Case1 in goal at 1(rank:24)
rewrite Case1 in goal at 2(rank:24)
rewrite Case1 in goal at 3(rank:24)
rewrite <- Case1 in goal at 2(rank:8)
case if string_eq (string2) (string1) then false else true(rank:9)
rewrite Cond1 in goal at 0(rank:16)
=================================================
Progress: 104


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 105


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 106


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "uey", string2: "tje"
Model : string1: "gbu", string2: "hsn"
Model : string1: "gnc", string2: "tan"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("tje") ("uey") then false else true then ("uey"::filter (aux ("uey")) ((Nil))) else filter (aux ("uey")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("hsn") ("gbu") then false else true then ("gbu"::filter (aux ("gbu")) ((Nil))) else filter (aux ("gbu")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("tan") ("gnc") then false else true then ("gnc"::filter (aux ("gnc")) ((Nil))) else filter (aux ("gnc")) ((Nil))) ((Nil))
Simplifying took 0.001972 seconds
Result : true
advanced_generalize done
=================================================
Progress: 107


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 108


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
rewrite <- Case1 in goal at 0(rank:23)
rewrite <- Case1 in goal at 1(rank:15)
rewrite <- Case1 in goal at 2(rank:23)
=================================================
Progress: 109


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 110


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 111


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "uev", string2: "yeo"
Model : string1: "qvz", string2: "clt"
Model : string1: "chh", string2: "qvp"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("uev") ("yeo") = true
string_eq ("qvz") ("clt") = true
string_eq ("chh") ("qvp") = true
Simplifying took 0.002414 seconds
Result : true
advanced_generalize done
=================================================
Progress: 112


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 113


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 114


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 115


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 116


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "ame", string2: "gpt"
Model : string1: "tih", string2: "sag"
Model : string1: "zbe", string2: "jdd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ame") ("gpt") = true
string_eq ("tih") ("sag") = true
string_eq ("zbe") ("jdd") = true
Simplifying took 0.002423 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 117


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 118


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 119


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 120


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 121


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:7)
=================================================
Progress: 122


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 123


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:8)
=================================================
Progress: 124


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:16)
rewrite Cond1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 125


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 126


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 127


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 128


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 129


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "bht", string2: "shq"
Model : string1: "wqk", string2: "wqm"
Model : string1: "zea", string2: "doa"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bht") ("shq") = true
string_eq ("wqk") ("wqm") = true
string_eq ("zea") ("doa") = true
Simplifying took 0.003704 seconds
Result : true
advanced_generalize done
=================================================
Progress: 130


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:8)
=================================================
Progress: 131


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:16)
rewrite Cond1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 132


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:24)
rewrite Cond1 in goal at 1(rank:24)
rewrite Cond1 in goal at 2(rank:24)
=================================================
Progress: 133


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "lyn", string2: "ryb"
Model : string1: "czw", string2: "ytf"
Model : string1: "qvo", string2: "cpz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("lyn") ("ryb") = true
string_eq ("czw") ("ytf") = true
string_eq ("qvo") ("cpz") = true
Simplifying took 0.001796 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 134


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8)
=================================================
Progress: 135


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:7)
=================================================
Progress: 136


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 4
Tactic List : 2
rewrite Case1 in goal at 0(rank:15)
rewrite lemma3 in goal at 0(rank:18)
=================================================
Progress: 137


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
assert forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
discriminate
discriminate
rewrite Case1 in goal at 0
advanced_generalize done
=================================================
Progress: 138


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:24)
rewrite Cond1 in goal at 1(rank:24)
rewrite Cond1 in goal at 2(rank:24)
=================================================
Progress: 139


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "zaj", string2: "ifv"
Model : string1: "mhj", string2: "fwx"
Model : string1: "sux", string2: "fme"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("zaj") ("ifv") = true
string_eq ("mhj") ("fwx") = true
string_eq ("sux") ("fme") = true
Simplifying took 0.001903 seconds
Result : true
advanced_generalize done
=================================================
Progress: 140


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = string_eq (string1) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 141


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 142


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 143


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 144


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:10)
=================================================
Progress: 145


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 146


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9)
=================================================
Progress: 147


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "dxk", string2: "wgn"
Model : string1: "ovp", string2: "hkp"
Model : string1: "qgi", string2: "wec"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dxk") ("wgn") = true
string_eq ("ovp") ("hkp") = true
string_eq ("qgi") ("wec") = true
Simplifying took 0.002394 seconds
Result : true
advanced_generalize done
=================================================
Progress: 148


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 18)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 149


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9)
=================================================
Progress: 150


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:12)
=================================================
Progress: 151


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 152


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 153


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14)
=================================================
Progress: 154


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 155


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

9 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

8 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 156


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

8 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:16)
=================================================
Progress: 157


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

8 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

11 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:15)
=================================================
Progress: 158


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

11 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

10 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:15)
=================================================
Progress: 159


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

10 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

10 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:18)
=================================================
Progress: 160


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

10 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 18)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

13 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:17)
=================================================
Progress: 161


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

13 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

12 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:17)
=================================================
Progress: 162


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

12 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

12 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:20)
=================================================
Progress: 163


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 164


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 165


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 166


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 167


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:11)
=================================================
Progress: 168


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 169


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 170


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 171


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 172


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "azn", string2: "nxq"
Model : string1: "ydj", string2: "mrb"
Model : string1: "chq", string2: "sij"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("azn") ("nxq") = true
string_eq ("ydj") ("mrb") = true
string_eq ("chq") ("sij") = true
Simplifying took 0.002146 seconds
Result : true
advanced_generalize done
=================================================
Progress: 173


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string2) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 174


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 175


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 176


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "kji", string2: "rcr"
Model : string1: "cfz", string2: "lkd"
Model : string1: "tnv", string2: "wzb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("rcr") ("kji") then false else true then ("kji"::filter (aux ("kji")) ((Nil))) else filter (aux ("kji")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("lkd") ("cfz") then false else true then ("cfz"::filter (aux ("cfz")) ((Nil))) else filter (aux ("cfz")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("wzb") ("tnv") then false else true then ("tnv"::filter (aux ("tnv")) ((Nil))) else filter (aux ("tnv")) ((Nil))) ((Nil))
Simplifying took 0.002528 seconds
Result : true
advanced_generalize done
=================================================
Progress: 177


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 178


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
=================================================
Progress: 179


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 180


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 181


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "pzm", string2: "xbj"
Model : string1: "gfq", string2: "kjg"
Model : string1: "ymh", string2: "jim"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("pzm") ("xbj") = true
string_eq ("gfq") ("kjg") = true
string_eq ("ymh") ("jim") = true
Simplifying took 0.002690 seconds
Result : true
advanced_generalize done
=================================================
Progress: 182


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 183


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 184


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 185


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 186


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "stk", string2: "hfl"
Model : string1: "axg", string2: "muw"
Model : string1: "azg", string2: "prg"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("stk") ("hfl") = true
string_eq ("axg") ("muw") = true
string_eq ("azg") ("prg") = true
Simplifying took 0.001545 seconds
Result : true
advanced_generalize done
=================================================
Progress: 187


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:12)
=================================================
Progress: 188


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:20)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 189


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 190


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 191


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 192


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 193


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "oqc", string2: "xmk"
Model : string1: "ydf", string2: "ski"
Model : string1: "yrz", string2: "fxf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("oqc") ("xmk") = true
string_eq ("ydf") ("ski") = true
string_eq ("yrz") ("fxf") = true
Simplifying took 0.003984 seconds
Result : true
advanced_generalize done
=================================================
Progress: 194


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:12)
=================================================
Progress: 195


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:20)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 196


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

12 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

15 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:19)
=================================================
Progress: 197


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

15 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

14 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:19)
=================================================
Progress: 198


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

14 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

14 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:22)
=================================================
Progress: 199


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:28)
rewrite Cond1 in goal at 1(rank:28)
rewrite Cond1 in goal at 2(rank:28)
=================================================
Progress: 200


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "mgd", string2: "shp"
Model : string1: "vtp", string2: "vrv"
Model : string1: "tkl", string2: "bmz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("mgd") ("shp") = true
string_eq ("vtp") ("vrv") = true
string_eq ("tkl") ("bmz") = true
Simplifying took 0.003561 seconds
Result : true
advanced_generalize done
=================================================
Progress: 201


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = string_eq (string1) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 202


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:28)
rewrite Cond1 in goal at 1(rank:28)
rewrite Cond1 in goal at 2(rank:28)
=================================================
Progress: 203


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "qtz", string2: "tmy"
Model : string1: "rwz", string2: "mvp"
Model : string1: "zim", string2: "sub"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qtz") ("tmy") = true
string_eq ("rwz") ("mvp") = true
string_eq ("zim") ("sub") = true
Simplifying took 0.003467 seconds
Result : true
advanced_generalize done
=================================================
Progress: 204


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = string_eq (string1) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 205


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

14 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 22)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

17 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:21)
=================================================
Progress: 206


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

17 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

16 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 207


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

16 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

16 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:24)
=================================================
Progress: 208


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:8)
=================================================
Progress: 209


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 210


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 211


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 212


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 213


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8)
=================================================
Progress: 214


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:8)
=================================================
Progress: 215


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:8)
rewrite Case1 in goal at 0(rank:16)
rewrite Case3 in goal at 0(rank:24)
=================================================
Progress: 216


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 217


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 218


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 219


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 220


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6)
=================================================
Progress: 221


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6)
=================================================
Progress: 222


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: V ("qha"), string1: "rvb", string2: "eyk"
Model : lambda2: V ("pdj"), string1: "diu", string2: "doh"
Model : lambda2: P ("ewa") (V ("gvk")), string1: "zda", string2: "lhr"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("qha")) (("eyk"::("rvb"::(Nil)))) = true
sub_check_ta1 (V ("pdj")) (("doh"::("diu"::(Nil)))) = true
sub_check_ta1 (P ("ewa") (V ("gvk"))) (("lhr"::("zda"::(Nil)))) = true
Simplifying took 0.003985 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 223


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:7)
intro string1(rank:7)
intro string2(rank:7)
induction lambda1(rank:17)
=================================================
Progress: 224


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro lambda1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 225


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:7)
induction lambda1(rank:17)
=================================================
Progress: 226


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9)
=================================================
Progress: 227


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 228


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9)
=================================================
Progress: 229


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 230


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:7)
=================================================
Progress: 231


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
Model : lambda1: V ("rhp"), string1: "bdo", string2: "uuh"
Model : lambda1: V ("pyw"), string1: "otj", string2: "rre"
Model : lambda1: V ("nay"), string1: "byj", string2: "grq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("rhp")) (("uuh"::("bdo"::(Nil)))) = list_eq (filter (aux ("bdo")) (filter (aux ("uuh")) (getStn (V ("rhp"))))) ((Nil))
sub_check_ta1 (V ("pyw")) (("rre"::("otj"::(Nil)))) = list_eq (filter (aux ("otj")) (filter (aux ("rre")) (getStn (V ("pyw"))))) ((Nil))
sub_check_ta1 (V ("nay")) (("grq"::("byj"::(Nil)))) = list_eq (filter (aux ("byj")) (filter (aux ("grq")) (getStn (V ("nay"))))) ((Nil))
Simplifying took 0.007756 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 232


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:9)
intro string1(rank:9)
intro string2(rank:9)
induction lambda1(rank:19)
=================================================
Progress: 233


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 234


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 235


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 236


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string2(rank:9)
induction lambda1(rank:19)
=================================================
Progress: 237


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11)
=================================================
Progress: 238


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 239


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 240


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 241


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11)
=================================================
Progress: 242


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 243


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 244


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 245


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 246


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9)
=================================================
Progress: 247


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
Model : lambda1: V ("lth"), string1: "hlq", string2: "ifk"
Model : lambda1: V ("tzt"), string1: "cwm", string2: "hlb"
Model : lambda1: V ("xae"), string1: "sxu", string2: "kxs"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("lth")) (("ifk"::("hlq"::(Nil)))) = true
sub_check_ta1 (V ("tzt")) (("hlb"::("cwm"::(Nil)))) = true
sub_check_ta1 (V ("xae")) (("kxs"::("sxu"::(Nil)))) = true
Simplifying took 0.005872 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 248


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:11)
intro string1(rank:11)
intro string2(rank:11)
induction lambda1(rank:21)
=================================================
Progress: 249


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 250


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 251


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 252


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 253


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 254


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 255


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 256


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 257


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 258


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 259


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 260


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro string2(rank:11)
induction lambda1(rank:21)
=================================================
Progress: 261


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13)
=================================================
Progress: 262


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 263


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 264


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 265


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13)
=================================================
Progress: 266


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 267


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 268


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 269


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 270


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:11)
=================================================
Progress: 271


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
Model : lambda1: V ("sju"), string1: "qxc", string2: "xhx"
Model : lambda1: V ("gwo"), string1: "out", string2: "ual"
Model : lambda1: V ("uwo"), string1: "tmr", string2: "tfb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("sju")) (("xhx"::("qxc"::(Nil)))) = list_eq (filter (aux ("qxc")) (filter (aux ("xhx")) (getStn (V ("sju"))))) ((Nil))
sub_check_ta1 (V ("gwo")) (("ual"::("out"::(Nil)))) = list_eq (filter (aux ("out")) (filter (aux ("ual")) (getStn (V ("gwo"))))) ((Nil))
sub_check_ta1 (V ("uwo")) (("tfb"::("tmr"::(Nil)))) = list_eq (filter (aux ("tmr")) (filter (aux ("tfb")) (getStn (V ("uwo"))))) ((Nil))
Simplifying took 0.008502 seconds
Result : true
advanced_generalize done
=================================================
Progress: 272


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 273


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 274


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 275


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 276


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 277


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 278


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 279


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 280


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 281


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 282


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 283


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 284


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 285


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 286


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 287


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 288


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 289


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 290


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 291


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 292


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 293


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 294


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 295


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 296


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 297


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 298


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 299


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 300


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 301


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 302


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 303


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 304


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 305


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 306


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 307


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 308


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 309


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 310


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 311


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 312


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 313


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 314


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 315


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 316


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 317


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 318


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 319


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 320


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 321


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 322


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 323


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 324


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 325


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 326


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 327


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 328


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 329


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 330


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 331


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 332


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 333


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 334


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 335


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 336


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 337


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 338


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 339


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 340


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 341


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 342


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 343


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 344


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 345


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 346


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 347


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 348


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 349


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "vnt", string2: "drn", string3: "kdj"
Model : string1: "xci", string2: "mmw", string3: "ehy"
Model : string1: "zvd", string2: "lbb", string3: "bdy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("drn") ("vnt") then false else true then ("kdj"::filter (aux ("vnt")) ((Nil))) else filter (aux ("vnt")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("mmw") ("xci") then false else true then ("ehy"::filter (aux ("xci")) ((Nil))) else filter (aux ("xci")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("lbb") ("zvd") then false else true then ("bdy"::filter (aux ("zvd")) ((Nil))) else filter (aux ("zvd")) ((Nil))) ((Nil))
Simplifying took 0.002192 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 350


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 351


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 352


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 353


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 354


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 355


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 356


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case if string_eq (string2) (string1) then false else true(rank:12)
rewrite Cond3 in goal at 0(rank:27)
rewrite <- Cond3 in goal at 0(rank:27)
=================================================
Progress: 357


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
true = false

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 358


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "djn", string2: "csi", string3: "pel"
Model : string1: "xxs", string2: "laz", string3: "pyx"
Model : string1: "hqd", string2: "ryi", string3: "imp"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("pel") ("djn") then false else true then ("csi"::filter (aux ("djn")) ((Nil))) else filter (aux ("djn")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("pyx") ("xxs") then false else true then ("laz"::filter (aux ("xxs")) ((Nil))) else filter (aux ("xxs")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("imp") ("hqd") then false else true then ("ryi"::filter (aux ("hqd")) ((Nil))) else filter (aux ("hqd")) ((Nil))) ((Nil))
Simplifying took 0.002495 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 359


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 360


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 361


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 362


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 363


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 364


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 365


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case if string_eq (string3) (string1) then false else true(rank:12)
rewrite Cond3 in goal at 0(rank:27)
rewrite <- Cond3 in goal at 0(rank:27)
=================================================
Progress: 366


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 12)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : false = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:11)
=================================================
Progress: 367


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : false = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

1 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : true = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 368


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 369


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 370


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 371


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "sao", string2: "msx", string3: "amh"
Model : string1: "sre", string2: "tcm", string3: "bzu"
Model : string1: "npn", string2: "edg", string3: "pbz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("msx") ("sao") then false else true then ("amh"::filter (aux ("sao")) ((Nil))) else filter (aux ("sao")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("tcm") ("sre") then false else true then ("bzu"::filter (aux ("sre")) ((Nil))) else filter (aux ("sre")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("edg") ("npn") then false else true then ("pbz"::filter (aux ("npn")) ((Nil))) else filter (aux ("npn")) ((Nil))) ((Nil))
Simplifying took 0.002591 seconds
Result : true
advanced_generalize done
=================================================
Progress: 372


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "mxt", string2: "upk", string3: "ssa"
Model : string1: "tap", string2: "cip", string3: "pod"
Model : string1: "nht", string2: "nog", string3: "tap"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("ssa") ("mxt") then false else true then ("upk"::filter (aux ("mxt")) ((Nil))) else filter (aux ("mxt")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("pod") ("tap") then false else true then ("cip"::filter (aux ("tap")) ((Nil))) else filter (aux ("tap")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("tap") ("nht") then false else true then ("nog"::filter (aux ("nht")) ((Nil))) else filter (aux ("nht")) ((Nil))) ((Nil))
Simplifying took 0.003801 seconds
Result : true
advanced_generalize done
=================================================
Progress: 373


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 374


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 375


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 376


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 377


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 378


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 379


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 380


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 381


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 382


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 383


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 384


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 385


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 386


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 387


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 388


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : true = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

0 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 389


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 390


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 391


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 392


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 393


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 394


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 395


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 396


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 397


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 398


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 399


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 400


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 401


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 402


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 403


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 5
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 404


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 405


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 406


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 407


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 408


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 409


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 410


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 411


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 412


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 413


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 414


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 415


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 416


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 417


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 418


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 419


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 420


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 421


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 422


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 423


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 424


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 425


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 426


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 427


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 428


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 429


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 430


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 431


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 432


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 433


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 434


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 435


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 436


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 437


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 438


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 439


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 440


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 441


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 442


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 443


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 444


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 445


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 446


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 447


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 448


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 449


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 450


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 451


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 452


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 453


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 454


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 455


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 456


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 457


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 458


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 459


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 460


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 461


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 462


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 463


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 464


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 465


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 466


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 467


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 468


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 469


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 470


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 471


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 472


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 473


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 474


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 475


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 476


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 477


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 478


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 479


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 480


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 481


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 482


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 483


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 484


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 485


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 486


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 487


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 488


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 489


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 490


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 491


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 492


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 493


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 494


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 495


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 496


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 497


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 498


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 499


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 500


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "nbm", string2: "zff", string3: "czh"
Model : string1: "hko", string2: "jtb", string3: "xub"
Model : string1: "bgb", string2: "lpm", string3: "tto"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("zff") ("nbm") then false else true then ("czh"::filter (aux ("nbm")) ((Nil))) else filter (aux ("nbm")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("jtb") ("hko") then false else true then ("xub"::filter (aux ("hko")) ((Nil))) else filter (aux ("hko")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("lpm") ("bgb") then false else true then ("tto"::filter (aux ("bgb")) ((Nil))) else filter (aux ("bgb")) ((Nil))) ((Nil))
Simplifying took 0.002735 seconds
Result : true
advanced_generalize done
=================================================
Progress: 501


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "pfj", string2: "jmj", string3: "ykl"
Model : string1: "snk", string2: "quj", string3: "oia"
Model : string1: "pog", string2: "xze", string3: "mnx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("ykl") ("pfj") then false else true then ("jmj"::filter (aux ("pfj")) ((Nil))) else filter (aux ("pfj")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("oia") ("snk") then false else true then ("quj"::filter (aux ("snk")) ((Nil))) else filter (aux ("snk")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("mnx") ("pog") then false else true then ("xze"::filter (aux ("pog")) ((Nil))) else filter (aux ("pog")) ((Nil))) ((Nil))
Simplifying took 0.003801 seconds
Result : true
advanced_generalize done
=================================================
Progress: 502


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 503


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 504


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 505


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 506


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 507


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 508


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 509


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 510


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 511


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 512


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 513


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 514


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 515


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 516


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 517


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 518


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 519


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 520


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 521


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 522


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 523


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 524


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 525


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 526


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 527


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 528


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 529


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 530


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 531


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 532


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 533


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 534


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 535


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 536


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 537


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 538


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 539


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 540


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 541


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 542


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 543


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 544


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 545


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 546


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 547


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 548


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 549


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 550


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 551


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 552


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 553


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 554


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 555


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 556


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 557


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 558


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 559


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 560


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 561


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 562


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 563


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 564


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 565


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 566


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 567


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 568


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 569


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 570


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 571


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 572


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "rjc", string2: "khf", string3: "eus"
Model : string1: "djk", string2: "htl", string3: "wdz"
Model : string1: "zoe", string2: "ioz", string3: "yqb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("khf") ("rjc") then false else true then ("eus"::filter (aux ("rjc")) ((Nil))) else filter (aux ("rjc")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("htl") ("djk") then false else true then ("wdz"::filter (aux ("djk")) ((Nil))) else filter (aux ("djk")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("ioz") ("zoe") then false else true then ("yqb"::filter (aux ("zoe")) ((Nil))) else filter (aux ("zoe")) ((Nil))) ((Nil))
Simplifying took 0.002770 seconds
Result : true
advanced_generalize done
=================================================
Progress: 573


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "kpq", string2: "ypr", string3: "awb"
Model : string1: "tbl", string2: "dmo", string3: "fol"
Model : string1: "acq", string2: "zqa", string3: "eyj"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("awb") ("kpq") then false else true then ("ypr"::filter (aux ("kpq")) ((Nil))) else filter (aux ("kpq")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("fol") ("tbl") then false else true then ("dmo"::filter (aux ("tbl")) ((Nil))) else filter (aux ("tbl")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("eyj") ("acq") then false else true then ("zqa"::filter (aux ("acq")) ((Nil))) else filter (aux ("acq")) ((Nil))) ((Nil))
Simplifying took 0.001521 seconds
Result : true
advanced_generalize done
=================================================
Progress: 574


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 575


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 576


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 577


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 578


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 579


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 580


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 581


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 582


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 583


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 584


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 585


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 586


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 587


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 588


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 589


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 590


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 591


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 592


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 593


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 594


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 595


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 596


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 597


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 598


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 599


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 600


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 601


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 602


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 603


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 604


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 605


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 606


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 607


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 608


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 609


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 610


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 611


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 612


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 613


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 614


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 615


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 616


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 617


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 618


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 619


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 620


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 621


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "sse", string3: "tfu"
Model : string1: "zpm", string3: "gdt"
Model : string1: "sbx", string3: "ljx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("sse") ("tfu") = true
string_eq ("zpm") ("gdt") = true
string_eq ("sbx") ("ljx") = true
Simplifying took 0.002778 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 622


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 623


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 624


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 625


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 626


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 627


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:11)
=================================================
Progress: 628


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 629


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 630


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 631


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 632


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 633


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 634


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "myc", string3: "ztn"
Model : string2: "uuw", string3: "evk"
Model : string2: "fxi", string3: "von"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("myc") ("ztn") = true
string_eq ("uuw") ("evk") = true
string_eq ("fxi") ("von") = true
Simplifying took 0.002269 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 635


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 636


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 637


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 638


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 639


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 640


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 641


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "mhm", string3: "vns"
Model : string1: "ovv", string3: "cjk"
Model : string1: "kwn", string3: "gtz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("mhm") ("vns") = true
string_eq ("ovv") ("cjk") = true
string_eq ("kwn") ("gtz") = true
Simplifying took 0.002016 seconds
Result : true
advanced_generalize done
=================================================
Progress: 642


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 643


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 644


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 645


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 646


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 647


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "bqq", string3: "csv"
Model : string2: "soe", string3: "asv"
Model : string2: "ucf", string3: "cgd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bqq") ("csv") = true
string_eq ("soe") ("asv") = true
string_eq ("ucf") ("cgd") = true
Simplifying took 0.000988 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 648


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 649


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 650


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 651


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 652


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 653


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 654


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 655


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 656


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 657


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 658


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 659


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 660


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "snc", string3: "dcw"
Model : string1: "ebf", string3: "let"
Model : string1: "wif", string3: "gtm"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("snc") ("dcw") = true
string_eq ("ebf") ("let") = true
string_eq ("wif") ("gtm") = true
Simplifying took 0.001566 seconds
Result : true
advanced_generalize done
=================================================
Progress: 661


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 662


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 663


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 664


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 665


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 666


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "sbg", string3: "vbd"
Model : string2: "wdl", string3: "efx"
Model : string2: "die", string3: "aos"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("sbg") ("vbd") = true
string_eq ("wdl") ("efx") = true
string_eq ("die") ("aos") = true
Simplifying took 0.001910 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 667


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 668


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 669


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 670


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 671


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 672


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 673


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 674


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 675


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 676


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 677


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 678


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 679


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "erp", string3: "xhy"
Model : string1: "hhu", string3: "tuv"
Model : string1: "pjy", string3: "hha"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("erp") ("xhy") = true
string_eq ("hhu") ("tuv") = true
string_eq ("pjy") ("hha") = true
Simplifying took 0.002516 seconds
Result : true
advanced_generalize done
=================================================
Progress: 680


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 681


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 682


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 683


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 684


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 685


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "qzq", string3: "hrn"
Model : string2: "eqc", string3: "bjw"
Model : string2: "txl", string3: "ano"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qzq") ("hrn") = true
string_eq ("eqc") ("bjw") = true
string_eq ("txl") ("ano") = true
Simplifying took 0.001500 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 686


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 687


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 688


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 689


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 690


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 691


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 692


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 693


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 694


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 695


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 696


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 697


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 698


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 699


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 700


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 701


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 702


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 703


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 704


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 705


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 706


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 707


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 708


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 709


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 710


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 711


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 712


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 713


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 714


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 715


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 716


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 717


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 718


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 719


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 720


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 721


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 722


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 723


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 724


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 725


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 726


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 727


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 728


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 729


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 730


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 731


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 732


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 733


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 734


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 735


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 736


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 737


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 738


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 739


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 740


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 741


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 742


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 743


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 744


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 745


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 746


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 747


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 748


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 749


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 750


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 751


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 752


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 753


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 754


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 755


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 756


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 757


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 758


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 759


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 760


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 761


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 762


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 763


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 764


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 765


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 766


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 767


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 768


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 769


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 770


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 771


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 772


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 773


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 774


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 775


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 776


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 777


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 778


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 779


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 780


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 781


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 782


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 783


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 784


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "kqx", string3: "mce"
Model : string1: "iqz", string3: "aml"
Model : string1: "mwl", string3: "rwk"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("kqx") ("mce") = true
string_eq ("iqz") ("aml") = true
string_eq ("mwl") ("rwk") = true
Simplifying took 0.002277 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 785


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 786


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 787


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 788


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 789


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:11)
=================================================
Progress: 790


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 791


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 792


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 793


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "piw", string3: "dxp"
Model : string2: "wvw", string3: "yox"
Model : string2: "cvy", string3: "itb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("piw") ("dxp") = true
string_eq ("wvw") ("yox") = true
string_eq ("cvy") ("itb") = true
Simplifying took 0.003063 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 794


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 795


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 796


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "dqr", string3: "vmo"
Model : string1: "rxs", string3: "ibp"
Model : string1: "tbk", string3: "dmm"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dqr") ("vmo") = true
string_eq ("rxs") ("ibp") = true
string_eq ("tbk") ("dmm") = true
Simplifying took 0.001772 seconds
Result : true
advanced_generalize done
=================================================
Progress: 797


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 798


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 799


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "pzu", string3: "mbg"
Model : string2: "npi", string3: "nys"
Model : string2: "mxg", string3: "xwl"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("pzu") ("mbg") = true
string_eq ("npi") ("nys") = true
string_eq ("mxg") ("xwl") = true
Simplifying took 0.004008 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 800


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 801


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 802


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "fda", string3: "tdu"
Model : string1: "pyj", string3: "est"
Model : string1: "wop", string3: "zzc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("fda") ("tdu") = true
string_eq ("pyj") ("est") = true
string_eq ("wop") ("zzc") = true
Simplifying took 0.003157 seconds
Result : true
advanced_generalize done
=================================================
Progress: 803


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 804


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 805


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "stu", string3: "lin"
Model : string2: "hsz", string3: "fec"
Model : string2: "mvj", string3: "edl"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("stu") ("lin") = true
string_eq ("hsz") ("fec") = true
string_eq ("mvj") ("edl") = true
Simplifying took 0.001533 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 806


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 807


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 808


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "hbo", string3: "acb"
Model : string1: "fiu", string3: "kfo"
Model : string1: "ewd", string3: "dyw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("hbo") ("acb") = true
string_eq ("fiu") ("kfo") = true
string_eq ("ewd") ("dyw") = true
Simplifying took 0.001149 seconds
Result : true
advanced_generalize done
=================================================
Progress: 809


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 810


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 811


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "pnr", string3: "bms"
Model : string2: "zri", string3: "mfz"
Model : string2: "fxp", string3: "rvw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("pnr") ("bms") = true
string_eq ("zri") ("mfz") = true
string_eq ("fxp") ("rvw") = true
Simplifying took 0.002411 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 812


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 813


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 814


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 815


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 816


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 817


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 818


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 819


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 820


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 821


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 822


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 823


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 824


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 825


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 826


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 827


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 828


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 829


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 830


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "bmv", string3: "atp"
Model : string2: "etr", string3: "hon"
Model : string2: "vja", string3: "mkx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bmv") ("atp") = true
string_eq ("etr") ("hon") = true
string_eq ("vja") ("mkx") = true
Simplifying took 0.001694 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 831


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 832


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 833


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 2
rewrite Case1 in goal at 0(rank:20)
rewrite lemma3 in goal at 0(rank:23)
=================================================
Progress: 834


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 835


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:15)
=================================================
Progress: 836


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 837


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case2 in goal at 0(rank:30)
=================================================
Progress: 838


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 839


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "pue", string3: "zih"
Model : string1: "evn", string3: "qrj"
Model : string1: "nrx", string3: "kan"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("pue") ("zih") = true
string_eq ("evn") ("qrj") = true
string_eq ("nrx") ("kan") = true
Simplifying took 0.003023 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 840


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 841


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Case2 in goal at 0(rank:21)
rewrite lemma3 in goal at 0(rank:24)
=================================================
Progress: 842


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "wdz", string2: "svp", string3: "hft"
Model : string1: "pua", string2: "uka", string3: "fso"
Model : string1: "dvn", string2: "flk", string3: "nvn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("wdz") ("hft") = string_eq ("svp") ("hft")
string_eq ("pua") ("fso") = string_eq ("uka") ("fso")
string_eq ("dvn") ("nvn") = string_eq ("flk") ("nvn")
Simplifying took 0.003685 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 843


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 844


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 845


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 846


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 847


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
discriminate
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "dwp", string3: "hvk"
Model : string2: "ccn", string3: "wnd"
Model : string2: "fxs", string3: "znf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dwp") ("hvk") = true
string_eq ("ccn") ("wnd") = true
string_eq ("fxs") ("znf") = true
Simplifying took 0.001538 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 848


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 849


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "aph", string3: "lva"
Model : string2: "cgk", string3: "tur"
Model : string2: "ukf", string3: "lro"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("aph") ("lva") = true
string_eq ("cgk") ("tur") = true
string_eq ("ukf") ("lro") = true
Simplifying took 0.001460 seconds
Result : true
advanced_generalize done
=================================================
Progress: 850


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 851


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "eyu", string2: "owx", string3: "wlt"
Model : string1: "bkn", string2: "gjn", string3: "mns"
Model : string1: "xyk", string2: "dgy", string3: "ykv"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("owx") ("wlt") = string_eq ("eyu") ("wlt")
string_eq ("gjn") ("mns") = string_eq ("bkn") ("mns")
string_eq ("dgy") ("ykv") = string_eq ("xyk") ("ykv")
Simplifying took 0.005045 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 852


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 853


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 854


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 6
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 855


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 856


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
discriminate
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "nhq", string3: "mbi"
Model : string1: "nxz", string3: "gop"
Model : string1: "axz", string3: "xeb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("nhq") ("mbi") = true
string_eq ("nxz") ("gop") = true
string_eq ("axz") ("xeb") = true
Simplifying took 0.002101 seconds
Result : true
advanced_generalize done
=================================================
Progress: 857


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 858


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "rmf", string3: "lsj"
Model : string1: "hdk", string3: "txn"
Model : string1: "gqp", string3: "sko"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("rmf") ("lsj") = true
string_eq ("hdk") ("txn") = true
string_eq ("gqp") ("sko") = true
Simplifying took 0.002557 seconds
Result : true
advanced_generalize done
=================================================
Progress: 859


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "zej", string2: "juk", string3: "eiv"
Model : string1: "qux", string2: "uhm", string3: "pgr"
Model : string1: "qpx", string2: "ipv", string3: "rhy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("zej") ("eiv") = string_eq ("juk") ("eiv")
string_eq ("qux") ("pgr") = string_eq ("uhm") ("pgr")
string_eq ("qpx") ("rhy") = string_eq ("ipv") ("rhy")
Simplifying took 0.005074 seconds
Result : true
advanced_generalize done
=================================================
Progress: 860


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 861


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 862


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "dgi", string3: "xmn"
Model : string2: "nak", string3: "rco"
Model : string2: "uuk", string3: "ueh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dgi") ("xmn") = true
string_eq ("nak") ("rco") = true
string_eq ("uuk") ("ueh") = true
Simplifying took 0.003081 seconds
Result : true
advanced_generalize done
=================================================
Progress: 863


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 864


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "hpz", string2: "xsd", string3: "lxv"
Model : string1: "ryp", string2: "vhb", string3: "nqg"
Model : string1: "hdv", string2: "skr", string3: "owq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("xsd") ("lxv") = string_eq ("hpz") ("lxv")
string_eq ("vhb") ("nqg") = string_eq ("ryp") ("nqg")
string_eq ("skr") ("owq") = string_eq ("hdv") ("owq")
Simplifying took 0.004865 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 865


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 866


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 867


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 6
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 868


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:12)
=================================================
Progress: 869


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
discriminate
discriminate
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "zjy", string3: "qwt"
Model : string1: "itr", string3: "wdm"
Model : string1: "zxi", string3: "bsy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("zjy") ("qwt") = true
string_eq ("itr") ("wdm") = true
string_eq ("zxi") ("bsy") = true
Simplifying took 0.002559 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 870


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 871


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 872


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 873


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 874


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 875


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:11)
=================================================
Progress: 876


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 877


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 878


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "mdo", string3: "btq"
Model : string1: "gfb", string3: "eyx"
Model : string1: "gos", string3: "crz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("mdo") ("btq") = true
string_eq ("gfb") ("eyx") = true
string_eq ("gos") ("crz") = true
Simplifying took 0.000977 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 879


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 880


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 881


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 2
rewrite Case3 in goal at 0(rank:20)
rewrite lemma3 in goal at 0(rank:23)
=================================================
Progress: 882


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 883


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:15)
=================================================
Progress: 884


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 885


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 886


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 887


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "kut", string3: "ljz"
Model : string2: "ssp", string3: "sjd"
Model : string2: "vyo", string3: "fkq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("kut") ("ljz") = true
string_eq ("ssp") ("sjd") = true
string_eq ("vyo") ("fkq") = true
Simplifying took 0.002946 seconds
Result : true
advanced_generalize done
=================================================
Progress: 888


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 889


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "lhy", string2: "srx", string3: "pyr"
Model : string1: "tmb", string2: "pji", string3: "zjv"
Model : string1: "bxj", string2: "ofk", string3: "nlj"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("srx") ("pyr") = string_eq ("lhy") ("pyr")
string_eq ("pji") ("zjv") = string_eq ("tmb") ("zjv")
string_eq ("ofk") ("nlj") = string_eq ("bxj") ("nlj")
Simplifying took 0.005411 seconds
Result : true
advanced_generalize done
=================================================
Progress: 890


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 891


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "udw", string3: "lzd"
Model : string1: "oea", string3: "zcp"
Model : string1: "oxk", string3: "mcy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("udw") ("lzd") = true
string_eq ("oea") ("zcp") = true
string_eq ("oxk") ("mcy") = true
Simplifying took 0.002776 seconds
Result : true
advanced_generalize done
=================================================
Progress: 892


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "raf", string2: "jrx", string3: "vnb"
Model : string1: "wyv", string2: "vdb", string3: "wos"
Model : string1: "fpf", string2: "cht", string3: "qvv"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("raf") ("vnb") = string_eq ("jrx") ("vnb")
string_eq ("wyv") ("wos") = string_eq ("vdb") ("wos")
string_eq ("fpf") ("qvv") = string_eq ("cht") ("qvv")
Simplifying took 0.006858 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 893


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 894


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 895


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 1
rewrite Case3 in goal at 0(rank:12)
=================================================
Progress: 896


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 897


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
discriminate
discriminate
rewrite Case3 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "ilr", string3: "ltf"
Model : string2: "aji", string3: "tlj"
Model : string2: "jza", string3: "gad"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ilr") ("ltf") = true
string_eq ("aji") ("tlj") = true
string_eq ("jza") ("gad") = true
Simplifying took 0.001277 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 898


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 899


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "rxs", string3: "twv"
Model : string2: "znw", string3: "cbq"
Model : string2: "mbo", string3: "nir"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("rxs") ("twv") = true
string_eq ("znw") ("cbq") = true
string_eq ("mbo") ("nir") = true
Simplifying took 0.002345 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 900


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 901


1st goal of : forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 902


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 2
rewrite Case2 in goal at 0(rank:20)
rewrite lemma3 in goal at 0(rank:23)
=================================================
Progress: 903


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:12)
=================================================
Progress: 904


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:15)
=================================================
Progress: 905


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 906


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 907


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 908


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "vqq", string3: "iln"
Model : string1: "vjq", string3: "dcd"
Model : string1: "qsu", string3: "pxl"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("vqq") ("iln") = true
string_eq ("vjq") ("dcd") = true
string_eq ("qsu") ("pxl") = true
Simplifying took 0.002156 seconds
Result : true
advanced_generalize done
=================================================
Progress: 909


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "fap", string2: "ouz", string3: "hls"
Model : string1: "ohp", string2: "rvu", string3: "xfl"
Model : string1: "jaj", string2: "ift", string3: "lhm"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("fap") ("hls") = string_eq ("ouz") ("hls")
string_eq ("ohp") ("xfl") = string_eq ("rvu") ("xfl")
string_eq ("jaj") ("lhm") = string_eq ("ift") ("lhm")
Simplifying took 0.004346 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 910


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 911


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 912


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 1
rewrite Case3 in goal at 0(rank:12)
=================================================
Progress: 913


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 914


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
discriminate
discriminate
rewrite Case3 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), true = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "ift", string3: "hpy"
Model : string2: "nhr", string3: "msg"
Model : string2: "ncc", string3: "ets"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ift") ("hpy") = true
string_eq ("nhr") ("msg") = true
string_eq ("ncc") ("ets") = true
Simplifying took 0.001559 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 915


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 916


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "rpv", string3: "nkn"
Model : string2: "enh", string3: "oub"
Model : string2: "qez", string3: "bgr"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("rpv") ("nkn") = true
string_eq ("enh") ("oub") = true
string_eq ("qez") ("bgr") = true
Simplifying took 0.001694 seconds
Result : true
advanced_generalize done
=================================================
Progress: 917


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 918


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "byu", string2: "cgf", string3: "hab"
Model : string1: "yga", string2: "ycy", string3: "xoz"
Model : string1: "hpk", string2: "leb", string3: "jwa"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("cgf") ("hab") = string_eq ("byu") ("hab")
string_eq ("ycy") ("xoz") = string_eq ("yga") ("xoz")
string_eq ("leb") ("jwa") = string_eq ("hpk") ("jwa")
Simplifying took 0.004675 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 919


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 920


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 921


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 6
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 922


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:12)
=================================================
Progress: 923


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
discriminate
discriminate
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "qjh", string3: "olv"
Model : string1: "crm", string3: "kxm"
Model : string1: "rgd", string3: "osh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qjh") ("olv") = true
string_eq ("crm") ("kxm") = true
string_eq ("rgd") ("osh") = true
Simplifying took 0.002264 seconds
Result : true
advanced_generalize done
=================================================
Progress: 924


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 925


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "wyh", string3: "krc"
Model : string1: "alr", string3: "pjd"
Model : string1: "kgh", string3: "tnn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("wyh") ("krc") = true
string_eq ("alr") ("pjd") = true
string_eq ("kgh") ("tnn") = true
Simplifying took 0.001830 seconds
Result : true
advanced_generalize done
=================================================
Progress: 926


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "jdy", string2: "vmw", string3: "bej"
Model : string1: "big", string2: "klc", string3: "oir"
Model : string1: "hcs", string2: "frv", string3: "gvr"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jdy") ("bej") = string_eq ("vmw") ("bej")
string_eq ("big") ("oir") = string_eq ("klc") ("oir")
string_eq ("hcs") ("gvr") = string_eq ("frv") ("gvr")
Simplifying took 0.002362 seconds
Result : true
advanced_generalize done
=================================================
Progress: 927


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 928


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 929


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "agg", string3: "jls"
Model : string2: "sel", string3: "szl"
Model : string2: "kaf", string3: "ifx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("agg") ("jls") = true
string_eq ("sel") ("szl") = true
string_eq ("kaf") ("ifx") = true
Simplifying took 0.002243 seconds
Result : true
advanced_generalize done
=================================================
Progress: 930


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 931


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "vgg", string2: "gvy", string3: "ajc"
Model : string1: "eaj", string2: "vhx", string3: "pse"
Model : string1: "xdq", string2: "ufy", string3: "abi"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("gvy") ("ajc") = string_eq ("vgg") ("ajc")
string_eq ("vhx") ("pse") = string_eq ("eaj") ("pse")
string_eq ("ufy") ("abi") = string_eq ("xdq") ("abi")
Simplifying took 0.002865 seconds
Result : true
advanced_generalize done
=================================================
Progress: 932


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 933


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "bbc", string3: "eqx"
Model : string1: "vvq", string3: "mgt"
Model : string1: "chw", string3: "dop"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bbc") ("eqx") = true
string_eq ("vvq") ("mgt") = true
string_eq ("chw") ("dop") = true
Simplifying took 0.001641 seconds
Result : true
advanced_generalize done
=================================================
Progress: 934


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "jck", string2: "mjk", string3: "gri"
Model : string1: "tkx", string2: "ewu", string3: "vae"
Model : string1: "ygm", string2: "out", string3: "qis"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jck") ("gri") = string_eq ("mjk") ("gri")
string_eq ("tkx") ("vae") = string_eq ("ewu") ("vae")
string_eq ("ygm") ("qis") = string_eq ("out") ("qis")
Simplifying took 0.004805 seconds
Result : true
advanced_generalize done
=================================================
Progress: 935


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 936


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 937


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "bzz", string3: "gjv"
Model : string2: "xao", string3: "ocy"
Model : string2: "bnb", string3: "xzh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bzz") ("gjv") = true
string_eq ("xao") ("ocy") = true
string_eq ("bnb") ("xzh") = true
Simplifying took 0.001732 seconds
Result : true
advanced_generalize done
=================================================
Progress: 938


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 939


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "osd", string2: "bym", string3: "bre"
Model : string1: "brc", string2: "znb", string3: "ymk"
Model : string1: "svj", string2: "gao", string3: "pxx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bym") ("bre") = string_eq ("osd") ("bre")
string_eq ("znb") ("ymk") = string_eq ("brc") ("ymk")
string_eq ("gao") ("pxx") = string_eq ("svj") ("pxx")
Simplifying took 0.005551 seconds
Result : true
advanced_generalize done
=================================================
Progress: 940


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 941


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "ndw", string3: "kuy"
Model : string1: "guh", string3: "iqm"
Model : string1: "qtd", string3: "ifn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ndw") ("kuy") = true
string_eq ("guh") ("iqm") = true
string_eq ("qtd") ("ifn") = true
Simplifying took 0.001659 seconds
Result : true
advanced_generalize done
=================================================
Progress: 942


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "qvw", string2: "yky", string3: "utw"
Model : string1: "aat", string2: "kxn", string3: "gor"
Model : string1: "qzw", string2: "jps", string3: "skt"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qvw") ("utw") = string_eq ("yky") ("utw")
string_eq ("aat") ("gor") = string_eq ("kxn") ("gor")
string_eq ("qzw") ("skt") = string_eq ("jps") ("skt")
Simplifying took 0.005116 seconds
Result : true
advanced_generalize done
=================================================
Progress: 943


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 944


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 945


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "ure", string3: "lmu"
Model : string2: "xgh", string3: "bkn"
Model : string2: "uwr", string3: "edt"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ure") ("lmu") = true
string_eq ("xgh") ("bkn") = true
string_eq ("uwr") ("edt") = true
Simplifying took 0.001841 seconds
Result : true
advanced_generalize done
=================================================
Progress: 946


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 947


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "twe", string2: "vrp", string3: "evz"
Model : string1: "gjr", string2: "hsd", string3: "yky"
Model : string1: "vvk", string2: "eyg", string3: "bqr"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("vrp") ("evz") = string_eq ("twe") ("evz")
string_eq ("hsd") ("yky") = string_eq ("gjr") ("yky")
string_eq ("eyg") ("bqr") = string_eq ("vvk") ("bqr")
Simplifying took 0.003311 seconds
Result : true
advanced_generalize done
=================================================
Progress: 948


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 949


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "mqa", string3: "fkf"
Model : string1: "nxn", string3: "bgh"
Model : string1: "szq", string3: "hjo"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("mqa") ("fkf") = true
string_eq ("nxn") ("bgh") = true
string_eq ("szq") ("hjo") = true
Simplifying took 0.001431 seconds
Result : true
advanced_generalize done
=================================================
Progress: 950


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "ond", string2: "edl", string3: "huk"
Model : string1: "jun", string2: "jti", string3: "yvo"
Model : string1: "lxf", string2: "sbz", string3: "kib"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ond") ("huk") = string_eq ("edl") ("huk")
string_eq ("jun") ("yvo") = string_eq ("jti") ("yvo")
string_eq ("lxf") ("kib") = string_eq ("sbz") ("kib")
Simplifying took 0.004114 seconds
Result : true
advanced_generalize done
=================================================
Progress: 951


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 952


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 953


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "lqr", string3: "djy"
Model : string2: "jud", string3: "ahz"
Model : string2: "npc", string3: "nrw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("lqr") ("djy") = true
string_eq ("jud") ("ahz") = true
string_eq ("npc") ("nrw") = true
Simplifying took 0.002290 seconds
Result : true
advanced_generalize done
=================================================
Progress: 954


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 955


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "wbe", string2: "nhv", string3: "mcr"
Model : string1: "afa", string2: "bzh", string3: "jcn"
Model : string1: "bbi", string2: "jph", string3: "nms"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("nhv") ("mcr") = string_eq ("wbe") ("mcr")
string_eq ("bzh") ("jcn") = string_eq ("afa") ("jcn")
string_eq ("jph") ("nms") = string_eq ("bbi") ("nms")
Simplifying took 0.003065 seconds
Result : true
advanced_generalize done
=================================================
Progress: 956


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 957


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "qab", string3: "uuq"
Model : string1: "qxu", string3: "tqx"
Model : string1: "rbi", string3: "kjq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qab") ("uuq") = true
string_eq ("qxu") ("tqx") = true
string_eq ("rbi") ("kjq") = true
Simplifying took 0.002954 seconds
Result : true
advanced_generalize done
=================================================
Progress: 958


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "sts", string2: "vzs", string3: "gyv"
Model : string1: "dyk", string2: "rsw", string3: "vnj"
Model : string1: "cod", string2: "qma", string3: "qcv"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("sts") ("gyv") = string_eq ("vzs") ("gyv")
string_eq ("dyk") ("vnj") = string_eq ("rsw") ("vnj")
string_eq ("cod") ("qcv") = string_eq ("qma") ("qcv")
Simplifying took 0.004675 seconds
Result : true
advanced_generalize done
=================================================
Progress: 959


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 960


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 961


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "uwx", string3: "mep"
Model : string2: "oee", string3: "hhb"
Model : string2: "yvu", string3: "spz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("uwx") ("mep") = true
string_eq ("oee") ("hhb") = true
string_eq ("yvu") ("spz") = true
Simplifying took 0.002776 seconds
Result : true
advanced_generalize done
=================================================
Progress: 962


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 963


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "xvp", string2: "duk", string3: "ulp"
Model : string1: "vqx", string2: "oqi", string3: "pev"
Model : string1: "nlg", string2: "rtd", string3: "nxp"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("duk") ("ulp") = string_eq ("xvp") ("ulp")
string_eq ("oqi") ("pev") = string_eq ("vqx") ("pev")
string_eq ("rtd") ("nxp") = string_eq ("nlg") ("nxp")
Simplifying took 0.006581 seconds
Result : true
advanced_generalize done
=================================================
Progress: 964


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 965


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "idx", string3: "ayk"
Model : string1: "lig", string3: "nlq"
Model : string1: "xzf", string3: "iht"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("idx") ("ayk") = true
string_eq ("lig") ("nlq") = true
string_eq ("xzf") ("iht") = true
Simplifying took 0.001657 seconds
Result : true
advanced_generalize done
=================================================
Progress: 966


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "hqg", string2: "mkg", string3: "vdc"
Model : string1: "wlu", string2: "lib", string3: "xbl"
Model : string1: "tdh", string2: "nle", string3: "zof"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("hqg") ("vdc") = string_eq ("mkg") ("vdc")
string_eq ("wlu") ("xbl") = string_eq ("lib") ("xbl")
string_eq ("tdh") ("zof") = string_eq ("nle") ("zof")
Simplifying took 0.006407 seconds
Result : true
advanced_generalize done
=================================================
Progress: 967


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 968


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 969


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "vis", string3: "dfb"
Model : string2: "yws", string3: "ypj"
Model : string2: "xlq", string3: "ebh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("vis") ("dfb") = true
string_eq ("yws") ("ypj") = true
string_eq ("xlq") ("ebh") = true
Simplifying took 0.003745 seconds
Result : true
advanced_generalize done
=================================================
Progress: 970


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 971


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "pyb", string2: "vtw", string3: "jfz"
Model : string1: "sdx", string2: "qas", string3: "nvy"
Model : string1: "gxz", string2: "zjl", string3: "lwe"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("vtw") ("jfz") = string_eq ("pyb") ("jfz")
string_eq ("qas") ("nvy") = string_eq ("sdx") ("nvy")
string_eq ("zjl") ("lwe") = string_eq ("gxz") ("lwe")
Simplifying took 0.004689 seconds
Result : true
advanced_generalize done
=================================================
Progress: 972


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 973


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "mlc", string3: "usl"
Model : string1: "xqk", string3: "qkj"
Model : string1: "chi", string3: "puj"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("mlc") ("usl") = true
string_eq ("xqk") ("qkj") = true
string_eq ("chi") ("puj") = true
Simplifying took 0.002497 seconds
Result : true
advanced_generalize done
=================================================
Progress: 974


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "wbh", string2: "qik", string3: "sha"
Model : string1: "vvn", string2: "lnw", string3: "jwp"
Model : string1: "dnb", string2: "hzh", string3: "mev"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("wbh") ("sha") = string_eq ("qik") ("sha")
string_eq ("vvn") ("jwp") = string_eq ("lnw") ("jwp")
string_eq ("dnb") ("mev") = string_eq ("hzh") ("mev")
Simplifying took 0.004609 seconds
Result : true
advanced_generalize done
=================================================
Progress: 975


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 976


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:8)
=================================================
Progress: 977


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 978


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 979


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 980


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 981


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8)
=================================================
Progress: 982


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:8)
=================================================
Progress: 983


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:8)
rewrite Case1 in goal at 0(rank:16)
rewrite Case3 in goal at 0(rank:24)
=================================================
Progress: 984


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 985


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 986


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 987


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 988


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:6)
=================================================
Progress: 989


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6)
=================================================
Progress: 990


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6)
=================================================
Progress: 991


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: P ("hst") (P ("njk") (V ("dvp"))), string1: "pnm", string2: "qvt"
Model : lambda2: V ("jth"), string1: "osd", string2: "wbm"
Model : lambda2: V ("zfq"), string1: "fkg", string2: "ppo"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (P ("hst") (P ("njk") (V ("dvp")))) (("qvt"::("pnm"::(Nil)))) = true
sub_check_ta1 (V ("jth")) (("wbm"::("osd"::(Nil)))) = true
sub_check_ta1 (V ("zfq")) (("ppo"::("fkg"::(Nil)))) = true
Simplifying took 0.005991 seconds
Result : true
advanced_generalize done
=================================================
Progress: 992


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 993


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case2 in goal at 0(rank:30)
=================================================
Progress: 994


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 995


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 996


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 997


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 998


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "gmt", string3: "pqj"
Model : string2: "auu", string3: "oqz"
Model : string2: "ajj", string3: "xie"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("gmt") ("pqj") = true
string_eq ("auu") ("oqz") = true
string_eq ("ajj") ("xie") = true
Simplifying took 0.000711 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 999


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "wue", string3: "vzv"
Model : string1: "rxo", string3: "cdr"
Model : string1: "jjd", string3: "ksk"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("wue") ("vzv") = true
string_eq ("rxo") ("cdr") = true
string_eq ("jjd") ("ksk") = true
Simplifying took 0.001580 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 1000


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "ygu", string3: "zsn"
Model : string2: "mvg", string3: "fsx"
Model : string2: "vfy", string3: "tjf"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ygu") ("zsn") = true
string_eq ("mvg") ("fsx") = true
string_eq ("vfy") ("tjf") = true
Simplifying took 0.002515 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 1001


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "rhz", string3: "iuy"
Model : string1: "xqa", string3: "ttu"
Model : string1: "aoa", string3: "kkx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("rhz") ("iuy") = true
string_eq ("xqa") ("ttu") = true
string_eq ("aoa") ("kkx") = true
Simplifying took 0.001645 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 1002


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "dhm", string3: "qpu"
Model : string2: "ohb", string3: "zdr"
Model : string2: "igw", string3: "qyu"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dhm") ("qpu") = true
string_eq ("ohb") ("zdr") = true
string_eq ("igw") ("qyu") = true
Simplifying took 0.001559 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 1003


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "hge", string3: "yxv"
Model : string1: "rqh", string3: "bxd"
Model : string1: "qtr", string3: "ltb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("hge") ("yxv") = true
string_eq ("rqh") ("bxd") = true
string_eq ("qtr") ("ltb") = true
Simplifying took 0.001183 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 1004


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "bdz", string3: "fqf"
Model : string2: "hcz", string3: "ztg"
Model : string2: "enq", string3: "oqi"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bdz") ("fqf") = true
string_eq ("hcz") ("ztg") = true
string_eq ("enq") ("oqi") = true
Simplifying took 0.000985 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 1005


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "kjo", string3: "hja"
Model : string1: "dig", string3: "kkg"
Model : string1: "dox", string3: "tav"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("kjo") ("hja") = true
string_eq ("dig") ("kkg") = true
string_eq ("dox") ("tav") = true
Simplifying took 0.001017 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 1006


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:12)
=================================================
Progress: 1007


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 1008


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1009


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:11)
=================================================
Progress: 1010


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 1011


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:12)
=================================================
Progress: 1012


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12)
=================================================
Progress: 1013


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12)
rewrite Case1 in goal at 0(rank:20)
rewrite Case3 in goal at 0(rank:28)
=================================================
Progress: 1014


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 1015


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1016


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:10)
=================================================
Progress: 1017


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 1018


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10)
=================================================
Progress: 1019


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:10)
=================================================
Progress: 1020


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: V ("tsl"), string1: "lcl", string2: "qif"
Model : lambda2: V ("tip"), string1: "gfn", string2: "gmf"
Model : lambda2: V ("jwu"), string1: "mtk", string2: "zhb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("tsl")) (("qif"::("lcl"::(Nil)))) = true
sub_check_ta1 (V ("tip")) (("gmf"::("gfn"::(Nil)))) = true
sub_check_ta1 (V ("jwu")) (("zhb"::("mtk"::(Nil)))) = true
Simplifying took 0.004882 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1021


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:12)
=================================================
Progress: 1022


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 1023


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1024


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:11)
=================================================
Progress: 1025


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 1026


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:12)
=================================================
Progress: 1027


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12)
=================================================
Progress: 1028


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12)
rewrite Case1 in goal at 0(rank:20)
rewrite Case3 in goal at 0(rank:28)
=================================================
Progress: 1029


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 1030


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1031


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:10)
=================================================
Progress: 1032


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 1033


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:10)
=================================================
Progress: 1034


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10)
=================================================
Progress: 1035


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:10)
=================================================
Progress: 1036


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: C (V ("adn")) (V ("cfw")), string1: "cgn", string2: "lgm"
Model : lambda2: V ("uii"), string1: "eyn", string2: "mfu"
Model : lambda2: V ("dwb"), string1: "bgg", string2: "twe"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (C (V ("adn")) (V ("cfw"))) (("lgm"::("cgn"::(Nil)))) = true
sub_check_ta1 (V ("uii")) (("mfu"::("eyn"::(Nil)))) = true
sub_check_ta1 (V ("dwb")) (("twe"::("bgg"::(Nil)))) = true
Simplifying took 0.003913 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1037


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 1038


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 1039


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 1040


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
rewrite <- Case2 in goal at 3(rank:12)
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:12)
=================================================
Progress: 1041


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1042


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1043


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1044


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1045


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string3)(rank:14)
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 1046


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 1047


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1048


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1049


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1050


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1051


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1052


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case3 in goal at 0(rank:13)
rewrite <- Case3 in goal at 1(rank:13)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1053


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1054


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1055


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1056


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1057


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1058


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1059


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1060


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1061


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1062


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1063


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1064


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 1065


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1066


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 12
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1067


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1068


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1069


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1070


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1071


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1072


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 7
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 1073


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1074


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1075


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1076


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1077


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1078


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1079


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case4 in goal at 0(rank:14)
=================================================
Progress: 1080


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "zre", string2: "bub"
Model : string1: "bil", string2: "bsn"
Model : string1: "pal", string2: "ijz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("bub") ("zre")
true = string_eq ("bsn") ("bil")
true = string_eq ("ijz") ("pal")
Simplifying took 0.003329 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1081


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1082


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1083


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1084


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1085


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "kez", string2: "tcn"
Model : string1: "vgu", string2: "myc"
Model : string1: "ffe", string2: "qtr"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("tcn") ("kez")
true = string_eq ("myc") ("vgu")
true = string_eq ("qtr") ("ffe")
Simplifying took 0.004779 seconds
Result : true
advanced_generalize done


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 1086


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 1087


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 1088


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 1089


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13)
=================================================
Progress: 1090


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "dfa", string2: "jzv"
Model : string1: "gtm", string2: "lxb"
Model : string1: "usp", string2: "lne"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("jzv") ("dfa")
true = string_eq ("lxb") ("gtm")
true = string_eq ("lne") ("usp")
Simplifying took 0.004068 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1091


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case1 in goal at 0
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "gwr", string2: "dhp"
Model : string1: "lbq", string2: "ifs"
Model : string1: "lhr", string2: "jje"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("dhp") ("gwr")
true = string_eq ("ifs") ("lbq")
true = string_eq ("jje") ("lhr")
Simplifying took 0.000437 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 1092


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
=================================================
Progress: 1093


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1094


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1095


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1096


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1097


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1098


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1099


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1100


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1101


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1102


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1103


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "rzc", string2: "gbx"
Model : string1: "pqx", string2: "kky"
Model : string1: "ghi", string2: "cxd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("gbx") ("rzc")
true = string_eq ("kky") ("pqx")
true = string_eq ("cxd") ("ghi")
Simplifying took 0.004119 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1104


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1105


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1106


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1107


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1108


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "nck", string2: "nen"
Model : string1: "lgv", string2: "vba"
Model : string1: "bwx", string2: "kmm"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("nen") ("nck")
true = string_eq ("vba") ("lgv")
true = string_eq ("kmm") ("bwx")
Simplifying took 0.004401 seconds
Result : true
advanced_generalize done


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 1109


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 1110


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 1111


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 1112


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13)
=================================================
Progress: 1113


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "now", string2: "sti"
Model : string1: "jdh", string2: "swv"
Model : string1: "cln", string2: "tdh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("sti") ("now")
true = string_eq ("swv") ("jdh")
true = string_eq ("tdh") ("cln")
Simplifying took 0.003961 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1114


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1115


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1116


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1117


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1118


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1119


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 1120


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
=================================================
Progress: 1121


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1122


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1123


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
rewrite Case1 in goal at 0
case if string_eq (string3) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "ghh", string2: "biq"
Model : string1: "uhq", string2: "ljl"
Model : string1: "ctw", string2: "uqt"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("biq") ("ghh")
true = string_eq ("ljl") ("uhq")
true = string_eq ("uqt") ("ctw")
Simplifying took 0.002997 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1124


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1125


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1126


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1127


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "omy", string2: "sqn"
Model : string1: "puj", string2: "ukz"
Model : string1: "rzd", string2: "kyx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("sqn") ("omy")
true = string_eq ("ukz") ("puj")
true = string_eq ("kyx") ("rzd")
Simplifying took 0.004578 seconds
Result : true
advanced_generalize done


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 1128


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 1129


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 1130


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 1131


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "szs", string2: "hie"
Model : string1: "fph", string2: "ovh"
Model : string1: "bpt", string2: "kak"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("hie") ("szs")
true = string_eq ("ovh") ("fph")
true = string_eq ("kak") ("bpt")
Simplifying took 0.004285 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1132


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1133


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1134


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1135


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case3 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1136


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1137


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 1138


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1139


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case4 in goal at 0(rank:14)
rewrite Case1 in goal at 0(rank:22)
=================================================
Progress: 1140


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "nqw", string2: "vpy"
Model : string1: "nrw", string2: "hcc"
Model : string1: "kri", string2: "lhh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("vpy") ("nqw")
true = string_eq ("hcc") ("nrw")
true = string_eq ("lhh") ("kri")
Simplifying took 0.000864 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 1141


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
=================================================
Progress: 1142


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1143


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "haq", string2: "qdr", string3: "pdn"
Model : string1: "qrd", string2: "ywq", string3: "seb"
Model : string1: "lzp", string2: "rkx", string3: "xys"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qdr") ("pdn") = string_eq ("haq") ("pdn")
string_eq ("ywq") ("seb") = string_eq ("qrd") ("seb")
string_eq ("rkx") ("xys") = string_eq ("lzp") ("xys")
Simplifying took 0.009544 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1144


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1145


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1146


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1147


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1148


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1149


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1150


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1151


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1152


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond4 in goal at 0(rank:27)
=================================================
Progress: 1153


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1154


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "vwg", string2: "emz", string3: "kiz"
Model : string1: "npf", string2: "ksp", string3: "nca"
Model : string1: "baj", string2: "pnv", string3: "dqd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("vwg") ("kiz") = string_eq ("emz") ("kiz")
string_eq ("npf") ("nca") = string_eq ("ksp") ("nca")
string_eq ("baj") ("dqd") = string_eq ("pnv") ("dqd")
Simplifying took 0.005708 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1155


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1156


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1157


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1158


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1159


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1160


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1161


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1162


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1163


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond4 in goal at 0(rank:27)
=================================================
Progress: 1164


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1165


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 22)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite Case1 in goal at 0
advanced_generalize done
=================================================
Progress: 1166


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 1167


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 1168


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 1169


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
rewrite <- Case2 in goal at 3(rank:12)
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:12)
=================================================
Progress: 1170


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1171


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1172


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1173


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1174


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string3)(rank:14)
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 1175


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 1176


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1177


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1178


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1179


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1180


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1181


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case3 in goal at 0(rank:13)
rewrite <- Case3 in goal at 1(rank:13)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1182


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1183


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1184


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1185


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1186


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1187


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1188


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1189


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1190


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1191


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1192


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1193


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 1194


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1195


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 12
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1196


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1197


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1198


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1199


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1200


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1201


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 7
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 1202


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1203


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1204


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1205


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1206


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1207


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1208


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case4 in goal at 0(rank:14)
=================================================
Progress: 1209


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "uqf", string2: "gqk"
Model : string1: "edw", string2: "emq"
Model : string1: "dbj", string2: "sog"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("gqk") ("uqf")
true = string_eq ("emq") ("edw")
true = string_eq ("sog") ("dbj")
Simplifying took 0.002891 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1210


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case1 in goal at 0
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "ydd", string2: "wbm"
Model : string1: "vpl", string2: "bup"
Model : string1: "ddl", string2: "hhc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("wbm") ("ydd")
true = string_eq ("bup") ("vpl")
true = string_eq ("hhc") ("ddl")
Simplifying took 0.000906 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 1211


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
=================================================
Progress: 1212


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1213


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1214


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1215


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1216


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1217


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1218


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1219


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1220


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1221


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1222


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "knz", string2: "foi"
Model : string1: "vjj", string2: "lrv"
Model : string1: "pfo", string2: "mma"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("foi") ("knz")
true = string_eq ("lrv") ("vjj")
true = string_eq ("mma") ("pfo")
Simplifying took 0.003890 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1223


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1224


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1225


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1226


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1227


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1228


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 1229


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
=================================================
Progress: 1230


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1231


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1232


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
rewrite Case1 in goal at 0
case if string_eq (string3) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "qnr", string2: "dlr"
Model : string1: "jgx", string2: "cdm"
Model : string1: "ylq", string2: "zai"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("dlr") ("qnr")
true = string_eq ("cdm") ("jgx")
true = string_eq ("zai") ("ylq")
Simplifying took 0.003481 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1233


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1234


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1235


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1236


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case3 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1237


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1238


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 1239


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1240


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case4 in goal at 0(rank:14)
rewrite Case1 in goal at 0(rank:22)
=================================================
Progress: 1241


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "ewm", string2: "kgq"
Model : string1: "dmj", string2: "aca"
Model : string1: "byz", string2: "kud"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("kgq") ("ewm")
true = string_eq ("aca") ("dmj")
true = string_eq ("kud") ("byz")
Simplifying took 0.000289 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 1242


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
=================================================
Progress: 1243


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1244


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "hkn", string2: "zml", string3: "zck"
Model : string1: "lpt", string2: "rpq", string3: "yqf"
Model : string1: "jzm", string2: "ulw", string3: "mmp"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("zml") ("zck") = string_eq ("hkn") ("zck")
string_eq ("rpq") ("yqf") = string_eq ("lpt") ("yqf")
string_eq ("ulw") ("mmp") = string_eq ("jzm") ("mmp")
Simplifying took 0.009381 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1245


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1246


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "dgh", string2: "yvb", string3: "xfz"
Model : string1: "vwf", string2: "chf", string3: "blc"
Model : string1: "ifl", string2: "sxb", string3: "wxl"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dgh") ("xfz") = string_eq ("yvb") ("xfz")
string_eq ("vwf") ("blc") = string_eq ("chf") ("blc")
string_eq ("ifl") ("wxl") = string_eq ("sxb") ("wxl")
Simplifying took 0.006914 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1247


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1248


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 22)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite Case1 in goal at 0
advanced_generalize done
=================================================
Progress: 1249


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1250


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1251


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1252


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1253


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 1254


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 1255


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case1 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "qmp", string3: "uzi"
Model : string1: "xyd", string3: "grv"
Model : string1: "xby", string3: "qul"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qmp") ("uzi") = true
string_eq ("xyd") ("grv") = true
string_eq ("xby") ("qul") = true
Simplifying took 0.003319 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1256


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1257


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1258


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1259


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1260


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11)
=================================================
Progress: 1261


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1262


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1263


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1264


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1265


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1266


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1267


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1268


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1269


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1270


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1271


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1272


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "tgd", string2: "vdq", string3: "rqw"
Model : string1: "qoj", string2: "vev", string3: "dkf"
Model : string1: "idp", string2: "vqj", string3: "tce"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("vdq") ("rqw") = string_eq ("tgd") ("rqw")
string_eq ("vev") ("dkf") = string_eq ("qoj") ("dkf")
string_eq ("vqj") ("tce") = string_eq ("idp") ("tce")
Simplifying took 0.007511 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1273


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1274


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1275


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1276


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1277


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1278


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1279


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1280


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1281


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1282


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1283


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "jmk", string2: "ifw", string3: "pyb"
Model : string1: "flq", string2: "vks", string3: "oix"
Model : string1: "usk", string2: "cdf", string3: "nkb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jmk") ("pyb") = string_eq ("ifw") ("pyb")
string_eq ("flq") ("oix") = string_eq ("vks") ("oix")
string_eq ("usk") ("nkb") = string_eq ("cdf") ("nkb")
Simplifying took 0.006300 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1284


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1285


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1286


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1287


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1288


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1289


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1290


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1291


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1292


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1293


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1294


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1295


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1296


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1297


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1298


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 1299


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 1300


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 0
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "iiq", string3: "azt"
Model : string2: "qxe", string3: "rex"
Model : string2: "lbv", string3: "dar"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("iiq") ("azt") = true
string_eq ("qxe") ("rex") = true
string_eq ("lbv") ("dar") = true
Simplifying took 0.001087 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 1301


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1302


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1303


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1304


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1305


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1306


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1307


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1308


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1309


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1310


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1311


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "akq", string2: "kob", string3: "rgv"
Model : string1: "ein", string2: "utk", string3: "jjl"
Model : string1: "yqc", string2: "dai", string3: "wfh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("kob") ("rgv") = string_eq ("akq") ("rgv")
string_eq ("utk") ("jjl") = string_eq ("ein") ("jjl")
string_eq ("dai") ("wfh") = string_eq ("yqc") ("wfh")
Simplifying took 0.006044 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1312


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1313


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1314


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1315


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1316


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1317


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1318


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1319


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1320


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1321


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1322


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "gjy", string2: "bcr", string3: "xtq"
Model : string1: "qtf", string2: "nxq", string3: "zlm"
Model : string1: "jdt", string2: "yxc", string3: "msk"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("gjy") ("xtq") = string_eq ("bcr") ("xtq")
string_eq ("qtf") ("zlm") = string_eq ("nxq") ("zlm")
string_eq ("jdt") ("msk") = string_eq ("yxc") ("msk")
Simplifying took 0.007817 seconds
Result : true
advanced_generalize done


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1323


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1324


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1325


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1326


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1327


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1328


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1329


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1330


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1331


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1332


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1333


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1334


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1335


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1336


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1337


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 1338


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 1339


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case1 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "gkj", string3: "nkg"
Model : string1: "irw", string3: "qmp"
Model : string1: "twv", string3: "yyv"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("gkj") ("nkg") = true
string_eq ("irw") ("qmp") = true
string_eq ("twv") ("yyv") = true
Simplifying took 0.002630 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1340


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1341


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1342


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1343


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1344


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1345


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1346


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1347


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1348


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1349


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1350


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "eyq", string2: "nlb", string3: "bvv"
Model : string1: "ptu", string2: "vmg", string3: "zgk"
Model : string1: "vfg", string2: "xyt", string3: "wcb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("nlb") ("bvv") = string_eq ("eyq") ("bvv")
string_eq ("vmg") ("zgk") = string_eq ("ptu") ("zgk")
string_eq ("xyt") ("wcb") = string_eq ("vfg") ("wcb")
Simplifying took 0.009113 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1351


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1352


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "fkt", string2: "wdg", string3: "hhh"
Model : string1: "xwp", string2: "pvt", string3: "kap"
Model : string1: "stv", string2: "onb", string3: "kuy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("fkt") ("hhh") = string_eq ("wdg") ("hhh")
string_eq ("xwp") ("kap") = string_eq ("pvt") ("kap")
string_eq ("stv") ("kuy") = string_eq ("onb") ("kuy")
Simplifying took 0.006509 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1353


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1354


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1355


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1356


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1357


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1358


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 1359


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 1360


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 0
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "psx", string3: "vpj"
Model : string2: "bjo", string3: "vtk"
Model : string2: "xhg", string3: "gsc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("psx") ("vpj") = true
string_eq ("bjo") ("vtk") = true
string_eq ("xhg") ("gsc") = true
Simplifying took 0.001517 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 1361


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1362


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1363


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1364


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1365


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1366


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1367


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1368


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1369


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1370


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1371


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "uja", string2: "dkh", string3: "yvf"
Model : string1: "rfj", string2: "ebf", string3: "jyj"
Model : string1: "eyt", string2: "yjx", string3: "zdm"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dkh") ("yvf") = string_eq ("uja") ("yvf")
string_eq ("ebf") ("jyj") = string_eq ("rfj") ("jyj")
string_eq ("yjx") ("zdm") = string_eq ("eyt") ("zdm")
Simplifying took 0.007947 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1372


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1373


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "tty", string2: "jzx", string3: "khi"
Model : string1: "rew", string2: "ahy", string3: "xis"
Model : string1: "dfc", string2: "qus", string3: "nrz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("tty") ("khi") = string_eq ("jzx") ("khi")
string_eq ("rew") ("xis") = string_eq ("ahy") ("xis")
string_eq ("dfc") ("nrz") = string_eq ("qus") ("nrz")
Simplifying took 0.006525 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1374


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1375


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 1376


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 1377


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 1378


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
rewrite <- Case2 in goal at 3(rank:12)
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:12)
=================================================
Progress: 1379


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1380


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1381


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1382


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1383


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string3)(rank:14)
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 1384


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 1385


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1386


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1387


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1388


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1389


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1390


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case3 in goal at 0(rank:13)
rewrite <- Case3 in goal at 1(rank:13)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1391


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1392


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1393


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1394


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1395


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1396


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1397


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1398


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1399


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1400


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1401


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1402


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 1403


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1404


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 12
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1405


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1406


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1407


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1408


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1409


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1410


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 7
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 1411


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1412


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1413


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1414


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1415


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1416


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1417


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case4 in goal at 0(rank:14)
=================================================
Progress: 1418


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "pnb", string2: "pyo"
Model : string1: "ike", string2: "hlt"
Model : string1: "ffo", string2: "xtm"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("pyo") ("pnb")
true = string_eq ("hlt") ("ike")
true = string_eq ("xtm") ("ffo")
Simplifying took 0.003159 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1419


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case1 in goal at 0
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "liv", string2: "vbp"
Model : string1: "hvi", string2: "ysb"
Model : string1: "mji", string2: "ofn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("vbp") ("liv")
true = string_eq ("ysb") ("hvi")
true = string_eq ("ofn") ("mji")
Simplifying took 0.000875 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 1420


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
=================================================
Progress: 1421


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1422


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1423


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1424


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1425


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1426


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1427


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1428


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1429


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1430


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1431


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "coz", string2: "kjr"
Model : string1: "pud", string2: "cwt"
Model : string1: "ele", string2: "opt"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("kjr") ("coz")
true = string_eq ("cwt") ("pud")
true = string_eq ("opt") ("ele")
Simplifying took 0.002850 seconds
Result : true
advanced_generalize done
=================================================
Progress: 1432


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1433


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1434


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1435


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1436


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1437


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
